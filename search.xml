<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Latex基础(一)Latex特殊字符表</title>
    <url>/Tech/Latex/latex_characters.html</url>
    <content><![CDATA[<div class="note info"><p><strong>说明</strong></p>
<p>本文主要记录了<code>Latex</code>中常用的特殊字符</p>
</div>
<div class="note warning"><p><strong>注意</strong></p>
<p>如果可能的话尽量避免在公式中出现<code>大括号#</code>以及类似的字符(这是保留字符)，这会导致渲染错误，处理起来比较麻烦</p>
</div>
<h2 id="字体表">字体表</h2>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>ll|l<span class="token punctuation">&#125;</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span>"normal"<span class="token punctuation">&#125;</span>      <span class="token punctuation">&amp;</span><span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>         <span class="token punctuation">&amp;</span> ABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span>"blackboard"<span class="token punctuation">&#125;</span>  <span class="token punctuation">&amp;</span><span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\mathbb</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&amp;</span><span class="token function selector">\mathbb</span><span class="token punctuation">&#123;</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span>"boldface"<span class="token punctuation">&#125;</span>    <span class="token punctuation">&amp;</span><span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\mathbf</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&amp;</span><span class="token function selector">\mathbf</span><span class="token punctuation">&#123;</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span>"typewriter"<span class="token punctuation">&#125;</span>  <span class="token punctuation">&amp;</span><span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\mathtt</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&amp;</span><span class="token function selector">\mathtt</span><span class="token punctuation">&#123;</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span>"roman"<span class="token punctuation">&#125;</span>       <span class="token punctuation">&amp;</span><span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\mathrm</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&amp;</span><span class="token function selector">\mathrm</span><span class="token punctuation">&#123;</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span>"sans-serif"<span class="token punctuation">&#125;</span>  <span class="token punctuation">&amp;</span><span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\mathsf</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&amp;</span><span class="token function selector">\mathsf</span><span class="token punctuation">&#123;</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><span class="math display">\[
\begin{array}{ll|l}
 \texttt{&quot;normal&quot;}      &amp;\texttt{}         &amp; ABCDEFGHIJKLMNOPQRSTUVWXYZ\\
 \texttt{&quot;blackboard&quot;}  &amp;\texttt{\mathbb}  &amp;\mathbb{ABCDEFGHIJKLMNOPQRSTUVWXYZ}\\
 \texttt{&quot;boldface&quot;}    &amp;\texttt{\mathbf}  &amp;\mathbf{ABCDEFGHIJKLMNOPQRSTUVWXYZ}\\
 \texttt{&quot;typewriter&quot;}  &amp;\texttt{\mathtt}  &amp;\mathtt{ABCDEFGHIJKLMNOPQRSTUVWXYZ}\\
 \texttt{&quot;roman&quot;}       &amp;\texttt{\mathrm}  &amp;\mathrm{ABCDEFGHIJKLMNOPQRSTUVWXYZ}\\
 \texttt{&quot;sans-serif&quot;}  &amp;\texttt{\mathsf}  &amp;\mathsf{ABCDEFGHIJKLMNOPQRSTUVWXYZ}\\
\end{array}
\]</span></p>
<span id="more"></span>
<div class="note primary"><p><strong>说明</strong></p>
<p>因为本文需要渲染公式较多，如果出现了公式未渲染的情况，请等待一会后刷新网页。</p>
</div>
<h2 id="色彩表">色彩表</h2>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>|lc|<span class="token punctuation">&#125;</span>
<span class="token function selector">\hline</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>black<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>黑色<span class="token punctuation">&#125;</span>   <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>darkgray<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>深灰<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>gray<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>灰色<span class="token punctuation">&#125;</span>    <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>silver<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>银色<span class="token punctuation">&#125;</span>  <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>lightgray<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>浅灰<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>white<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>白色<span class="token punctuation">&#125;</span>   <span class="token function selector">\\</span>
<span class="token function selector">\hline</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>brown<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>棕色<span class="token punctuation">&#125;</span>   <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>maroon<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>栗色<span class="token punctuation">&#125;</span>  <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>red<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>红色<span class="token punctuation">&#125;</span>     <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>fuchsia<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>桃红<span class="token punctuation">&#125;</span> <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>magenta<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>品红<span class="token punctuation">&#125;</span> <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>pink<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>粉红<span class="token punctuation">&#125;</span>    <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>orange<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>橙色<span class="token punctuation">&#125;</span>  <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>yellow<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>黄色<span class="token punctuation">&#125;</span>  <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>lime<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>青柠<span class="token punctuation">&#125;</span>    <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>olive<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>橄榄<span class="token punctuation">&#125;</span>   <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>green<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>绿色<span class="token punctuation">&#125;</span>   <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>aqua<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>水绿<span class="token punctuation">&#125;</span>    <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>cyan<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>青色<span class="token punctuation">&#125;</span>    <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>teal<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>靛青<span class="token punctuation">&#125;</span>    <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>blue<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>蓝色<span class="token punctuation">&#125;</span>    <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>navy<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>海蓝<span class="token punctuation">&#125;</span>    <span class="token function selector">\\</span>
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>purple<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>罗兰<span class="token punctuation">&#125;</span>  <span class="token function selector">\\</span> 
<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>purple<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>紫色<span class="token punctuation">&#125;</span>  <span class="token function selector">\\</span> 
<span class="token function selector">\hline</span>
<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><span class="math display">\[
\begin{array}{|lc|}
\hline
\color{black}{黑色}   \\
\color{darkgray}{深灰}\\
\color{gray}{灰色}    \\
\color{silver}{银色}  \\
\color{lightgray}{浅灰}\\
\color{white}{白色}   \\
\hline
\color{brown}{棕色}   \\
\color{maroon}{栗色}  \\
\color{red}{红色}     \\
\color{fuchsia}{桃红} \\
\color{magenta}{品红} \\
\color{pink}{粉红}    \\
\color{orange}{橙色}  \\
\color{yellow}{黄色}  \\
\color{lime}{青柠}    \\
\color{olive}{橄榄}   \\
\color{green}{绿色}   \\
\color{aqua}{水绿}    \\
\color{cyan}{青色}    \\
\color{teal}{靛青}    \\
\color{blue}{蓝色}    \\
\color{navy}{海蓝}    \\
\color{purple}{罗兰}  \\ 
\color{purple}{紫色}  \\ 
\hline
\end{array}
\]</span></p>
<h2 id="连分数">连分数</h2>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">x = a_0 + <span class="token function selector">\cfrac</span><span class="token punctuation">&#123;</span>1^2<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>a_1
        + <span class="token function selector">\cfrac</span><span class="token punctuation">&#123;</span>2^2<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>a_2
        + <span class="token function selector">\cfrac</span><span class="token punctuation">&#123;</span>3^2<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>a_3 
        + <span class="token function selector">\cfrac</span><span class="token punctuation">&#123;</span>4^4<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>a_4 + <span class="token function selector">\cdots</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><span class="math display">\[
x = a_0 + \cfrac{1^2}{a_1
        + \cfrac{2^2}{a_2
        + \cfrac{3^2}{a_3 
        + \cfrac{4^4}{a_4 + \cdots}}}}
\]</span></p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\underset</span><span class="token punctuation">&#123;</span>j=1<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token function selector">\overset</span><span class="token punctuation">&#123;</span><span class="token function selector">\infty</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token function selector">\LARGE</span><span class="token function selector">\mathrm</span> K<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function selector">\frac</span><span class="token punctuation">&#123;</span>a_j<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>b_j<span class="token punctuation">&#125;</span>
=<span class="token function selector">\cfrac</span><span class="token punctuation">&#123;</span>a_1<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>b_1
+<span class="token function selector">\cfrac</span><span class="token punctuation">&#123;</span>a_2<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>b_2
+<span class="token function selector">\cfrac</span><span class="token punctuation">&#123;</span>a_3<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>b_3
+<span class="token function selector">\ddots</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><span class="math display">\[
\underset{j=1}{\overset{\infty}{\LARGE\mathrm K}}\frac{a_j}{b_j}
=\cfrac{a_1}{b_1
+\cfrac{a_2}{b_2
+\cfrac{a_3}{b_3
+\ddots}}}
\]</span></p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">x = a_0 + <span class="token function selector">\frac</span><span class="token punctuation">&#123;</span>1^2<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>a_1<span class="token punctuation">&#125;</span>+
          <span class="token function selector">\frac</span><span class="token punctuation">&#123;</span>2^2<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>a_2<span class="token punctuation">&#125;</span>+
          <span class="token function selector">\frac</span><span class="token punctuation">&#123;</span>3^2<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>a_3<span class="token punctuation">&#125;</span>+
          <span class="token function selector">\frac</span><span class="token punctuation">&#123;</span>4^4<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>a_4<span class="token punctuation">&#125;</span>+ <span class="token function selector">\cdots</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><span class="math display">\[
x = a_0 + \frac{1^2}{a_1}+
          \frac{2^2}{a_2}+
          \frac{3^2}{a_3}+
          \frac{4^4}{a_4}+ \cdots
\]</span></p>
<h2 id="线性代数">线性代数</h2>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>ll<span class="token punctuation">&#125;</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\overline</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\overline</span><span class="token punctuation">&#123;</span>AAA<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\underline</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\underline</span><span class="token punctuation">&#123;</span>BBB<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\widetilde</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\widetilde</span><span class="token punctuation">&#123;</span>CCC<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\widehat</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\widehat</span><span class="token punctuation">&#123;</span>DDD<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\fbox</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\fbox</span><span class="token punctuation">&#123;</span>EEE<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
<span class="token function selector">\hline</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\vec</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\vec</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\ </span><span class="token function selector">\mathrm</span><span class="token punctuation">&#123;</span>or<span class="token punctuation">&#125;</span><span class="token function selector">\ </span><span class="token function selector">\vec</span><span class="token punctuation">&#123;</span>AB<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\check</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\check</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\acute</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\acute</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\grave</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\grave</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\bar</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\bar</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\hat</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\hat</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\tilde</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\tilde</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\mathring</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\mathring</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\dot</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\dot</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\ddot</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\ddot</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\dddot</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\dddot</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><span class="math display">\[
\begin{array}{ll}
 \texttt{\overline}&amp;\overline{AAA}\\
 \texttt{\underline}&amp;\underline{BBB}\\
 \texttt{\widetilde}&amp;\widetilde{CCC}\\
 \texttt{\widehat}&amp;\widehat{DDD}\\
 \texttt{\fbox}&amp;\fbox{EEE}\\
\hline
 \texttt{\vec}&amp;\vec{x}\ \mathrm{or}\ \vec{AB}\\
 \texttt{\check}&amp;\check{x}\\
 \texttt{\acute}&amp;\acute{x}\\
 \texttt{\grave}&amp;\grave{x}\\
 \texttt{\bar}&amp;\bar{x}\\
 \texttt{\hat}&amp;\hat{x}\\
 \texttt{\tilde}&amp;\tilde{x}\\
 \texttt{\mathring}&amp;\mathring{x}\\
 \texttt{\dot}&amp;\dot{x}\\
 \texttt{\ddot}&amp;\ddot{x}\\
 \texttt{\dddot}&amp;\dddot{x}\\
\end{array}
\]</span></p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">pmatrix</span><span class="token punctuation">&#125;</span>
 1 <span class="token punctuation">&amp;</span> a_1 <span class="token punctuation">&amp;</span> a_1^2 <span class="token punctuation">&amp;</span> <span class="token function selector">\cdots</span> <span class="token punctuation">&amp;</span> a_1^n <span class="token function selector">\\</span>
 1 <span class="token punctuation">&amp;</span> a_2 <span class="token punctuation">&amp;</span> a_2^2 <span class="token punctuation">&amp;</span> <span class="token function selector">\cdots</span> <span class="token punctuation">&amp;</span> a_2^n <span class="token function selector">\\</span>
 <span class="token function selector">\vdots</span>  <span class="token punctuation">&amp;</span> <span class="token function selector">\vdots</span><span class="token punctuation">&amp;</span> <span class="token function selector">\vdots</span> <span class="token punctuation">&amp;</span> <span class="token function selector">\ddots</span> <span class="token punctuation">&amp;</span> <span class="token function selector">\vdots</span> <span class="token function selector">\\</span>
 1 <span class="token punctuation">&amp;</span> a_m <span class="token punctuation">&amp;</span> a_m^2 <span class="token punctuation">&amp;</span> <span class="token function selector">\cdots</span> <span class="token punctuation">&amp;</span> a_m^n <span class="token function selector">\\</span>
<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">pmatrix</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><span class="math display">\[
\begin{pmatrix}
 1 &amp; a_1 &amp; a_1^2 &amp; \cdots &amp; a_1^n \\
 1 &amp; a_2 &amp; a_2^2 &amp; \cdots &amp; a_2^n \\
 \vdots  &amp; \vdots&amp; \vdots &amp; \ddots &amp; \vdots \\
 1 &amp; a_m &amp; a_m^2 &amp; \cdots &amp; a_m^n \\
\end{pmatrix}
\]</span></p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>ll<span class="token punctuation">&#125;</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\overline</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\overline</span><span class="token punctuation">&#123;</span>AAA<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\underline</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\underline</span><span class="token punctuation">&#123;</span>BBB<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\widetilde</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\widetilde</span><span class="token punctuation">&#123;</span>CCC<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\widehat</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\widehat</span><span class="token punctuation">&#123;</span>DDD<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\fbox</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\fbox</span><span class="token punctuation">&#123;</span>EEE<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
<span class="token function selector">\hline</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\vec</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\vec</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\ </span><span class="token function selector">\mathrm</span><span class="token punctuation">&#123;</span>or<span class="token punctuation">&#125;</span><span class="token function selector">\ </span><span class="token function selector">\vec</span><span class="token punctuation">&#123;</span>AB<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\check</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\check</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\acute</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\acute</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\grave</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\grave</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\bar</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\bar</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\hat</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\hat</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\tilde</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\tilde</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\mathring</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\mathring</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\dot</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\dot</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\ddot</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\ddot</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\texttt</span><span class="token punctuation">&#123;</span><span class="token function selector">\dddot</span><span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\dddot</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><span class="math display">\[
\begin{array}{ll}
 \texttt{\overline}&amp;\overline{AAA}\\
 \texttt{\underline}&amp;\underline{BBB}\\
 \texttt{\widetilde}&amp;\widetilde{CCC}\\
 \texttt{\widehat}&amp;\widehat{DDD}\\
 \texttt{\fbox}&amp;\fbox{EEE}\\
\hline
 \texttt{\vec}&amp;\vec{x}\ \mathrm{or}\ \vec{AB}\\
 \texttt{\check}&amp;\check{x}\\
 \texttt{\acute}&amp;\acute{x}\\
 \texttt{\grave}&amp;\grave{x}\\
 \texttt{\bar}&amp;\bar{x}\\
 \texttt{\hat}&amp;\hat{x}\\
 \texttt{\tilde}&amp;\tilde{x}\\
 \texttt{\mathring}&amp;\mathring{x}\\
 \texttt{\dot}&amp;\dot{x}\\
 \texttt{\ddot}&amp;\ddot{x}\\
 \texttt{\dddot}&amp;\dddot{x}\\
\end{array}
\]</span></p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">pmatrix</span><span class="token punctuation">&#125;</span>
 1 <span class="token punctuation">&amp;</span> a_1 <span class="token punctuation">&amp;</span> a_1^2 <span class="token punctuation">&amp;</span> <span class="token function selector">\cdots</span> <span class="token punctuation">&amp;</span> a_1^n <span class="token function selector">\\</span>
 1 <span class="token punctuation">&amp;</span> a_2 <span class="token punctuation">&amp;</span> a_2^2 <span class="token punctuation">&amp;</span> <span class="token function selector">\cdots</span> <span class="token punctuation">&amp;</span> a_2^n <span class="token function selector">\\</span>
 <span class="token function selector">\vdots</span>  <span class="token punctuation">&amp;</span> <span class="token function selector">\vdots</span><span class="token punctuation">&amp;</span> <span class="token function selector">\vdots</span> <span class="token punctuation">&amp;</span> <span class="token function selector">\ddots</span> <span class="token punctuation">&amp;</span> <span class="token function selector">\vdots</span> <span class="token function selector">\\</span>
 1 <span class="token punctuation">&amp;</span> a_m <span class="token punctuation">&amp;</span> a_m^2 <span class="token punctuation">&amp;</span> <span class="token function selector">\cdots</span> <span class="token punctuation">&amp;</span> a_m^n <span class="token function selector">\\</span>
<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">pmatrix</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><span class="math display">\[
\begin{pmatrix}
 1 &amp; a_1 &amp; a_1^2 &amp; \cdots &amp; a_1^n \\
 1 &amp; a_2 &amp; a_2^2 &amp; \cdots &amp; a_2^n \\
 \vdots  &amp; \vdots&amp; \vdots &amp; \ddots &amp; \vdots \\
 1 &amp; a_m &amp; a_m^2 &amp; \cdots &amp; a_m^n \\
\end{pmatrix}
\]</span></p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\left</span><span class="token punctuation">[</span>
<span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>cc|c<span class="token punctuation">&#125;</span>
  1<span class="token punctuation">&amp;</span>2<span class="token punctuation">&amp;</span>3<span class="token function selector">\\</span>
  4<span class="token punctuation">&amp;</span>5<span class="token punctuation">&amp;</span>6<span class="token function selector">\\</span>
<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span>
<span class="token function selector">\right</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><span class="math display">\[
\left[
\begin{array}{cc|c}
  1&amp;2&amp;3\\
  4&amp;5&amp;6\\
\end{array}
\right]
\]</span></p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">cases</span><span class="token punctuation">&#125;</span>
<span class="token comment">%线性方程组加\\[2ex],不然会挤在一起.</span>
 a_1x+b_1y+c_1z=<span class="token function selector">\frac</span><span class="token punctuation">&#123;</span>p_1<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>q_1<span class="token punctuation">&#125;</span> <span class="token function selector">\\</span><span class="token punctuation">[</span>2ex<span class="token punctuation">]</span> 
 a_2x+b_2y+c_2z=<span class="token function selector">\frac</span><span class="token punctuation">&#123;</span>p_2<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>q_2<span class="token punctuation">&#125;</span> <span class="token function selector">\\</span><span class="token punctuation">[</span>2ex<span class="token punctuation">]</span> 
 a_3x+b_3y+c_3z=<span class="token function selector">\frac</span><span class="token punctuation">&#123;</span>p_3<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>q_3<span class="token punctuation">&#125;</span>
<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">cases</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><span class="math display">\[
\begin{cases}
 a_1x+b_1y+c_1z=\frac{p_1}{q_1} \\[2ex] 
 a_2x+b_2y+c_2z=\frac{p_2}{q_2} \\[2ex] 
 a_3x+b_3y+c_3z=\frac{p_3}{q_3}
\end{cases}
\]</span></p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token comment">%约去符,删除线</span>
<span class="token function selector">\require</span><span class="token punctuation">&#123;</span>cancel<span class="token punctuation">&#125;</span>
<span class="token function selector">\require</span><span class="token punctuation">&#123;</span>enclose<span class="token punctuation">&#125;</span>
<span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>ll<span class="token punctuation">&#125;</span>
 <span class="token function selector">\verb</span>|y+<span class="token function selector">\cancel</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span>| <span class="token punctuation">&amp;</span> y+<span class="token function selector">\cancel</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\verb</span>|y+<span class="token function selector">\bcancel</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span>| <span class="token punctuation">&amp;</span> y+<span class="token function selector">\bcancel</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\verb</span>|y+<span class="token function selector">\xcancel</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span>| <span class="token punctuation">&amp;</span> y+<span class="token function selector">\xcancel</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\verb</span>|y+<span class="token function selector">\cancelto</span><span class="token punctuation">&#123;</span>0<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span>| <span class="token punctuation">&amp;</span> y+<span class="token function selector">\cancelto</span><span class="token punctuation">&#123;</span>0<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\verb</span>+<span class="token function selector">\frac</span><span class="token punctuation">&#123;</span>1<span class="token function selector">\cancel</span>9<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token function selector">\cancel</span>95<span class="token punctuation">&#125;</span> = <span class="token function selector">\frac</span>15+<span class="token punctuation">&amp;</span> <span class="token function selector">\frac</span><span class="token punctuation">&#123;</span>1<span class="token function selector">\cancel</span>9<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token function selector">\cancel</span>95<span class="token punctuation">&#125;</span> = <span class="token function selector">\frac</span>15 <span class="token function selector">\\</span>
 <span class="token function selector">\verb</span>|<span class="token function selector">\enclose</span><span class="token punctuation">&#123;</span>horizontalstrike<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>x+y<span class="token punctuation">&#125;</span>| <span class="token punctuation">&amp;</span> <span class="token function selector">\enclose</span><span class="token punctuation">&#123;</span>horizontalstrike<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>x+y<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\verb</span>|<span class="token function selector">\enclose</span><span class="token punctuation">&#123;</span>verticalstrike<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token function selector">\frac</span> xy<span class="token punctuation">&#125;</span>| <span class="token punctuation">&amp;</span> <span class="token function selector">\enclose</span><span class="token punctuation">&#123;</span>verticalstrike<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token function selector">\frac</span> xy<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\verb</span>|<span class="token function selector">\enclose</span><span class="token punctuation">&#123;</span>updiagonalstrike<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>x+y<span class="token punctuation">&#125;</span>| <span class="token punctuation">&amp;</span> <span class="token function selector">\enclose</span><span class="token punctuation">&#123;</span>updiagonalstrike<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>x+y<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
 <span class="token function selector">\verb</span>|<span class="token function selector">\enclose</span><span class="token punctuation">&#123;</span>downdiagonalstrike<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>x+y<span class="token punctuation">&#125;</span>| <span class="token punctuation">&amp;</span> <span class="token function selector">\enclose</span><span class="token punctuation">&#123;</span>downdiagonalstrike<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>x+y<span class="token punctuation">&#125;</span><span class="token function selector">\\</span>
<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><span class="math display">\[
\require{cancel}
\require{enclose}
\begin{array}{ll}
 \verb|y+\cancel{x}| &amp; y+\cancel{x}\\
 \verb|y+\bcancel{x}| &amp; y+\bcancel{x}\\
 \verb|y+\xcancel{x}| &amp; y+\xcancel{x}\\
 \verb|y+\cancelto{0}{x}| &amp; y+\cancelto{0}{x}\\
 \verb+\frac{1\cancel9}{\cancel95} = \frac15+&amp; \frac{1\cancel9}{\cancel95} = \frac15 \\
 \verb|\enclose{horizontalstrike}{x+y}| &amp; \enclose{horizontalstrike}{x+y}\\
 \verb|\enclose{verticalstrike}{\frac xy}| &amp; \enclose{verticalstrike}{\frac xy}\\
 \verb|\enclose{updiagonalstrike}{x+y}| &amp; \enclose{updiagonalstrike}{x+y}\\
 \verb|\enclose{downdiagonalstrike}{x+y}| &amp; \enclose{downdiagonalstrike}{x+y}\\
\end{array}
\]</span></p>
<h2 id="数学符号表">数学符号表</h2>
<h3 id="数学模式重音符">数学模式重音符</h3>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\hat</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span> <span class="token function selector">\check</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span> <span class="token function selector">\tilde</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span> <span class="token function selector">\acute</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span>
<span class="token function selector">\grave</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span> <span class="token function selector">\dot</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span> <span class="token function selector">\ddot</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span> <span class="token function selector">\breve</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span>
<span class="token function selector">\bar</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span> <span class="token function selector">\vec</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span> <span class="token function selector">\widehat</span><span class="token punctuation">&#123;</span>A<span class="token punctuation">&#125;</span> <span class="token function selector">\widetilde</span><span class="token punctuation">&#123;</span>A<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><span class="math display">\[
\hat{a} \check{a} \tilde{a} \acute{a}
\grave{a} \dot{a} \ddot{a} \breve{a}
\bar{a} \vec{a} \widehat{A} \widetilde{A}
\]</span></p>
<h3 id="小写希腊字母">小写希腊字母</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20200320151609176.png" /></p>
<h3 id="大写希腊字母">大写希腊字母</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20200320151628633.png" /></p>
<h3 id="二元关系符">二元关系符</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20200320151701880.png" /></p>
<h3 id="二元运算符">二元运算符</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20200320151727539.png" /></p>
<h3 id="大尺寸运算符">大尺寸运算符</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20200320151743230.png" /></p>
<h3 id="箭头">箭头</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20200320151755631.png" /></p>
<h3 id="定界符">定界符</h3>
<figure>
<img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20200320151807633.png" alt="image-20200320151807633" /><figcaption aria-hidden="true">image-20200320151807633</figcaption>
</figure>
<h3 id="大尺寸定界符">大尺寸定界符</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20200320151824258.png" /></p>
<h3 id="其他符号">其他符号</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20200320151849212.png" /></p>
<h4 id="非数学符号">非数学符号</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/20180110120814709" /></p>
<h4 id="ams-定界符">AMS 定界符</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/20180110120845203" /></p>
<h4 id="ams-希腊和希伯来字母">AMS 希腊和希伯来字母</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/20180110120857003" /></p>
<h4 id="ams-二元关系符">AMS 二元关系符</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/20180110120908923" /></p>
<h4 id="ams-箭头">AMS 箭头</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/20180110120921290" /></p>
<h4 id="ams-二元否定关系符和箭头">AMS 二元否定关系符和箭头</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/20180110120934677" /></p>
<h4 id="ams-二元运算符">AMS 二元运算符</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/20180110120948160" /></p>
<h4 id="ams-其它符号">AMS 其它符号</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/20180110121000205" /></p>
<h4 id="数学字母">数学字母</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/20180110121011781" /></p>
]]></content>
      <categories>
        <category>Tech</category>
        <category>Latex</category>
      </categories>
      <tags>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>MathJax测试</title>
    <url>/Hexo/MathJax_test.html</url>
    <content><![CDATA[<p><span class="math display">\[
\sum^{2}_{i=1}
\]</span></p>
<p><span class="math display">\[
\begin{array}{|lc|}
\color{black}{黑色}   \\
\color{darkgray}{深灰}\\
\color{gray}{灰色}    \\
\color{silver}{银色}  \\
\color{lightgray}{浅灰}\\
\color{white}{白色}   \\
\end{array}
\]</span></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Latex</tag>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Cpp(二)Cpp中级语法</title>
    <url>/Tech/Cpp/cpp_grammar_intermediate_2.html</url>
    <content><![CDATA[<div class="note info"><p><strong>说明</strong></p>
<p>本文是在<code>大三期间</code>看<code>北京大学 李葛老师</code>的<code>C语言基础与进阶</code>网课所做笔记，后并未勘误，如有错误，请谅解</p>
</div>
<span id="more"></span>
<h2 id="c语言基础与进阶">C语言基础与进阶</h2>
<h3 id="递归基础部分">递归基础部分</h3>
<h4 id="流感传染"><a href="http://pkuic.openjudge.cn/hw06/6/">流感传染</a></h4>
<h5 id="题目描述">题目描述</h5>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210417114448702.png" /></p>
<h5 id="代码部分">代码部分</h5>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;


int main ()&#123;
    char area[100][100] &#x3D; &#123;&#39;\0&#39;&#125;;
    int n;
    cin &gt;&gt; n;
    for(int i &#x3D; 1; i &lt;&#x3D; n; i++)
        for(int j &#x3D; 1; j &lt;&#x3D; n; j++)&#123;
            cin &gt;&gt; area[i][j];
        &#125;
    int m;
    cin &gt;&gt; m;
    for(int day &#x3D; 1; day &lt;&#x3D; m; day++)&#123;
        for(int i &#x3D; 1; i &lt;&#x3D; n; i++)
            for(int j &#x3D; 1; j &lt;&#x3D; n; j++)&#123;
                if(area[i][j] &#x3D;&#x3D; &#39;w&#39;)
                &#123;
                    area[i][j] &#x3D; &#39;@&#39;;
                &#125;
            &#125;
        for(int i &#x3D; 1; i &lt;&#x3D; n ; i++)
            for(int j &#x3D; 1; j &lt;&#x3D; n; j++)&#123;
                if(area[i][j] &#x3D;&#x3D; &#39;.&#39;)
                &#123;
                    if ((area[i-1][j] &#x3D;&#x3D; &#39;@&#39;) + (area[i+1][j] &#x3D;&#x3D; &#39;@&#39;) + (area[i][j+1] &#x3D;&#x3D; &#39;@&#39;) + (area[i][j-1] &#x3D;&#x3D; &#39;@&#39;))
                    &#123;
                        area[i][j] &#x3D; &#39;w&#39;;
                    &#125;
                    
                &#125;
            &#125;
    &#125;
    int num &#x3D; 0;  
    for(int i &#x3D; 1; i &lt;&#x3D; n ; i++)&#123;
        for(int j &#x3D; 1; j &lt;&#x3D; n; j++)&#123;
            if(area[i][j] &#x3D;&#x3D; &#39;@&#39;)
                num++;
        &#125;
    &#125;
    
    cout&lt;&lt;num;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="扩号匹配问题"><a href="http://pkuic.openjudge.cn/hw07/4/">扩号匹配问题</a></h4>
<h5 id="题目描述-1">题目描述</h5>
<figure>
<img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210417114705852.png" alt="image-20210417114705852" /><figcaption aria-hidden="true">image-20210417114705852</figcaption>
</figure>
<h5 id="代码部分-1">代码部分</h5>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;

int flag &#x3D; 0;

char *F(char *str_l)&#123;
    while(*str_l !&#x3D; &#39;\0&#39;)&#123;
        if(*str_l !&#x3D; &#39;(&#39;)&#123;
            if(*str_l &#x3D;&#x3D; &#39;)&#39;)&#123;
                if(flag &#x3D;&#x3D; 0)
                &#123;
                    *str_l &#x3D; &#39;?&#39;;
                    return F( str_l + 1);
                &#125;
                else&#123;
                    flag--;
                    *str_l &#x3D; &#39; &#39;;
                    return str_l;
                &#125;
           &#125;
            else&#123;
                *str_l &#x3D; &#39; &#39;;
                str_l++;
            &#125;
        &#125;
        else&#123;
            flag++;
            char *temp &#x3D; F(str_l+1);
            if(*temp &#x3D;&#x3D; &#39;\0&#39;)&#123;
                *str_l &#x3D; &#39;$&#39;;
                return temp;
            &#125;
            else&#123;
                *str_l &#x3D; &#39; &#39;;
                str_l &#x3D; ++temp;
            &#125;
                
        &#125;
    &#125;    
    return str_l;
&#125;

int main()&#123;
    char str[100];
    while(cin&gt;&gt;str)&#123;
        cout&lt;&lt;str&lt;&lt;endl;
        F(str);
        cout&lt;&lt;str&lt;&lt;endl;
        flag &#x3D; 0;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="八皇后问题"><a href="http://pkuic.openjudge.cn/dg4/2/">八皇后问题</a></h4>
<h5 id="题目描述-2">题目描述</h5>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210417115106202.png" /></p>
<h5 id="代码部分-2">代码部分</h5>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;

int flag &#x3D; 0, flag2 &#x3D; 0;
int chess[10][10] &#x3D; &#123;0&#125;;

bool check(int row, int column)&#123;
    int *pointer &#x3D; &amp;chess[row][column];
    for(pointer--; *pointer !&#x3D; -1; pointer--)
        if(*pointer &#x3D;&#x3D; 1)&#123;
            return false;
        &#125;
    pointer &#x3D; &amp;chess[row][column];
    for(pointer+&#x3D; 9; *pointer !&#x3D; -1; pointer +&#x3D; 9)&#123;
        if(*pointer &#x3D;&#x3D; 1)&#123;
            return false;
        &#125;
    &#125;
    pointer &#x3D; &amp;chess[row][column];
    for(pointer -&#x3D; 11; *pointer !&#x3D; -1; pointer -&#x3D; 11)&#123;
        if(*pointer &#x3D;&#x3D; 1)&#123;
            return false;
        &#125;
    &#125;
    return true;
&#125;

void squeen(int num)&#123;
    if (num &#x3D;&#x3D; 9)
    &#123;
        flag++;
        cout&lt;&lt;&quot;No. &quot;&lt;&lt;flag&lt;&lt;endl;
        for(int i &#x3D; 1; i &lt; 9; i++)&#123;
            for(int j &#x3D; 1; j &lt; 9; j++)
                cout &lt;&lt; chess[i][j]&lt;&lt;&quot; &quot;;
            cout&lt;&lt;endl;
        &#125;
        return;
    &#125;
    for(int i &#x3D; 1; i &lt; 9; i++)&#123;
        chess[i][num] &#x3D; 1;
        if(check(i, num))&#123;
            squeen(num+1);
        &#125;
        chess[i][num] &#x3D; 0;
    &#125;
    return;
&#125;

int main()&#123;
    for(int i &#x3D; 0; i &lt; 10; i++)&#123;
        chess[0][i] &#x3D; -1;
        chess[9][i] &#x3D; -1;
        chess[i][0] &#x3D; -1;
        chess[i][9] &#x3D; -1;
    &#125;
    squeen(1);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="棋盘跳马问题"><a href="http://poj.org/problem?id=2243">棋盘跳马问题</a></h4>
<h5 id="题目描述-3">题目描述</h5>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210417115629826.png" /></p>
<h5 id="代码部分-3">代码部分</h5>
<p>题目描述和代码部分并不是很一样，代码写的是具有障碍的跳马问题</p>
<p>还没有规范输出，但是思路基本是对的，我是选取6X6的棋盘，固定右上角为终点格子，这个也可以自己写一个checkend()函数自行检验，此时可以输入一串字符串来表示这个棋盘，<code>@</code>代表障碍格子，<code>.</code>代表正常格子，<code>S</code>代表起始格子，<code>E</code>代表终点格子，输出时<code>S</code>到<code>E</code>的最短步数</p>
<pre class="line-numbers language-Cpp" data-language="Cpp"><code class="language-Cpp">#include &lt;iostream&gt;
using namespace std;


int history[8][8] &#x3D; &#123;0&#125;; 
char panel[8][8] &#x3D; &#123;&#39;\0&#39;&#125;;

struct position&#123;
    int x;
    int y;
    position *next;
    position *ahead;
&#125; source;


position *add_position(position *head, int x, int y)&#123;
    position *temp &#x3D; head;
    while(temp-&gt;next !&#x3D; NULL) temp &#x3D; temp-&gt;next;
    temp-&gt;x &#x3D; x;
    temp-&gt;y &#x3D; y;
    position *extra &#x3D; new position;
    temp-&gt;next &#x3D; extra;
    extra-&gt;ahead &#x3D; temp;
    extra-&gt;next &#x3D; NULL;
    return head;
&#125;
 
position *getLegalMove(position *head, int x, int y)&#123;
    if(panel[x+1][y] !&#x3D; &#39;b&#39; &amp;&amp; panel[x+1][y] !&#x3D; &#39;@&#39;)&#123;
        if(panel[x+2][y+1] !&#x3D; &#39;b&#39; &amp;&amp; panel[x+2][y+1] !&#x3D; &#39;@&#39; &amp;&amp; panel[x+2][y+1] !&#x3D; &#39;S&#39;) add_position(head, x+2, y+1);
        if(panel[x+2][y-1] !&#x3D; &#39;b&#39; &amp;&amp; panel[x+2][y-1] !&#x3D; &#39;@&#39; &amp;&amp; panel[x+2][y-1] !&#x3D; &#39;S&#39;) add_position(head, x+2, y-1);
    &#125;
    if(panel[x-1][y] !&#x3D; &#39;b&#39; &amp;&amp; panel[x-1][y] !&#x3D; &#39;@&#39;)&#123;
        if(panel[x-2][y+1] !&#x3D; &#39;b&#39; &amp;&amp; panel[x-2][y+1] !&#x3D; &#39;@&#39; &amp;&amp; panel[x-2][y+1] !&#x3D; &#39;S&#39;) add_position(head, x-2, y+1);
        if(panel[x-2][y-1] !&#x3D; &#39;b&#39; &amp;&amp; panel[x-2][y-1] !&#x3D; &#39;@&#39; &amp;&amp; panel[x-2][y-1] !&#x3D; &#39;S&#39;) add_position(head, x-2, y-1);
    &#125;
    if(panel[x][y+1] !&#x3D; &#39;b&#39; &amp;&amp; panel[x][y+1] !&#x3D; &#39;@&#39;)&#123;
        if(panel[x-1][y+2] !&#x3D; &#39;b&#39; &amp;&amp; panel[x-1][y+2] !&#x3D; &#39;@&#39; &amp;&amp; panel[x-1][y+2] !&#x3D; &#39;S&#39;) add_position(head, x-1, y+2);
        if(panel[x+1][y+2] !&#x3D; &#39;b&#39; &amp;&amp; panel[x+1][y+2] !&#x3D; &#39;@&#39; &amp;&amp; panel[x+1][y+2] !&#x3D; &#39;S&#39;) add_position(head, x+1, y+2);
    &#125;
    if(panel[x][y-1] !&#x3D; &#39;b&#39; &amp;&amp; panel[x][y-1] !&#x3D; &#39;@&#39;)&#123;
        if(panel[x-1][y-2] !&#x3D; &#39;b&#39; &amp;&amp; panel[x-1][y-2] !&#x3D; &#39;@&#39; &amp;&amp; panel[x-1][y-2] !&#x3D; &#39;S&#39;) add_position(head, x-1, y-2);
        if(panel[x+1][y-2] !&#x3D; &#39;b&#39; &amp;&amp; panel[x+1][y-2] !&#x3D; &#39;@&#39; &amp;&amp; panel[x+1][y-2] !&#x3D; &#39;S&#39;) add_position(head, x+1, y-2);
    &#125;
    return head;
&#125;

int step(position des)&#123;
    int R &#x3D; 100, Q &#x3D; 100;
    position *head &#x3D; new position, *temp;
    position mainsource &#x3D; source;
    head-&gt;next &#x3D; NULL;
    head &#x3D; getLegalMove(head, source.x, source.y);
    temp &#x3D; head; 
    while(temp-&gt;next!&#x3D;NULL)&#123;
        if(history[temp-&gt;x][temp-&gt;y] !&#x3D; -1)&#123;
            Q &#x3D; history[temp-&gt;x][temp-&gt;y];
        &#125;
        else&#123;
            if (panel[temp-&gt;x][temp-&gt;y] &#x3D;&#x3D; &#39;E&#39;)
            &#123;
                return 1;
            &#125;
            source.x &#x3D; temp -&gt; x;
            source.y &#x3D; temp -&gt; y;
            panel[temp-&gt;x][temp-&gt;y] &#x3D; &#39;S&#39;;
            Q &#x3D; step(des);
            history[temp-&gt;x][temp-&gt;y] &#x3D; Q;
            source &#x3D; mainsource;
            panel[temp-&gt;x][temp-&gt;y] &#x3D; &#39;.&#39;;
        &#125;
        if(R &gt; Q) 
            R &#x3D; Q;
        temp &#x3D; temp-&gt;next;
    &#125;
    return R+1;
&#125;

int main()&#123;
    for (int i &#x3D; 1; i &lt; 7; i++)
    &#123;
        for (int j &#x3D; 1; j &lt; 7; j++)
        &#123;
            cin&gt;&gt;panel[i][j];
        &#125;
    &#125;
    
    for(int i &#x3D; 0; i &lt; 8; i++)&#123;
        for(int j &#x3D; 0; j &lt; 8; j++)&#123;
            if(panel[i][j] &#x3D;&#x3D; &#39;S&#39;)&#123;
                source.x &#x3D; i;
                source.y &#x3D; j;
            &#125;
            if(i &#x3D;&#x3D; 0 || i &#x3D;&#x3D; 7 || j &#x3D;&#x3D; 0 || j &#x3D;&#x3D;7) panel[i][j] &#x3D; &#39;b&#39;;
            history[i][j] &#x3D; -1;
        &#125;
    &#125;
    position e &#x3D; &#123;1, 6&#125;;
    cout &lt;&lt; step(e);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Tech</category>
        <category>Cpp</category>
      </categories>
      <tags>
        <tag>Cpp</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>宮園かをりの手紙</title>
    <url>/Anime/Kaori_Miyazono_letter.html</url>
    <content><![CDATA[<h2 id="中文版本">中文版本：</h2>
<p>敬启，有马公生君：</p>
<p>  明明刚才还在一起，现在却在给你写信，感觉怪怪的。</p>
<p>  你是个很过分的人，废物，榆木脑袋，呆瓜。</p>
<p>  我第一次见到你，是在我5岁的时候，在当时我学钢琴的教室举行的钢琴赛上。一个笨拙的孩子上场了，他一屁股撞在椅子上，惹得台下观众忍俊不禁，但是当他面对比他还有庞大的钢琴，弹奏出第一个音的时候，他便成了我的憧憬。他的音色犹如24色调色板一般色彩斑斓，旋律仿佛在起舞。我还记得他喃喃自语:"成功了！",旁边的孩子哭的时候把我吓了一大跳。</p>
<p>  即便如此，你却放弃了钢琴。明明已经影响了别人的人生，你这个可恶的家伙。在看完钢琴比赛后，我一路小跑着回了家，告诉父母说：“给我买小提琴，小薰要放弃钢琴改学小提琴”，爸爸不解地问我原因，我脱口而出：“我想让公生君为我弹钢琴”。</p>
<span id="more"></span>
<p>  差劲鬼，榆木脑袋，呆瓜。</p>
<p>  知道和你念的是同一所初中时我简直要欢呼雀跃了。要怎么才能和你搭上话呢？犹豫着要不要去小卖部买三明治呢？但是到头来，我所做的不过是远远的看你一眼，因为你们几个很要好的样子啊，要好到…几乎没有我介入的空间了。</p>
<p>  我小的时候做过手术，要定期去医院复查，以初一时病倒为契机，不停进出医院，在医院度过的时间慢慢变长了，学校几乎都不怎么去了。我知道自己的身体不太好，有天晚上…我在医院的候诊室里，看到爸爸妈妈在哭，那时我便知道自己的时间所剩不多了。</p>
<p>  也是从那时起，我...开始奔跑起来了。</p>
<p>  为了不将遗憾带入坟墓，我随心所欲的做了很多事情;</p>
<p>  戴上了曾经一度害怕的隐形眼镜，不顾体重飙升的吃蛋糕;</p>
<p>  装作很了不起的样子指点人;</p>
<p>  随着自己的方式去演奏乐谱;</p>
<p>  另外...我撒了一个谎，</p>
<p>  就是 “宫园薰 喜欢 渡亮太”这个谎。</p>
<p>  这个谎言将你，将你...有马公生君带到了我面前。</p>
<p>  请替我向阿渡君道歉。不过，阿渡君应该很快就会忘了我吧。虽然作为朋友而言他很有趣，但我还是比较喜欢专一的人呢。另外...替我向小椿也道个歉吧，我不过是你们生命中稍作停留的过客，因为不想留下奇怪的祸根，所以当初就没拜托小椿，应该说 就算我直言请她将你介绍给我认识，我想她应该也是不会同意的，因为小椿她 最喜欢你了。大家早就知道了。不知道的就只有你，还有...小椿她自己了。</p>
<p>  被我那胡诌的谎言带过来的你，和我想象中有些不同。</p>
<p>  比我想象得更加内向胆小，固执，烦人，</p>
<p>  还是个偷拍狂，</p>
<p>  声音比我想象中的要低沉，</p>
<p>  比我想象中更有男子气概，</p>
<p>  但和我想象中一样的...是个温柔的人。</p>
<p>  大胆地从桥上一跃跳进冰冷的河水里，真是冷透了，但是很过瘾吧;</p>
<p>  偷看音乐室的那轮圆月，看起来就像馒头一样美味，和电车赛跑时觉得自己真的能赢，璀璨星空下，我们合唱</p>
<p>的小星星，很有趣吧;</p>
<p>  在夜里的学校去探险，一定有潜藏着什么吧;</p>
<p>  飘落的雪花，就像是四散飞舞的樱花瓣一样吧;</p>
<p>  明明是个演奏家，心里却一直充满了舞台之外的东西，让我难以忘怀的光景竟是这种琐碎的小事，这是不是很</p>
<p>奇怪啊？</p>
<p>  你是怎么想的呢？</p>
<p>  我是否住进某人的心房了呢？</p>
<p>  我，是否住进你的心房了呢？（公生:连鞋都没脱就住进来了呢）就算是须臾片刻也好…</p>
<p>  你是否会想起我呢？(公生:我要是忘记的话…你肯定会化身怨灵来找我的吧)</p>
<p>  果然啊，能选择你真是太好了。</p>
<p>  能够传达到吗？能够传达到就好了呢！</p>
<p>  有马公生君，我喜欢你;</p>
<p>  喜欢你，我喜欢你。</p>
<p>  对不起，没能吃完你送的可露丽;</p>
<p>  对不起，我老是打你;</p>
<p>  对不起，我总是耍大小姐脾气，很多很多事，都很对不起...</p>
<p>  谢谢你！</p>
<p>PS:我的宝物也一起装在信封里了。</p>
<blockquote>
<p>我喜欢了你十年，却用整个四月编制了一个我不爱你的谎言。</p>
</blockquote>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/宮園_かをりの宝物.png" /></p>
<h2 id="日本語バージョン">日本語バージョン：</h2>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/1.jfif" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/2.jfif" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/3.jfif" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/4.jfif" /></p>
]]></content>
      <categories>
        <category>Anime</category>
      </categories>
      <tags>
        <tag>Anime</tag>
        <tag>Affection</tag>
        <tag>Letter</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/Tech/Algorithm/DSA_Algorithm_sort.html</url>
    <content><![CDATA[<div class="note info"><p><strong>说明</strong></p>
<p>本文是在<code>大二期间</code>因疫情缘故无法返校看网课所做笔记，后并为勘误，如有错误，请谅解</p>
</div>
<h2 id="排序算法">排序算法</h2>
<h3 id="总览">总览</h3>
<h4 id="直观数据">直观数据</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/sort.png" /></p>
<span id="more"></span>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/0B319B38-B70E-4118-B897-74EFA7E368F9.png" /></p>
<h4 id="名词解释">名词解释：</h4>
<p><code>n：数据规模</code></p>
<p><code>k："桶"的个数</code></p>
<p><code>In-place：占用常数内存，不占用额外内存</code></p>
<p><code>Out-place：占用额外内存</code></p>
<p><code>稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同</code></p>
<h3 id="冒泡排序">冒泡排序</h3>
<p><code>冒泡排序（Bubble  Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢"浮"到数列的顶端。</code></p>
<p><code>作为最简单的排序算法之一，冒泡排序给我的感觉就像 Abandon 在单词书里出现的感觉一样，每次都在第一页第一位，所以最熟悉。冒泡排序还有一种优化算法，就是立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但这种改进对于提升性能来</code></p>
<p><code>说并没有什么太大作用。</code></p>
<h4 id="算法步骤">算法步骤</h4>
<p><code>冒泡排序（Bubble  Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢"浮"到数列的顶端。</code></p>
<p><code>作为最简单的排序算法之一，冒泡排序给我的感觉就像 Abandon 在单词书里出现的感觉一样，每次都在第一页第一位，所以最熟悉。冒泡排序还有一种优化算法，就是立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但这种改进对于提升性能来</code></p>
<p><code>说并没有什么太大作用。</code></p>
<h4 id="动图演示">动图演示</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/bubbleSort.gif" /></p>
<h4 id="代码实现">代码实现</h4>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
template&lt;typename T&gt; &#x2F;&#x2F;整数或浮点数皆可使用,若要使用类(class)或结构体(struct)时必须重载大于(&gt;)运算符
void bubble_sort(T arr[], int len) &#123;
        int i, j;
        for (i &#x3D; 0; i &lt; len - 1; i++)
                for (j &#x3D; 0; j &lt; len - 1 - i; j++)
                        if (arr[j] &gt; arr[j + 1])
                                swap(arr[j], arr[j + 1]);
&#125;
int main() &#123;
        int arr[] &#x3D; &#123; 61, 17, 29, 22, 34, 60, 72, 21, 50, 1, 62 &#125;;
        int len &#x3D; (int) sizeof(arr) &#x2F; sizeof(*arr);
        bubble_sort(arr, len);
        for (int i &#x3D; 0; i &lt; len; i++)
                cout &lt;&lt; arr[i] &lt;&lt; &#39; &#39;;
        cout &lt;&lt; endl;
        float arrf[] &#x3D; &#123; 17.5, 19.1, 0.6, 1.9, 10.5, 12.4, 3.8, 19.7, 1.5, 25.4, 28.6, 4.4, 23.8, 5.4 &#125;;
        len &#x3D; (float) sizeof(arrf) &#x2F; sizeof(*arrf);
        bubble_sort(arrf, len);
        for (int i &#x3D; 0; i &lt; len; i++)
                cout &lt;&lt; arrf[i] &lt;&lt; &#39; &#39;&lt;&lt;endl;
        return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="选择排序">选择排序</h3>
<p><code>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</code></p>
<h4 id="算法步骤-1">算法步骤</h4>
<p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</p>
<p>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</p>
<p>重复第二步，直到所有元素均排序完毕。</p>
<h4 id="动图演示-1">动图演示</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/selectionSort.gif" /></p>
<h4 id="代码实现-1">代码实现</h4>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">template&lt;typename T&gt; &#x2F;&#x2F;整數或浮點數皆可使用，若要使用物件（class）時必須設定大於（&gt;）的運算子功能
void selection_sort(std::vector&lt;T&gt;&amp; arr) &#123;
        for (int i &#x3D; 0; i &lt; arr.size() - 1; i++) &#123;
                int min &#x3D; i;
                for (int j &#x3D; i + 1; j &lt; arr.size(); j++)
                        if (arr[j] &lt; arr[min])
                                min &#x3D; j;
                std::swap(arr[i], arr[min]);
        &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="插入排序">插入排序</h3>
<p><code>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</code></p>
<p><code>插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。</code></p>
<h4 id="算法步骤-2">算法步骤</h4>
<p>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</p>
<h4 id="动图演示-2">动图演示</h4>
<figure>
<img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/insertionSort.gif" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<h4 id="代码实现-2">代码实现</h4>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void insertion_sort(int arr[],int len)&#123;
        for(int i&#x3D;1;i&lt;len;i++)&#123;
                int key&#x3D;arr[i];
                int j&#x3D;i-1;
                while((j&gt;&#x3D;0) &amp;&amp; (key&lt;arr[j]))&#123;
                        arr[j+1]&#x3D;arr[j];
                        j--;
                &#125;
                arr[j+1]&#x3D;key;
        &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Tech</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Cpp</tag>
        <tag>Algorithm</tag>
        <tag>DSA</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔(一)</title>
    <url>/Thoughts/essay_1.html</url>
    <content><![CDATA[<div class="tabs" id="tab-one"><ul class="nav-tabs"><li class="tab active"><a href="#tab-one-1"><i class="fa fa-question"></i>thought</a></li><li class="tab"><a href="#tab-one-2"><i class="fa fa-smile-o"></i>sharing</a></li><li class="tab"><a href="#tab-one-3"><i class="fa fa-comment"></i>comment</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-one-1"><div id="sub-one" class="tabs">
<ul class="nav-tabs">
<li class="tab active">
<a href="#sub-one-1"><i class="fa fa-video-camera"></i>video</a>
</li>
<li class="tab">
<a href="#sub-one-2"><i class="fa fa-book"></i>book</a>
</li>
<li class="tab">
<a href="#sub-one-3"><i class="fa fa-users"></i>event</a>
</li>
</ul>
<div class="tab-content">
<div id="sub-one-1" class="tab-pane active">
<p>
我非常欣赏古希腊哲学家爱比克泰德曾经说过的一句话，我们登上并非我们所选择的舞台，演出并非我们所选择的剧本，我们有哪一个是自愿来到这个世界上的？其实没有，我们登上并非我们所选择的舞台，在座的有谁的剧本是你自己设定的？其实不是的，仔细想想，我们这一生中其实自己能够决定的东西很少，我们可能可以决定百分之五的东西，但又百分之九十五的东西是我们决定不了的，我们决定不了我们的出生，我们决定不了我们的智商，我们更决定不了我们这一生的贵人相助，很多时候我们会羡慕别人的剧本，我有的时候也非常羡慕别人的剧本，但是，没有谁的剧本值得羡慕，你只能把你自己的剧本给演好，如果在你的一生中真的遭遇到这些挫折，那对不起，这就是你的剧本，你有两种选择，一种选择是弃演，一种选择就是把既定的剧本给演好。（2021-04-07）
</p>
<span id="more"></span>
</div>
<div id="sub-one-2" class="tab-pane">

</div>
<div id="sub-one-3" class="tab-pane">

</div>
</div>
</div></div><div class="tab-pane" id="tab-one-2"></div><div class="tab-pane" id="tab-one-3"></div></div></div>
]]></content>
      <categories>
        <category>Thoughts</category>
      </categories>
      <tags>
        <tag>Thoughts</tag>
        <tag>essay</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo配置(一)</title>
    <url>/Hexo/Hexo_configuration_1.html</url>
    <content><![CDATA[<div class="note info"><p><strong>Attention</strong></p>
<p>本文撰写时的环境为<code>Hexo Version:5.4.0</code>,<code>Next Version:8.2.2</code></p>
</div>
<h2 id="yaml配置文件">yaml配置文件</h2>
<p>一定要注意：yaml配置文件也是有其固定格式的，特别是要注意空格。</p>
<h3 id="经典报错">经典报错：</h3>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">can not read a block mapping entry; a multiline key may not be an implicit key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<h3 id="报错原因">报错原因：</h3>
<p>由于yaml文件配置时，配置项的冒号与值之间未加上空格。</p>
<h3 id="我犯的错误">我犯的错误：</h3>
<p>在配置SEO，修改<code>根目录配置文件</code> <code>theme/next/_config.yml</code>时</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 错误案例</span>
<span class="token comment"># Google Webmaster tools verification.</span>
<span class="token comment"># See: https://developers.google.com/search</span>
google_site_verification<span class="token punctuation">:</span>vBZBS_Ucyk1uWpkEaY8fasdfasdfasoSATSjHr<span class="token punctuation">-</span>k

<span class="token comment"># Bing Webmaster tools verification.</span>
<span class="token comment"># See: https://www.bing.com/webmasters</span>
bing_site_verification<span class="token punctuation">:</span>0A53asdfassdf5103C2117Ddf5737EA0C7 

<span class="token comment"># Yandex Webmaster tools verification.</span>
<span class="token comment"># See: https://webmaster.yandex.ru</span>
<span class="token key atrule">yandex_site_verification</span><span class="token punctuation">:</span> 

<span class="token comment"># 正确案例</span>
<span class="token comment"># Baidu Webmaster tools verification.</span>
<span class="token comment"># See: https://ziyuan.baidu.com/site</span>
<span class="token key atrule">baidu_site_verification</span><span class="token punctuation">:</span> code<span class="token punctuation">-</span>snlfasdfgB7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="经典报错-1">经典报错：</h3>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">YAMLException</span><span class="token punctuation">:</span> duplicated mapping key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="报错原因-1">报错原因：</h3>
<p>一个yaml文件中，配置项出现重复。</p>
<h3 id="我犯的错误-1">我犯的错误：</h3>
<p>在配置Live2d时，修改站点配置文件<code>_config.yml</code>时</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 错误案例</span>
<span class="token comment"># Live2D</span>
<span class="token comment">## https://github.com/xiazeyu/live2d-widget.js</span>
<span class="token comment">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span>
<span class="token key atrule">live2d</span><span class="token punctuation">:</span>
   <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
   <span class="token comment"># enable: false</span>
   <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local <span class="token comment"># 默认</span>
   <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/ <span class="token comment"># 插件在站点上的根目录(相对路径)</span>
   <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/ <span class="token comment"># 脚本文件相对与插件根目录路径</span>
   <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/ <span class="token comment"># 模型文件相对与插件根目录路径</span>
   <span class="token comment"># scriptFrom: jsdelivr # jsdelivr CDN</span>
   <span class="token comment"># scriptFrom: unpkg # unpkg CDN</span>
   <span class="token comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span>
   <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span>
   <span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 调试, 是否在控制台输出日志</span>
   <span class="token key atrule">model</span><span class="token punctuation">:</span>
     <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>koharu <span class="token comment"># npm-module package name</span>
     <span class="token comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span>
     <span class="token comment"># use: ./wives/wanko # 相对于博客根目录的路径</span>
     <span class="token comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span>
   <span class="token key atrule">model</span><span class="token punctuation">:</span>
     <span class="token key atrule">scale</span><span class="token punctuation">:</span> <span class="token number">1</span>
     <span class="token key atrule">hHeadPos</span><span class="token punctuation">:</span> <span class="token number">0.5</span>
     <span class="token key atrule">vHeadPos</span><span class="token punctuation">:</span> <span class="token number">0.618</span>
   <span class="token key atrule">display</span><span class="token punctuation">:</span>
     <span class="token key atrule">superSample</span><span class="token punctuation">:</span> <span class="token number">2</span>
     <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">300</span>
     <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">450</span>
     <span class="token key atrule">position</span><span class="token punctuation">:</span> right
     <span class="token key atrule">hOffset</span><span class="token punctuation">:</span> <span class="token number">0</span>
     <span class="token key atrule">vOffset</span><span class="token punctuation">:</span> <span class="token number">-20</span>
   <span class="token key atrule">mobile</span><span class="token punctuation">:</span>
     <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
     <span class="token key atrule">scale</span><span class="token punctuation">:</span> <span class="token number">0.5</span>
   <span class="token key atrule">react</span><span class="token punctuation">:</span>
     <span class="token key atrule">opacityDefault</span><span class="token punctuation">:</span> <span class="token number">0.7</span>
     <span class="token key atrule">opacityOnHover</span><span class="token punctuation">:</span> <span class="token number">0.2</span>

<span class="token comment"># 正确示范</span>
<span class="token comment"># Live2D</span>
<span class="token comment">## https://github.com/xiazeyu/live2d-widget.js</span>
<span class="token comment">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span>
<span class="token key atrule">live2d</span><span class="token punctuation">:</span>
   <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
   <span class="token comment"># enable: false</span>
   <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local <span class="token comment"># 默认</span>
   <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/ <span class="token comment"># 插件在站点上的根目录(相对路径)</span>
   <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/ <span class="token comment"># 脚本文件相对与插件根目录路径</span>
   <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/ <span class="token comment"># 模型文件相对与插件根目录路径</span>
   <span class="token comment"># scriptFrom: jsdelivr # jsdelivr CDN</span>
   <span class="token comment"># scriptFrom: unpkg # unpkg CDN</span>
   <span class="token comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span>
   <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span>
   <span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 调试, 是否在控制台输出日志</span>
   <span class="token key atrule">model</span><span class="token punctuation">:</span>
     <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>koharu <span class="token comment"># npm-module package name</span>
     <span class="token comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span>
     <span class="token comment"># use: ./wives/wanko # 相对于博客根目录的路径</span>
     <span class="token comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span>
     <span class="token key atrule">scale</span><span class="token punctuation">:</span> <span class="token number">1</span>
     <span class="token key atrule">hHeadPos</span><span class="token punctuation">:</span> <span class="token number">0.5</span>
     <span class="token key atrule">vHeadPos</span><span class="token punctuation">:</span> <span class="token number">0.618</span>
     
   <span class="token key atrule">display</span><span class="token punctuation">:</span>
     <span class="token key atrule">superSample</span><span class="token punctuation">:</span> <span class="token number">2</span>
     <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">300</span>
     <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">450</span>
     <span class="token key atrule">position</span><span class="token punctuation">:</span> right
     <span class="token key atrule">hOffset</span><span class="token punctuation">:</span> <span class="token number">0</span>
     <span class="token key atrule">vOffset</span><span class="token punctuation">:</span> <span class="token number">-20</span>
   <span class="token key atrule">mobile</span><span class="token punctuation">:</span>
     <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
     <span class="token key atrule">scale</span><span class="token punctuation">:</span> <span class="token number">0.5</span>
   <span class="token key atrule">react</span><span class="token punctuation">:</span>
     <span class="token key atrule">opacityDefault</span><span class="token punctuation">:</span> <span class="token number">0.7</span>
     <span class="token key atrule">opacityOnHover</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="令人感到绝望的评论系统建立">令人感到绝望的评论系统建立</h2>
<h3 id="流程">流程：</h3>
<ol type="1">
<li><p>首先打算使用<code>gitalk</code>，根据官方文档<a href="https://theme-next.js.org/docs/third-party-services/comments.html">Comment Systems</a>给出的配置一步一步进行，但最后总是提示<code>bad credentials</code>，不解，于是查看原仓库<code>issue</code>，发现也有类似的案例，但是他们都是通过“重新更新了<code>clientSecret</code>之后再输入一次来解决的，我尝试多次未果后，选择在google上找解决方案，但是根据他们的博客内容，大体也同样是刷新一次就解决了，还有一个是通过加单引号解决的（可能也是通过更新，只是博主并未意识到），所以在经历了长达2h的鏖战未果后，我无奈选择了放弃使用<code>gitalk</code>作为comment system。</p></li>
<li><p>然后我开始查找好用的评论系统，发现很多人都推荐了<code>valine</code>，所以我开始了漫长的配置之旅</p></li>
<li><p>我首先查看官方文档，发现文档中并未预装<code>valine</code>插件，也没有相关教程，于是我查看了valine官网，但是配置过程过于复杂，所以我决定google一份教程，但大部分的教程都指向next主题是预装了<code>valine</code>插件的，只需要修改主题配置文件，打开这一功能就可以了，这些教程最晚的时间是今年2月份的，所以我以为valine是已经预装了，但是官方文档没写而已，于是参照教程上的步骤一步一步更改了配置文件，然后就。。。</p></li>
<li><p>更早之前的教程指向需要自己<code>npm</code>安装一下，但是我觉得不可信，所以在next官方仓库中查了一下更新内容，发现还真的有，打开发现是在最近的版本（next8.1貌似）中删除了这个<code>valine</code>，具体原因没有明确指出，但是我在<code>issue</code>中看到了网友讨论的原因。于是查看了他们第三方comment system的使用方案，根据<code>hexo-next-valine</code>的教程完成了配置，但要命的事情发生了，我<code>hexo s</code>后查看博客时发现报错<code>valine Code 401: 未经授权的操作，请检查你的AppId和AppKey</code>，我google了大量的相关教程，发现他们要么是说<code>AppId</code>和<code>AppKey</code>配置错误，要么就是说自己代码有问题，也有说是打开了<code>next</code>中的<code>leancloud-counter</code>功能导致的，但都不符合我的情况，在疯狂的一顿尝试之后我决定再次更换。</p></li>
<li><p>但是我仍感觉不死心，所以我重新的在<code>issue</code>中查找了一番，然后找到了<code>valine</code>中被<code>next</code>下架的原因，以及网友们推荐的新的替代品<code>waline</code>，但是<code>waline</code>是最近才出来的，没有与<code>hexo</code>适配的插件，需要自己更改<code>html</code>文件，考虑到之后next hexo更新的时候可能会出现的诸多merge，我有点不想尝试了，但是在查看<code>waline</code>官网教程的时候我无意发现了这样一句：</p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/hexo_1.png" /></p>
<p>然后，我貌似发现之前报错<code>valine Code 401: 未经授权的操作，请检查你的AppId和AppKey</code>的原因了（对，没错我就是那个注册了Leancode国内版的倒霉蛋），因为这两个项目都是使用的leancloud作为自己的应用服务器，所以我考虑到可能是因为Leancloud不同区域的服务不同造成的，于是我从新注册了一个国际版帐号，结果顺利通过，不再报错，至此博客的评论系统正式建立完成。</p></li>
</ol>
<h3 id="我犯的错误-2">我犯的错误：</h3>
<p>在搭建<code>gitalk</code>时的错误至今仍是个谜，在搭建<code>valine</code>时的错误在于我没有考虑到同一家网站国际版和国内版的服务居然会不同，浪费了大量时间，事实上网上很多教程都是使用的国内版进行注册的，他们没有遇到这个问题应该是当时还不需要备案。</p>
<h3 id="后续">后续：</h3>
<p>当然，由于潜在的安全隐患，这个博客肯定不会长期使用<code>valine</code>作为comment system，等<code>waline</code>与<code>hexo</code>适配的插件出来后，我应该会考虑使用<code>waline</code>。</p>
<h2 id="退而求其次的公式渲染器mathjax"><del>退而求其次的公式渲染器</del>MathJax</h2>
<h3 id="流程-1">流程：</h3>
<ol type="1">
<li><p>next官方文档是表明了支持两种公式渲染的插件，即<code>MathJax</code>以及<code>KaTex</code>，一开始我上网搜了一下两个渲染器的差别，基本都写道<code>KaTex</code>相较于<code>MathJax</code>支持更少的公式效果，但是渲染速度十分的快，鉴于此我决定采用<code>KaTex</code>来作为博客的数学公式渲染器</p></li>
<li><p>官方文档<a href="https://theme-next.js.org/docs/third-party-services/math-equations.html">Math Equations</a>是提供了两种安装方案，即<a href="https://github.com/CHENXCHEN/hexo-renderer-markdown-it-plus">hexo-renderer-markdown-it-plus</a>，以及<a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a>，我稍微看了下两个插件的区别，无非是前者plus版安装更为简洁，相当于对后者进行了一次封装。所以我果断选择了前者，但是配置好后发现公式的渲染效果差强人意，（就像是用正常的字体写的公式，而不是一般我们看到的像意大利斜体的公式），果然还是不如老大哥<code>MathJax</code>，所以我卸载了这个插件</p></li>
<li><p><del>在安装<code>MathJax</code>时，需要安装渲染器<a href="https://github.com/wzpan/hexo-renderer-pandoc">hexo-renderer-pandoc</a>，这和之前使用<code>KaTex</code>的安装步骤差不多，但是要命的来了，就是他需要<code>pandoc</code>本身作为dependency，我是使用的manjaro，发现是预装了这款软件的，所以我可以很轻易的就利用<code>MathJax</code>对markdown中的公式进行渲染，但是部署到github上时，我发现好像并没有效果，并且正常的markdown渲染都出了问题，所以我猜测可能是因为我使用了<code>CI</code>的原因（我并不是直接将渲染好了的文件通过<code>hexo d</code>部署到github，而是在<code>CI</code>中进行的渲染并部署的，而<code>CI</code>的虚拟机中没有预装<code>pandoc</code>所以才导致了这样的结果），于是我google了一下解决方案，貌似大家都没有使用<code>CI</code>，并没有人遇到类似的问题，我只是看到<code>pandoc</code>官方文档中写道，<code>github actions</code>支持<code>pandoc</code>，所以我推测<code>CI</code>是一定有办法使用到<code>pandoc</code>的，我稍微看看了使用案例，但考虑到还是太麻烦了，所以退而求其次，我重新回到<code>KaTex</code>的怀抱中。</del><strong>本博客已经采用<code>MathJax</code>进行渲染，解决方案为使用<code>Travis CI</code>预装<code>pandoc</code>，详情见<code>/.travis.yml</code>文件</strong></p></li>
<li><p>然后又又又出了点小问题，因为<code>next</code>主题是提供了两种方式开启公式渲染器的嘛，即每个文章都进行渲染，或者使用<code>front matter</code>的方式指定文章是否进行公式渲染，想必只要是一个真心想把博客做好的同学都会选择后者的吧，毕竟每篇都进行公式渲染的话，posts少的时候还好，但是如果posts多起来了，可能会大量增加渲染的时间，所以我使用了后者，具体的配置如下</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">math</span><span class="token punctuation">:</span>
   <span class="token comment"># Default (false) will load mathjax / katex script on demand.</span>
   <span class="token comment"># That is it only render those page which has `mathjax: true` in front-matter.</span>
   <span class="token comment"># If you set it to true, it will load mathjax / katex srcipt EVERY PAGE.</span>
   <span class="token key atrule">every_page</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

   <span class="token key atrule">mathjax</span><span class="token punctuation">:</span>
     <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
     <span class="token comment"># Available values: none | ams | all</span>
     <span class="token key atrule">tags</span><span class="token punctuation">:</span> none

   <span class="token key atrule">katex</span><span class="token punctuation">:</span>
     <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
     <span class="token comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span>
     <span class="token key atrule">copy_tex</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>其实在配置文件中已经说明的很清楚了，需要在想要进行公式渲染的文章<code>front-matter</code>部分加入<code>mathjax: true</code>即可，但是我以为如果要使用<code>KaTex</code>的话就要把配置项改为<code>katex: true</code>，真是不做死就不会死，于是成功的又让我陷入了沉思，还好我看到了一篇文章 <a href="https://lingr7.github.io/2019/10/03/hexo+next%E5%85%AC%E5%BC%8F%E6%94%AF%E6%8C%81---%E9%87%87%E7%94%A8Katex.html">《hexo+next公式支持---采用Katex》</a>，里面谈到即使是使用<code>KaTex</code>也要将配置想设置为<code>mathjax: true</code>才可以，至此安装和使用的基本问题解决，鉴于<code>katex</code>有特别多的限制，以后有时间可能会再写一篇来介绍，或者在这篇博文下面补充。</p></li>
</ol>
<h3 id="后续-1">后续：</h3>
<p><del>因为我现在对于公式渲染的要求还不大，然后其实<code>KaTex</code>本身除了渲染的效果丑一点以外，速度还是杠杠的，所以暂时应该会继续使用<code>KaTex</code>作为公式渲染器了，以后如果有机会学习了<code>github actions</code>可能会重装<code>MathJax</code>练练手。</del><strong>本博客已经采用<code>MathJax</code>进行渲染，解决方案为使用<code>Travis CI</code>预装<code>pandoc</code>，详情见<code>/.travis.yml</code>文件</strong></p>
<h2 id="关于移动端适配">关于移动端适配</h2>
<p>其实就是响应式布局，直接把教程链接放在这吧</p>
<p><a href="http://seikasahara.com/p/1578.html">Hexo博客Next主题如何在移动端上设置不同的背景</a></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector"># 电脑 + 移动端适配
body</span><span class="token punctuation">&#123;</span>
    <span class="token property">background</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/images/bg.jpg<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
    <span class="token property">background-size</span><span class="token punctuation">:</span>cover<span class="token punctuation">;</span>
    <span class="token property">background-repeat</span><span class="token punctuation">:</span>no-repeat<span class="token punctuation">;</span>
    <span class="token property">background-attachment</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span>
    <span class="token property">background-position</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span>

<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 1000px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
  <span class="token selector">body</span><span class="token punctuation">&#123;</span>
    <span class="token property">background</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/images/bg2.jpg<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
    <span class="token property">background-size</span><span class="token punctuation">:</span>cover<span class="token punctuation">;</span>
    <span class="token property">background-repeat</span><span class="token punctuation">:</span>no-repeat<span class="token punctuation">;</span>
    <span class="token property">background-attachment</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span>
    <span class="token property">background-position</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>  
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

# 移动端 + safari适配（对第二段进行一下修改即可）
<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 1000px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
  <span class="token selector">body:before</span><span class="token punctuation">&#123;</span>
  <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">z-index</span><span class="token punctuation">:</span>-1<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span>100vh<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/images/bg2.png<span class="token punctuation">)</span></span> center 0 no-repeat<span class="token punctuation">;</span>
  <span class="token property">background-size</span><span class="token punctuation">:</span>cover<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

# 主要是safari识别不了
# <span class="token property">background-attachment</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span>
# <span class="token property">background-position</span><span class="token punctuation">:</span>center<span class="token selector">;  
# 这两项


# 当然如果考虑到像ipad这样的大屏幕，我们也需要将body部分做一些修改
body:before</span><span class="token punctuation">&#123;</span>
   <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>
   <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>
   <span class="token property">position</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span>
   <span class="token property">top</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
   <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
   <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
   <span class="token property">z-index</span><span class="token punctuation">:</span>-1<span class="token punctuation">;</span>
   <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>
   <span class="token property">height</span><span class="token punctuation">:</span>100vh<span class="token punctuation">;</span>
   <span class="token property">background</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../images/background.jpg<span class="token punctuation">)</span></span> center 0 no-repeat<span class="token punctuation">;</span>
   <span class="token property">background-size</span><span class="token punctuation">:</span>cover<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="整个博客的工作流程详解">整个博客的工作流程详解</h2>
<h3 id="整体布局">整体布局：</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/hexo_1.svg" /></p>
<h3 id="工作流程">工作流程</h3>
<h4 id="普通模式">普通模式</h4>
<ul>
<li>适用：在自己电脑(<code>windows 10</code>)上进行简单的写作并发表博客</li>
<li>流程：layout中红线所示</li>
<li>命令：<code>git add.</code>+<code>git commit -m "new blog"</code>+<code>git push</code>即可</li>
</ul>
<h4 id="陌生环境模式">陌生环境模式</h4>
<ul>
<li><p>适用：在别人的电脑上进行写作并发表博客</p></li>
<li><p>流程：</p>
<ul>
<li><p>首先安装<code>git</code></p></li>
<li><p>然后配置远程仓库并拉取</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$git init

$git remote add origin https:&#x2F;&#x2F;github.com&#x2F;user&#x2F;repo.git
# Set a new remote

$git 
# Verify new remote
&gt; origin  https:&#x2F;&#x2F;github.com&#x2F;user&#x2F;repo.git (fetch)
&gt; origin  https:&#x2F;&#x2F;github.com&#x2F;user&#x2F;repo.git (push)

# 拉取远程仓库
$git pull

# 切换分支
$git checkout writer

# 更改为ssh验证方式登录（如无长期需求，切勿使用这种方式）
$ git remote set-url origin git@github.com:USERNAME&#x2F;REPOSITORY.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>接下来，layout中红线所示</p></li>
</ul></li>
<li><p>命令：如上<code>命令</code>+<code>git add.</code>+<code>git commit -m "new blog"</code>+<code>git push</code>即可</p></li>
</ul>
<h4 id="本地调试模式">本地调试模式</h4>
<ul>
<li>适用：在自己电脑(<code>manjaro</code>)上进行博客样式或者插件的调试等</li>
<li>流程：
<ul>
<li>更改配置</li>
<li>渲染</li>
<li>创建服务</li>
</ul></li>
<li>命令：<code>hexo g</code>，<code>hexo s</code></li>
</ul>
<h3 id="工作机制详解">工作机制详解：</h3>
<h4 id="本地主机部分">本地主机部分</h4>
<p>首先通过<code>git</code>的三段命令，我们可以将除开被纳入<code>gitinore</code>文件内的所有文件和目录都<code>push</code>到github远程仓库中(<code>branch:writer</code>)</p>
<pre class="line-numbers language-none"><div class="caption"><span>/.gitinore</span></div><code class="language-none">.DS_Store
Thumbs.db
db.json
*.log
node_modules&#x2F;
public&#x2F;
.deploy*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="travis-ci部分">Travis CI部分</h4>
<ol type="1">
<li><p>配置文件</p>
<p>然后Travis CI检测到了<code>commit</code>后，先将仓库<code>pull</code>到服务器上，然后检查是否有<code>.travis.yml</code>，如果存在，则按照<code>.travis.yml</code>文件中的配置一步一步执行</p>
<pre class="line-numbers language-yaml" data-language="yaml"><div class="caption"><span>/.travis.yml</span></div><code class="language-yaml"><span class="token key atrule">language</span><span class="token punctuation">:</span> node_js

<span class="token key atrule">node_js</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> 14.16.0 
  
<span class="token key atrule">cache</span><span class="token punctuation">:</span>
  <span class="token key atrule">directories</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> node_modules

<span class="token key atrule">branches</span><span class="token punctuation">:</span>
  <span class="token key atrule">only</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> writer <span class="token comment">#源码分支名称</span>
    
<span class="token key atrule">before_install</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> npm install <span class="token punctuation">-</span>g hexo
    
<span class="token key atrule">before_script</span><span class="token punctuation">:</span>
<span class="token comment"># 下面两行配置用户名和邮箱不写也可以</span>
<span class="token punctuation">-</span> git config user.name "Coldeye"
<span class="token punctuation">-</span> git config user.email "948283368@qq.com"
<span class="token comment"># 下面一行代码主要是进行了一个replace操作，即在Travis CI执行的全过程中将</span>
<span class="token comment"># _config.yml文件中“https://github.com/Coldeye2020/coldeye2020.github.io.git”的字段</span>
<span class="token comment"># replace为“https://$&#123;GH_TOKEN&#125;@github.com/coldeye2020/coldeye2020.github.io.git”</span>
<span class="token comment"># 注意这个操作是严格大小写区分的，并且是全字符匹配</span>
<span class="token comment"># 然后$&#123;GH_TOKEN&#125;这是一个变量，主要取决于你在Travis CI官网设置时的变量值，主要是用于github verification</span>
<span class="token punctuation">-</span> sed <span class="token punctuation">-</span>i'' "s~https<span class="token punctuation">:</span>//github.com/Coldeye2020/coldeye2020.github.io.git~https<span class="token punctuation">:</span>//$<span class="token punctuation">&#123;</span>GH_TOKEN<span class="token punctuation">&#125;</span>@github.com/coldeye2020/coldeye2020.github.io.git~" _config.yml

<span class="token key atrule">install</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> npm install
<span class="token comment"># 这一步是安装hexo 和 github联动的插件，只有这样hexo deploy执行时才可以执行git操作</span>
<span class="token punctuation">-</span> npm install hexo<span class="token punctuation">-</span>deployer<span class="token punctuation">-</span>git <span class="token punctuation">-</span><span class="token punctuation">-</span>save

<span class="token key atrule">script</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> hexo clean
<span class="token punctuation">-</span> hexo generate

<span class="token key atrule">after_success</span><span class="token punctuation">:</span>
<span class="token comment"># 将根据.config.yml文件中deploy项中的配置进行执行</span>
<span class="token punctuation">-</span> hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info"><h4 id="attention">Attention</h4>
<p>这里应该有三种方式配置<code>.travis.yml</code>文件的方式：</p>
<ol type="1">
<li>以<code>hexo</code>的方式(本博客采用的方案，最为简单，并且对插件<code>baidu_url_submitter</code>的支持也更简单)</li>
<li>以<code>travis ci</code>的方式(<code>Hexo</code><a href="https://hexo.io/docs/github-pages">中文官网</a>给出的方案)</li>
<li>以<code>github action</code>的方式(<code>Hexo</code><a href="https://hexo.io/docs/github-pages">英文官网</a>给出的方案)</li>
</ol>
</div>
<pre class="line-numbers language-yaml" data-language="yaml"><div class="caption"><span>/_config.yml</span></div><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>
<span class="token comment"># deploy type设置为git,这需要首先安装插件hexo-deployer-git</span>
<span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git
<span class="token comment"># 这里的repo本应该设置为"https://$&#123;GH_TOKEN&#125;@github.com/coldeye2020/coldeye2020.github.io.git"</span>
<span class="token comment"># 但考虑到本项目放置在开源库下，所以仓库的Token肯定不可以写在配置文件中</span>
<span class="token comment"># 这里使用的trick就是在.travis.yml中用命令sed -i进行字符串替换</span>
<span class="token comment"># 把关键的token使用travis CI中早已经设置好的变量进行赋值，大大提高了安全性</span>
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/Coldeye2020/coldeye2020.github.io.git
  <span class="token comment"># 设置deloy的分支为main</span>
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main
  <span class="token key atrule">message</span><span class="token punctuation">:</span> <span class="token string">"deployment"</span>
  
<span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> baidu_url_submitter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>命令执行</p>
<ol type="1">
<li><code>hexo generate</code>命令在执行时会首先将<code>/source/</code>目录下所有开头不是下划的文件拷贝到/public/目录下（注：所有的文章均放置在<code>/source/_post/</code>目录下），对于<code>Markdown</code>和<code>HTML</code>文件则会先进行渲染然后再拷贝（如果想要指定某个<code>Markdown</code>或者<code>HTML</code>文件不进行渲染可以在站点配置文件<code>/_config.yml</code>中配置<code>skip_render</code>项）。在此过程中他会根据<code>markdown</code>文件中<code>front matter</code>段的<code>categories</code>项的值<code>A</code>来，确定渲染后得到的<code>HTML</code>文件应该放置在<code>/source/public/</code>目录下的同名<code>A</code>子目录下。如果是没有进行渲染的文件，则会保持原样放在<code>/public</code>下，其他部分(e.g.子目录<code>archives</code>,<code>categories</code>，<code>tags</code>)的生成也是差不多这么回事。同样的，<code>/themes/next/source/</code>目录下文件也会同样被copy到<code>/public/</code>目录下。</li>
<li><code>hexo deploy</code>命令在执行时会按照<code>/_config.yml</code>文件中的配置，将<code>/public/</code>目录下的所有文件<code>push</code>到<code>github 远程仓库</code>的<code>mian</code>分支</li>
</ol></li>
</ol>
<h4 id="github-远程仓库部分">Github 远程仓库部分</h4>
<ul>
<li>来自外部的<code>push</code>
<ul>
<li>来自本地主机的文件将被<code>push</code>到<code>writer</code>分支</li>
<li>来自Travis CI的文件将被<code>push</code>到<code>main</code>分支</li>
</ul></li>
<li>来自外部的<code>pull</code>
<ul>
<li>被Travis CI<code>pull</code>
<ul>
<li>若出现了<code>writter</code>分支的commit</li>
<li>检测是否存在<code>.travis.yml</code>文件</li>
<li>对<code>writer</code>分支中的文件进行<code>hexo g</code>操作</li>
</ul></li>
<li>被Vercel<code>pull</code>
<ul>
<li>若出现了<code>main</code>分支的commit</li>
<li>直接将<code>main</code>分支<code>pull</code>下来</li>
</ul></li>
</ul></li>
</ul>
<h4 id="vercel-网站托管平台部分">Vercel 网站托管平台部分</h4>
<ol type="1">
<li>如上所示，即Github仓库中的<code>main</code>分支如果出现了<code>commit</code>则会执行部署(但缺少部署文件，所以就是简单地pull下来了)</li>
<li>这个部分主要是提供了CDN服务，便于国内用户访问</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Yaml</tag>
        <tag>Configuration</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令(一)Ubuntu基础命令</title>
    <url>/Tech/Linux/linux_command_ubuntu.html</url>
    <content><![CDATA[<div class="note info"><p><strong>说明</strong></p>
<p>本文是在<code>大二下学期</code>因疫情缘故无法返校时看韩顺平<code>linux</code>网课所做笔记，后并未勘误，如有错误，请谅解</p>
</div>
<span id="more"></span>
<pre class="line-numbers language-shell" data-language="shell"><div class="caption"><span>常用基础命令</span></div><code class="language-shell"># change directory，切换目录
cd

# 删除文件
rm -rf 文件名

# 查看网络配置
ifconfig

# 新建文件
touch 文件名

# 列出当前文件夹下面的目录
ls

# 写+退出
wq

# 查看文件内容
cat 文件名

# 使用vim编辑器编辑文件
vim 文件名		<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="实操篇">实操篇</h1>
<hr />
<h2 id="vim-快捷键使用">1 vim 快捷键使用</h2>
<h4 id="拷贝行">拷贝行</h4>
<ul>
<li>yy 拷贝当前行 5yy 拷贝自上而下5行</li>
</ul>
<h4 id="粘贴行">粘贴行</h4>
<ul>
<li>p</li>
</ul>
<h4 id="删除行">删除行</h4>
<ul>
<li>dd 删除当前行 5dd 删除自上而下5行</li>
</ul>
<h4 id="查找关键词-关键字">查找关键词 /关键字</h4>
<ul>
<li>/关键字</li>
<li>找到后再按n跳转到下一个关键字</li>
</ul>
<h4 id="设置行号">设置行号</h4>
<ul>
<li>:set nu</li>
</ul>
<h4 id="取消行号">取消行号</h4>
<ul>
<li>:set nonu</li>
</ul>
<h4 id="光标到达最低行">光标到达最低行</h4>
<ul>
<li>G(shift+g) （本质是光标移动但之前没有输入数字，系统默认移动到最下面）</li>
</ul>
<h4 id="到达首行">到达首行</h4>
<ul>
<li>gg 本质控制光标移动但之前没有输入数字，系统默认移动到最上面</li>
</ul>
<h4 id="光标向下移动n行">光标向下移动n行</h4>
<ul>
<li>数字n+回车或加下方向键</li>
</ul>
<h4 id="撤销">撤销</h4>
<ul>
<li>u</li>
</ul>
<h4 id="重写">重写</h4>
<ul>
<li>ctrl+r</li>
</ul>
<h4 id="光标到达指定行">光标到达指定行</h4>
<ol type="1">
<li>设置行号 :set nu</li>
<li>输入数字</li>
<li>使用gg或者shift+g</li>
</ol>
<h5 id="上述所有操作均在正常模式下进行">上述所有操作均在正常模式下进行</h5>
<hr />
<h2 id="开机重启用户登陆注销篇">2 开机重启+用户登陆注销篇</h2>
<h3 id="开机重启">开机重启</h3>
<h4 id="shutdown">shutdown</h4>
<ul>
<li>shutdown -h now:表示立即关机</li>
<li>shutdown -h 1:表示1分钟后关机</li>
<li>shutdown -r now:立即重启</li>
</ul>
<h4 id="halt">halt</h4>
<ul>
<li>halt:效果等价于关机</li>
</ul>
<h4 id="reboot">reboot</h4>
<ul>
<li>reboot:效果等价于重启</li>
</ul>
<h4 id="sync">sync</h4>
<ul>
<li>sync:把内存的数据储存到磁盘
<ul>
<li>重启时最好先执行sync指令</li>
</ul></li>
</ul>
<h3 id="用户登录和注销对于运行级别3下有效如xshell时来说">用户登录和注销（对于运行级别3下有效，如：Xshell时来说）</h3>
<h4 id="意义">意义</h4>
<ul>
<li>root 用户权限太高，可能会删除一些核心文件</li>
<li>我们常用普通用户登录，登陆后再使用“su -用户名”命令来切换成管理员</li>
</ul>
<h4 id="切换成管理员">切换成管理员</h4>
<ul>
<li>su -用户名</li>
</ul>
<h4 id="注销">注销</h4>
<ul>
<li>logout</li>
</ul>
<hr />
<h2 id="用户管理">3 用户管理</h2>
<h3 id="基本用户管理">1 基本用户管理</h3>
<h4 id="添加用户">添加用户</h4>
<ul>
<li>useradd 用户名
<ul>
<li>创建了一个用户和一个与用户同名的组，并将用户放进此组中</li>
<li>将用户放进一个新创建的文件夹名与用户名相同的家目录中</li>
</ul></li>
<li>useradd -d 目录 用户名
<ul>
<li>创建一个用户和一个与用户同名的组，并将用户放进此组中</li>
<li>将用户放进一个新创建的文件夹名为指定名字的家目录中</li>
</ul></li>
</ul>
<h4 id="指定或修改密码">指定或修改密码</h4>
<ul>
<li>passwd 用户名
<ul>
<li>输入时密码不会显示，且要输入两次</li>
</ul></li>
</ul>
<h4 id="删除用户">删除用户</h4>
<ul>
<li>userdel 用户名
<ul>
<li>删除用户+保留家目录</li>
</ul></li>
<li>userdel -r 用户名
<ul>
<li>删除用户+删除家目录</li>
</ul></li>
</ul>
<h4 id="查询用户信息">查询用户信息</h4>
<ul>
<li>id 用户名
<ul>
<li>显示的是用户基本信息</li>
</ul></li>
</ul>
<h4 id="切换用户">切换用户</h4>
<ul>
<li>su - 用户名
<ul>
<li>注意空格（CentOS7后不需要加 - 了）</li>
<li>从权限高用户切换到权限低用户时，需要密码，反之不用</li>
<li>当需要返回原来用户时，使用exit</li>
</ul></li>
</ul>
<h4 id="查看当前用户">查看当前用户</h4>
<ul>
<li>whoami
<ul>
<li>显示名字</li>
</ul></li>
</ul>
<h3 id="用户组管理">2 用户组管理</h3>
<h4 id="增加组">增加组</h4>
<ul>
<li>groupadd 组名</li>
</ul>
<h4 id="删除组">删除组</h4>
<ul>
<li>groupdel 组名</li>
</ul>
<h4 id="增加用户到指定组">增加用户到指定组</h4>
<ul>
<li>useradd -g 用户组名 用户名
<ul>
<li>将新增用户指定到某个组</li>
</ul></li>
</ul>
<h4 id="修改用户组">修改用户组</h4>
<ul>
<li>usermod -g 用户组名 用户名
<ul>
<li>将已存在用户更改到指定组</li>
</ul></li>
</ul>
<h3 id="用户信息储存">3 用户信息储存</h3>
<h4 id="用户信息配置文件">用户信息配置文件</h4>
<ul>
<li>用户名:口令(用户密码):用户标识号:组标识号:注释性描述:主目录:登录 shell</li>
<li>位置：/ect/passwd</li>
</ul>
<h4 id="组信息配置文件">组信息配置文件</h4>
<ul>
<li>组名:口令:组标识号:组内用户列表</li>
<li>位置：/ect/group</li>
</ul>
<h4 id="口令配置文件">口令配置文件</h4>
<ul>
<li>密码和登录信息，属于加密文件</li>
<li>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</li>
<li>位置：/ect/shadow</li>
</ul>
<h2 id="实用指令">4 实用指令</h2>
<h3 id="运行级别">运行级别</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/20200328165526.png" /></p>
<h4 id="运行级别配置文件">运行级别配置文件</h4>
<ul>
<li>位置：/etc/inittab</li>
<li>这个文件是可以用vim编辑的哟，所以也可以将其指定内容设置为不同级别（但是CentOS7及以上是使用其他方式了）</li>
</ul>
<h4 id="切换到指定运行级别">切换到指定运行级别</h4>
<ul>
<li>init 数字（0-6之间的一个）
<ul>
<li>每次切换运行级别后将需要重新登录（出了单用户模式）</li>
</ul></li>
</ul>
<h4 id="找回root密码">找回root密码</h4>
<ul>
<li>每个系统和不同版本都不同（自行百度）https://blog.csdn.net/shanvlang/article/details/80385913</li>
</ul>
<h3 id="帮助指令">帮助指令</h3>
<ul>
<li>man 某个指令
<ul>
<li>获取该指令帮助信息</li>
</ul></li>
<li>help 某个指令
<ul>
<li>获得shell内置命令的帮助信息</li>
</ul></li>
<li>百度或谷歌</li>
</ul>
<h3 id="文件目录指令">文件目录指令</h3>
<p>之后复习再做整理</p>
<hr />
<h2 id="组管理和权限管理">5 组管理和权限管理</h2>
<h3 id="组管理">组管理</h3>
<ul>
<li><p>意义</p>
<ul>
<li>对于每一个linux用户，至少要属于一个组，不能独立于组外</li>
<li>对于每一个linux文件（包括目录），有所有者，所在组和其他组的概念</li>
<li>一般来说文件的所有者就是创建者，所在组就是创建者的组。其他组代指其所有者用户，所在组的用户之外的所有用户</li>
</ul></li>
<li><p>文件操作（包括目录）</p>
<ul>
<li>查看文件的所有者以及所在组
<ul>
<li>ls -ahl</li>
</ul></li>
<li>修改文件的所有者
<ul>
<li>chown 用户名 文件名</li>
</ul></li>
<li>同时改变文件的所有者以及文件的所在组
<ul>
<li>chown 用户名:组名 文件名</li>
</ul></li>
<li>改变目录以及其下所有文件的信息(递归)
<ul>
<li>chown -R 用户名:组名 文件名</li>
</ul></li>
<li>修改文件的所在组
<ul>
<li>chgrp 组名 文件名</li>
</ul></li>
</ul></li>
<li><p>用户操作</p>
<ul>
<li>查看用户信息
<ul>
<li>id 用户名</li>
</ul></li>
<li>修改用户所在组
<ul>
<li>usermod -g 组名</li>
<li>usermod -d 家目录名</li>
</ul></li>
</ul></li>
</ul>
<h3 id="权限管理">权限管理</h3>
<h4 id="权限详解">权限详解</h4>
<p>ls-l中显示的内容-rwxrw-r-- 1 root root 1213 Feb 2 09:39 abc</p>
<ul>
<li><p>0-9位说明</p>
<p>1)第0位确定文件类型(d,-,l,c,b)</p>
<p>2)第1-3位确定所有者（该文件的所有者）拥有该文件的权限。---User</p>
<p>3)第4-6位确定所属组（同用户组的）拥有该文件的权限，---Group</p>
<p>4)第7-9位确定其他用户拥有该文件的权限---Other</p>
<ul>
<li><p>rwx作用到文件</p>
<p>1)[r]代表可读(read):可以读取,查看</p>
<p>2)[w]代表可写(write):可以修改,但是不代表可以删除该文件,删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件.</p>
<p>3)[x]代表可执行(execute):可以被执行</p></li>
<li><p>rwx作用到目录</p>
<p>1)[r]代表可读(read):可以读取，ls查看目录内容</p>
<p>2)[w]代表可写(write):可以修改,目录内创建+删除+重命名目录</p>
<p>3)[x]代表可执行(execute):可以进入该目录</p></li>
<li><p>可用数字表示为:r=4,w=2,x=1因此rwx=4+2+1=7</p></li>
</ul></li>
<li><p>第10位</p>
<ul>
<li>作用于目录时 代表目录下子目录数量（包括隐藏的）</li>
<li>作用于文件时 硬链接数</li>
</ul></li>
</ul>
<h4 id="修改文件权限-chmod">修改文件权限-chmod</h4>
<ul>
<li><p>+、-、=变更权限</p>
<ul>
<li><p>u:所有者 g:所有组 o:其他人 a:所有人(u、g、o的总和)</p>
<p>1)chmod u=rwx,g=rx,o=x 文件目录名</p>
<p>2)chmod o+w 文件目录名</p>
<p>3)chmod a-x 文件目录名</p></li>
</ul></li>
<li><p>数字更变权限</p>
<ul>
<li>r=4 w=2 x=1 , rwx=4+2+1=7，rx=5</li>
<li>chmod u=rwx,g=rx,o=x 文件目录名 相当于 chmod 751 文件目录名</li>
</ul></li>
</ul>
<hr />
<h2 id="任务调度">6 任务调度</h2>
<h3 id="基本命令">基本命令</h3>
<ul>
<li>编辑任务调度
<ul>
<li>crontab -e</li>
</ul></li>
<li>查看当前任务调度
<ul>
<li>crontab -l</li>
</ul></li>
<li>终止（删除）当前任务调度
<ul>
<li>crontab -r</li>
</ul></li>
<li>重启任务调度
<ul>
<li>service crond restart</li>
</ul></li>
</ul>
<h3 id="任务调度编辑基本语法">任务调度编辑基本语法</h3>
<ul>
<li><h4 id="时间部分-任务执行部分">时间部分 + 任务执行部分</h4></li>
<li><h4 id="时间部分">时间部分</h4>
<ul>
<li>5个部分：分钟 小时 日期 月份 星期</li>
<li><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20200329142823572.png" /></li>
</ul></li>
</ul>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20200329142833796.png" /></p>
<ul>
<li><h4 id="任务执行部分">任务执行部分</h4>
<ul>
<li><p>对于较简单的命令：可以直接在 crontab -e的编辑器下直接写</p></li>
<li><p>对于较为复杂的命令：先写好一个包含完整操作指令的shell文件(.sh)，并将该文件的权限设置为可执行文件(744)</p>
<p>再到crontab -e编辑器下直接运行</p></li>
</ul></li>
</ul>
<hr />
<h2 id="磁盘分区和挂载mount">7 磁盘分区和挂载(mount)</h2>
<h3 id="查看系统中磁盘信息">1 查看系统中磁盘信息</h3>
<ul>
<li>查看系统分区及挂载情况
<ul>
<li>lsblk -f（老师不离开）</li>
</ul></li>
<li>查看磁盘基本信息（包括大小）
<ul>
<li>lsblk</li>
</ul></li>
</ul>
<h3 id="添加或移除磁盘包含挂载">2 添加或移除磁盘(包含挂载)</h3>
<ul>
<li><h4 id="给虚拟机台添加移除硬盘">给虚拟机台添加/移除硬盘</h4>
<ul>
<li>在VM软件中实现</li>
</ul></li>
<li><h4 id="将硬盘空间分区">将硬盘空间分区</h4>
<ul>
<li>fdisk /dev/sdb
<ul>
<li>m显示命令列表 p显示磁盘分区同 fdisk –l n新增分区 d删除分区 w写入并退出</li>
</ul></li>
<li>开始分区后输入n，新增分区，然后选择p(rimary)，分区类型为主分区。两次回车默认剩余全部空间。最后输入w写入分区并退出，若不保存退出输入q。</li>
</ul></li>
<li><h4 id="格式化">格式化</h4>
<ul>
<li>mkfs -t ext4 /dev/sdb1
<ul>
<li>其中ext4为分区类型</li>
</ul></li>
</ul></li>
<li><h4 id="临时挂载卸载">临时挂载/卸载</h4>
<ul>
<li>mount 设备(位置和名称) 挂载目录</li>
<li>umount 设备(位置和名称) or 挂载目录
<ul>
<li>对于卸载任意选择其中一个系统就可以识别</li>
</ul></li>
</ul></li>
<li><h4 id="永久挂载卸载">永久挂载/卸载</h4>
<ul>
<li>vim /etc/fstab</li>
<li>模仿其他行的书写格式写上
<ul>
<li>设备(位置和名称) 或者 UUID 挂载目录 分区格式 defaults 0 0</li>
</ul></li>
<li>mount –a
<ul>
<li>使挂载立即生效</li>
</ul></li>
</ul></li>
</ul>
<h3 id="查看系统磁盘使用整体情况">3 查看系统磁盘使用整体情况</h3>
<ul>
<li><h4 id="查看整体情况">查看整体情况</h4>
<ul>
<li>df -h</li>
</ul></li>
<li><h4 id="查看指定目录占用情况情况-du">查看指定目录占用情况情况 du</h4>
<ul>
<li><p>du -h 带计量单位</p></li>
<li><p>du -s 指定目录占用大小汇总</p></li>
<li><p>du -a 含文件</p></li>
<li><p>du --max-depth=1 子目录深度为1</p></li>
<li><p>du -c 列出明细的同时，增加汇总值</p></li>
<li><h4 id="常用-du--ach---max-depthn-文件目录">常用 du -ach --max-depth=n 文件目录</h4></li>
</ul></li>
</ul>
<h3 id="工作实用指令">4 工作实用指令</h3>
<ul>
<li><h4 id="统计home文件夹下文件的个数">统计/home文件夹下文件的个数</h4>
<ul>
<li>ls -l /home | grep "^-" | wc -l</li>
</ul></li>
<li><h4 id="统计home文件夹下目录的个数">统计/home文件夹下目录的个数</h4>
<ul>
<li>ls -l /home | grep "^d" | wc -l</li>
</ul></li>
<li><h4 id="统计home文件夹下所有文件的个数包括子文件夹里的">统计/home文件夹下所有文件的个数，包括子文件夹里的</h4>
<ul>
<li>ls -lR /home | grep "^-" | wc -l</li>
</ul></li>
<li><h4 id="统计home文件夹下所有文件的个数包括子文件夹里的-1">统计/home文件夹下所有文件的个数，包括子文件夹里的</h4>
<ul>
<li>ls -lR /home | grep "^d" | wc -l</li>
</ul></li>
<li><h4 id="以树状结构查看目录">以树状结构查看目录</h4>
<ul>
<li>tree 文件目录</li>
<li>如果没有就用 yum stall tree安装</li>
</ul></li>
</ul>
<h2 id="网络配置">8 网络配置</h2>
<h3 id="查询ip信息">1 查询ip信息</h3>
<ul>
<li><h4 id="windows">windows</h4>
<ul>
<li>ipconfig</li>
</ul></li>
<li><h4 id="linux">linux</h4>
<ul>
<li>ifconfig</li>
</ul></li>
</ul>
<h3 id="查询是否联通">2 查询是否联通</h3>
<ul>
<li>ping ipaddress 或者 网址域名</li>
</ul>
<h3 id="网络环境配置">3 网络环境配置</h3>
<ul>
<li><h4 id="自动获取">自动获取</h4>
<ul>
<li>方式
<ul>
<li>可以直接在运行级别5环境下进行操作，即勾选DHCP</li>
<li><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20200329170700425.png" alt="image-20200329170700425" style="zoom:50%;" /></li>
</ul></li>
<li>缺点
<ul>
<li>自动获取会导致ip地址是动态的，无法作为服务器</li>
</ul></li>
</ul></li>
<li><h4 id="手动设置">手动设置</h4>
<ul>
<li>方式
<ul>
<li>vim /etc/sysconfig/network-scripts/ifcfg-eth33
<ul>
<li>注意，不同的版本文件可能名字不同，位置不同，需要具体查询</li>
</ul></li>
<li>具体需要注意几个点：IPADDR, GATEWAY, DNS1, BOOTPROTO, ONBOOT</li>
<li><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20200329171204112.png" /></li>
<li>service network restart
<ul>
<li>重启网络服务</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
<h2 id="进程管理">9 进程管理</h2>
<h3 id="进程查看">1 进程查看</h3>
<ul>
<li><h4 id="ps">ps</h4>
<ul>
<li>-a 显示当前终端的所有进程信息</li>
<li>-u 以用户的格式显示进程信息</li>
<li>-x 显示后台进程运行的参数</li>
<li>-e 显示所有进程</li>
<li>-f 全格式</li>
</ul></li>
<li><h4 id="查看所有进程信息">查看所有进程信息</h4>
<ul>
<li>ps -aux</li>
</ul></li>
<li><h4 id="查看所有父进程">查看所有父进程</h4>
<ul>
<li>ps -ef | more</li>
</ul></li>
<li><h4 id="查看某些进程信息">查看某些进程信息</h4>
<ul>
<li>ps -aux | grep XXX(进程相关信息) | more</li>
</ul></li>
<li><h4 id="查看进程树更加直观">查看进程树(更加直观)</h4>
<ul>
<li>pstree
<ul>
<li>-p 显示进程PID</li>
<li>-u 显示进程所属用户</li>
</ul></li>
</ul>
<img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20200329184234373.png" alt="image-20200329184234373" style="zoom:50%;" /></li>
</ul>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20200329184553477.png" alt="image-20200329184553477" style="zoom:50%;" /></p>
<h3 id="进程终止">2 进程终止</h3>
<ul>
<li><h4 id="kill-进程号pid">kill 进程号(PID)</h4>
<ul>
<li>-9 表示强迫进程立即停止</li>
</ul></li>
<li><h4 id="killall-进程名称一般是父进程">killall 进程名称(一般是父进程)</h4>
<ul>
<li>支持通配符</li>
<li>删除进程下所有的子进程</li>
</ul></li>
</ul>
<h3 id="服务查看">3 服务查看</h3>
<ul>
<li><p>服务的本质也是进程</p></li>
<li><h4 id="打开图形界面进行查看">打开图形界面进行查看</h4>
<ul>
<li>setup</li>
</ul></li>
<li><h4 id="查看所有服务及其状态">查看所有服务及其状态</h4>
<ul>
<li>systemctl list-unit-files</li>
<li>/etc/init.d/服务名称 <strong>(CentOS7之后就不行了)</strong>
<ul>
<li>常用 ls -l /ect/init.d</li>
</ul></li>
</ul></li>
<li><h4 id="查看单个服务的状态">查看单个服务的状态</h4>
<ul>
<li>systemctl status 服务名称（新）</li>
<li>service 服务名称 status（旧）</li>
</ul></li>
</ul>
<h3 id="服务管理">4 服务管理</h3>
<ul>
<li><h4 id="打开图形界面进行管理永久生效下次开机后不会还原">打开图形界面进行管理（永久生效:下次开机后不会还原）</h4>
<ul>
<li>setup</li>
</ul></li>
<li><h4 id="终端操作临时生效下次开机后会还原">终端操作（临时生效:下次开机后会还原）</h4>
<ul>
<li>service 服务名 [start|stop|restart|reload|status]</li>
<li>systemctl [start|stop|restart|reload|status] 服务名</li>
</ul></li>
<li><h4 id="终端操作永久生效">终端操作（永久生效）</h4>
<ul>
<li>chkconfig 指令</li>
</ul></li>
<li><h4 id="可以在win上进行检测端口是否被监听不同服务对应不同端口">可以在win上进行检测端口是否被监听（不同服务对应不同端口）</h4>
<ul>
<li>telnet ipaddress 服务对应端口</li>
</ul></li>
</ul>
<h3 id="在不同服务下的服务自启动">5 在不同服务下的服务自启动</h3>
<ul>
<li>由于每个系统的指令不一样
<ul>
<li>这里就不展开了</li>
</ul></li>
</ul>
<h3 id="动态监控进程与ps的区别在于其实时更新">6 动态监控进程（与ps的区别在于其实时更新）</h3>
<ul>
<li>top
<ul>
<li><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20200329193752382.png" /></li>
<li>交互指令
<ul>
<li>u 输入用户名，并只显示属于该用户的进程</li>
<li>k 输入PID，并终止进程</li>
<li>P 以CPU使用率进行排序</li>
<li>M 以占用内存进行排序</li>
<li>N 以PID顺序进行排序</li>
<li>q 退出</li>
</ul></li>
<li>参数
<ul>
<li>-d 数字 每多少秒更新一次</li>
<li>-i 使不显示僵死或限制进程</li>
<li>-p PID 指定监控某个进程</li>
</ul></li>
</ul></li>
</ul>
<h2 id="rpm-与yum">10 RPM 与YUM</h2>
<ul>
<li><h3 id="prmredhat-package-manager">PRM（REDHAT Package Manager）</h3>
<ul>
<li><h4 id="rpm包的查询">rpm包的查询</h4>
<ul>
<li>rpm -qa
<ul>
<li>查询所有已经安装的rpm列表</li>
</ul></li>
<li>rpm -qa | grep 软件包名
<ul>
<li>查询单个包的安装信息</li>
</ul></li>
<li>rpm -q 软件包名
<ul>
<li>查询软件包是否安装</li>
</ul></li>
<li>rpm -qi 软件包名
<ul>
<li>查询软件包信息</li>
</ul></li>
<li>rpm -ql 软件包名
<ul>
<li>查询软件包中的文件</li>
</ul></li>
<li>rpm -qf 文件全路径名
<ul>
<li>查询文件所属的软件包（反过来查）</li>
</ul></li>
</ul></li>
<li><h4 id="rpm包的卸载">rpm包的卸载</h4>
<ul>
<li>rpm -e 软件包名
<ul>
<li>删除rpm软件包</li>
</ul></li>
<li>rpm -e -nodeps 软件包名
<ul>
<li>强制删除</li>
</ul></li>
</ul></li>
<li><h4 id="rpm包的安装">rpm包的安装</h4>
<ul>
<li>rpm -ivh RPM包全路径
<ul>
<li>i=install 安装</li>
<li>v=verbose 提示</li>
<li>h=hash 进度条</li>
</ul></li>
</ul></li>
<li><h4 id="rpm包好像有点麻烦不要细究了">RPM包好像有点麻烦，不要细究了</h4></li>
</ul></li>
<li><h3 id="yumyellow-dog-updater-modified">YUM（Yellow dog Updater , Modified）</h3>
<ul>
<li><p>查询yum服务器中是否有rpm包</p>
<ul>
<li>yum -list | grep 软件包名</li>
</ul></li>
<li><p>安装rpm包</p>
<ul>
<li>yum install 软件包名</li>
</ul></li>
<li><p>一些参数指令</p>
<ul>
<li>-y 安装过程一律yes</li>
</ul></li>
<li><p>查看yum安装软件位置</p>
<ul>
<li>``` cat /etc/yum.conf | grep cachedir <pre class="line-numbers language-none"><code class="language-none">
      



# JAVAEE 定制篇

## 1 环境搭建 

#### 	1 下载java

&#96;&#96;&#96;shell
yum -y install java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul></li>
</ul></li>
</ul>
<h4 id="检查java版本">2 检查java版本</h4>
<pre class="line-numbers language-none"><code class="language-none">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>显示</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">openjdk version &quot;1.8.0_242&quot;
OpenJDK Runtime Environment (build 1.8.0_242-b08)
OpenJDK 64-Bit Server VM (build 25.242-b08, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="手动配置全局变量若没有显示并提示java不是命令">3 手动配置全局变量（若没有显示，并提示java不是命令）</h4>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>增加到末尾（目录根据实际的情况自行调整）</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.8.0-openjdk-1.8.0.171-8.b10.el6_9.x86_64
export CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;rt.jar:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar
export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="全局变量立即生效">4 全局变量立即生效</h4>
<pre class="line-numbers language-none"><code class="language-none">source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="检查java是否生效">5 检查java是否生效</h4>
<pre class="line-numbers language-none"><code class="language-none">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="tomcat安装">2 tomcat安装</h2>
<h1 id="shell编程篇">SHELL编程篇</h1>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>source</p>
<p>$()=``</p>
<p>unset</p>
<p>readonly</p>
<p>export</p>
<pre class="line-numbers language-none"><code class="language-none">:&lt;&lt;!
ffagjkasj
!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>$</p>
<p>后台运行程序</p>
<pre class="line-numbers language-none"><code class="language-none">可执行文件 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="ubuntu">Ubuntu</h1>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt-get update					 更新源
sudo apt-get install package		  安装包
sudo apt-get remove package			  删除包
sudo apt-cache search package          搜索软件包
sudo apt-cache show package            获取包的相关信息，如说明、大小、版本等
sudo apt-get install package--reinstall重新安装包
sudo apt-get-f install 				  修复安装
sudo apt-get remove package--purge	   删除包，包括配置文件等
sudo apt-get build-deppackage		  安装相关的编译环境
sudo apt-get upgrade                   更新已安装的包
sudo apt-get dist-upgrade              升级系统
sudo apt-cache depends package         了解使用该包依赖那些包
sudo apt-cache rdepends package        查看该包被哪些包依赖
sudo apt-get source package            下载该包的源代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Tech</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Command</tag>
      </tags>
  </entry>
  <entry>
    <title>Cpp(一)Cpp中级语法</title>
    <url>/Tech/Cpp/cpp_grammar_intermediate.html</url>
    <content><![CDATA[<div class="note info"><p><strong>说明</strong></p>
<p>本文是在<code>大二期间</code>因疫情缘故无法返校看<code>北京大学 郭炜老师</code>的<code>C++进阶</code>网课所做笔记，后并未勘误，如有错误，请谅解</p>
</div>
<span id="more"></span>
<p>##C程序进阶课程</p>
<h3 id="递归基础部分">递归基础部分</h3>
<h4 id="反向输出读取的字符串递推">反向输出读取的字符串（递推）</h4>
<h5 id="运行结果">运行结果</h5>
<p><img data-src="https://raw.githubusercontent.com/Coldeye2020/picturebed/master/20200321172726.png" /></p>
<h5 id="代码部分">代码部分</h5>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;

using namespace std;

int recur()&#123;
	char c;
	c&#x3D;cin.get();
	if(c!&#x3D;&#39;\n&#39;)
		recur();
	cout&lt;&lt;c;
	return 0;
&#125;

int main()&#123;
	recur();
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="进制转换连续动作">进制转换（连续动作）</h4>
<h5 id="运行结果-1">运行结果</h5>
<p><img data-src="https://raw.githubusercontent.com/Coldeye2020/picturebed/master/20200321172727.png" /></p>
<h5 id="代码部分-1">代码部分</h5>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;

int convert(int x)&#123;
	if((x&#x2F;2)!&#x3D;0)&#123;
		convert(x&#x2F;2);
		cout&lt;&lt;x%2;
	&#125;
	else
		cout&lt;&lt;x;
&#125;

int main()&#123;
	int x;
	cin&gt;&gt;x;
	convert(x);
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="汉诺塔问题连续动作">汉诺塔问题(连续动作)</h4>
<h5 id="运行结果-2">运行结果</h5>
<p><img data-src="https://raw.githubusercontent.com/Coldeye2020/picturebed/master/20200321172728.png" /></p>
<h5 id="代码部分-2">代码部分</h5>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;

void move(int i,char a,char b,char c)&#123;
	if(i&#x3D;&#x3D;1)&#123;
		cout&lt;&lt;&quot;把一个盘子从&quot;&lt;&lt;a&lt;&lt;&quot;移动到&quot;&lt;&lt;c&lt;&lt;endl; 
	&#125;
	else&#123;
		move(i-1,a,c,b);
		cout&lt;&lt;&quot;把一个盘子从&quot;&lt;&lt;a&lt;&lt;&quot;移动到&quot;&lt;&lt;c&lt;&lt;endl; 
		move(i-1,b,a,c);&#x2F;&#x2F;1.把上面的全借助C移动到B 2.最后一个移动到C 3.B上的全部借助A移动到C
	&#125;
&#125;

int main()&#123;
	int n;
	cin&gt;&gt;n;
	move(n,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;);
	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="分析"><strong>分析</strong></h5>
<ul>
<li><p>理解<strong>连续的动作</strong>是什么是什么</p></li>
<li><p>搞清楚<strong>不同次动作之间的关系</strong>是什么（f(n)与f(n-1)之间的关系）</p></li>
<li><p>搞清楚<strong>边界条件</strong>是什么（初始值，初始操作）</p></li>
</ul>
<h4 id="逆波兰表达式自动分析过程">逆波兰表达式（自动分析过程）</h4>
<h5 id="运行结果-3">运行结果</h5>
<p><img data-src="https://raw.githubusercontent.com/Coldeye2020/picturebed/master/20200321172729.png" /></p>
<h5 id="代码部分-3">代码部分</h5>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
#include&lt;cstdlib&gt;
using namespace std;

double notation()&#123;
	char str[10];
	cin&gt;&gt;str;&#x2F;&#x2F;遇到&quot; &quot;时停止，所以分析时要跟着标识指针的位置分析
	switch(str[0])&#123;
	case&#39;+&#39;:return notation()+notation();&#x2F;&#x2F;当检测到运算符的时候，自动转化成两个表达式运算
	case&#39;-&#39;:return notation()-notation();
	case&#39;&#x2F;&#39;:return notation()&#x2F;notation();
	case&#39;*&#39;:return notation()*notation();
	default:return atof(str); &#x2F;&#x2F;把字符串转化成函数
	&#125;
&#125;

int main()&#123;
	cout&lt;&lt;notation()&lt;&lt;endl;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="分苹果自动分析过程">分苹果（自动分析过程）</h4>
<p><img data-src="https://raw.githubusercontent.com/Coldeye2020/picturebed/master/20200321173034.png" /></p>
<h5 id="运行结果-4">运行结果<img data-src="https://raw.githubusercontent.com/Coldeye2020/picturebed/master/20200321173034.png" /></h5>
<p><img data-src="https://raw.githubusercontent.com/Coldeye2020/picturebed/master/20200321172730.png" /></p>
<h5 id="代码部分-4">代码部分</h5>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;

double count(int m,int n)&#123;
	if(n&lt;&#x3D;1||m&lt;&#x3D;1)
		return 1;
	else if(m&lt;n)
		return count(m,m);&#x2F;&#x2F;当苹果数小时，永远会有填不满的盘子，而这些多的盘子对结果无影响
	else	
		return count(m,n-1)+count(m-n,n);&#x2F;*当苹果数大时分为两种情况:有盘子没被填满和每个盘子上都有											  至少一个苹果*&#x2F;
&#125;

int main()&#123;
	int apple,plane;
	cin&gt;&gt;apple&gt;&gt;plane;
	cout&lt;&lt;count(apple,plane)&lt;&lt;endl;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="分析-1">分析</h5>
<ul>
<li>分析<strong>函数</strong>能够给出答案</li>
<li>在<strong>利用这个函数</strong>的基础上，分析<strong>如何解决问题</strong></li>
<li>搞清楚 在<strong>最简单的情况</strong>下 <strong>答案</strong> 是什么</li>
</ul>
<h3 id="数据结构基础">数据结构基础</h3>
<h4 id="倒置数组指针变量star">倒置数组（指针变量）:star:</h4>
<h5 id="运行结果-5">运行结果</h5>
<p><img data-src="https://raw.githubusercontent.com/Coldeye2020/picturebed/master/20200321172731.png" /></p>
<h5 id="代码部分-5">代码部分</h5>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;
#include&lt;iomanip&gt;
using namespace std;

int main()&#123;
	int a[10],*p&#x3D;NULL,*q&#x3D;NULL;
	for(p&#x3D;a;p&lt;a+10;p++)
		cin&gt;&gt;*p;
	for(p&#x3D;a,q&#x3D;a+9;p&lt;q;p++,q--)&#123;
		*p^&#x3D;*q;
		*q^&#x3D;*p;
		*p^&#x3D;*q;
	&#125;
	for(p&#x3D;a;p&lt;a+10;p++)
		cout&lt;&lt;setw(3)&lt;&lt;*p;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="矩阵乘法二维数组starstar">矩阵乘法（二维数组）:star::star:</h4>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;
#include&lt;iomanip&gt;
using namespace std;

int main()&#123;
	int col1,row1,col2,row2,matrix1[100][100],matrix2[100][100],result[100][100]&#x3D;&#123;0&#125;;
	cin&gt;&gt;row1&gt;&gt;col1;
	if(col1&gt;100||col1&gt;100)&#123;
		cout&lt;&lt;&quot;too large&quot;;
		return 0;
	&#125;
	for(int i&#x3D;0;i&lt;row1;i++)&#123;
		for(int j&#x3D;0;j&lt;col1;j++)&#123;
			cin&gt;&gt;matrix1[i][j];
		&#125;	
	&#125;
	cin&gt;&gt;row2&gt;&gt;col2;
	if(col2&gt;100||col2&gt;100)&#123;
		cout&lt;&lt;&quot;too large&quot;;
		return 0;
	&#125;
	else if(col1!&#x3D;row2)&#123;
		cout&lt;&lt;&quot;error&quot;;
		return 0;
	&#125;
	for(int i&#x3D;0;i&lt;row2;i++)&#123;
		for(int j&#x3D;0;j&lt;col2;j++)&#123;
			cin&gt;&gt;matrix2[i][j];
		&#125;	
	&#125;
	for(int i&#x3D;0;i&lt;row1;i++)&#123;
		for(int j&#x3D;0;j&lt;col2;j++)&#123;
			for(int k&#x3D;0;k&lt;col1;k++)&#123;
				result[i][j]+&#x3D;matrix1[i][k]*matrix2[k][j];
			&#125;
		&#125;
	&#125;
	for(int i&#x3D;0;i&lt;row1;i++)&#123;
		for(int j&#x3D;0;j&lt;col2;j++)&#123;
				cout&lt;&lt;setw(4)&lt;&lt;result[i][j]&lt;&lt;&quot; &quot;;
		&#125;
		cout&lt;&lt;endl;
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="平方根函数star">平方根函数:star:</h4>
<h3 id="习题部分">习题部分</h3>
<h4 id="四大湖枚举starstar">四大湖（枚举）:star::star:</h4>
<h5 id="题目描述">题目描述</h5>
<p><img data-src="https://raw.githubusercontent.com/Coldeye2020/picturebed/master/20200321172733.png" /></p>
<p>​</p>
<h5 id="运行结果-6">运行结果</h5>
<p><img data-src="https://raw.githubusercontent.com/Coldeye2020/picturebed/master/20200321172732.png" /></p>
<h5 id="代码部分-6">代码部分</h5>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;
#include&lt;cstdlib&gt;
using namespace std;

int main()&#123;
	int a,b,c,d;&#x2F;&#x2F;代表a、b、c、d四人说的话说对的数量
	int x,y,z,w;&#x2F;&#x2F;代表鄱阳湖、洞庭湖、太湖、洪泽湖 的排名。1是最大，4是最小
	for(x&#x3D;1;x&lt;&#x3D;4;x++)&#123;
		for(y&#x3D;1;y&lt;&#x3D;4;y++)&#123;
			if(x&#x3D;&#x3D;y)
				continue;
			else&#123;
				for(z&#x3D;1;z&lt;&#x3D;4;z++)&#123;
					if(y&#x3D;&#x3D;z||x&#x3D;&#x3D;z)
						continue;
					else&#123;
						w&#x3D;10-x-y-z;&#x2F;&#x2F;可以直接有前面的x,y,z确定
						a&#x3D;(y&#x3D;&#x3D;1)+(w&#x3D;&#x3D;4)+(x&#x3D;&#x3D;3);&#x2F;&#x2F;记录下说对的个数
                    	b&#x3D;(w&#x3D;&#x3D;1)+(y&#x3D;&#x3D;4)+(x&#x3D;&#x3D;2)+(z&#x3D;&#x3D;3);
                  	  	c&#x3D;(w&#x3D;&#x3D;4)+(y&#x3D;&#x3D;3);
                   		d&#x3D;(x&#x3D;&#x3D;1)+(z&#x3D;&#x3D;4)+(w&#x3D;&#x3D;2)+(y&#x3D;&#x3D;3);
                        if(a*b*c*d&#x3D;&#x3D;1)&#123;&#x2F;&#x2F;检验是否满足每人说对一个
                        	cout&lt;&lt;x&lt;&lt;endl&lt;&lt;y&lt;&lt;endl&lt;&lt;z&lt;&lt;endl&lt;&lt;w&lt;&lt;endl;
                        	return 0;
						&#125;						
					&#125;
			&#125;	
			&#125;
		&#125;
	&#125; 
	cout&lt;&lt;&quot;No answer&quot;;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="流感传染模拟-starstar">流感传染（模拟）​ ​ ​ ​ :star::star:</h4>
<h5 id="题目描述-1">题目描述</h5>
<p><img data-src="https://raw.githubusercontent.com/Coldeye2020/picturebed/master/20200321172736.png" /></p>
<h5 id="运行结果-7">运行结果</h5>
<p><img data-src="https://raw.githubusercontent.com/Coldeye2020/picturebed/master/20200321172734.png" /></p>
<h5 id="代码部分-7">代码部分</h5>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;
int n,m;&#x2F;&#x2F;设置全局变量可能会导致一些问题，不过也可以带来便利
char a[102][102]&#x3D;&#123;0&#125;;&#x2F;&#x2F;设置A组作为实际情况组
int  b[102][102]&#x3D;&#123;0&#125;;&#x2F;&#x2F;设置B组作为预感染组(即明天时可能会出现的感染情况)

void input()&#123;
	for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;
		for(int j&#x3D;1;j&lt;&#x3D;n;j++)&#123;
			cin&gt;&gt;a[i][j];
		&#125;
	&#125;
&#125;&#x2F;&#x2F;输入函数，将字符输入

void check()&#123;
	for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;
		for(int j&#x3D;1;j&lt;&#x3D;n;j++)&#123;
			cout&lt;&lt;a[i][j];
		&#125;
		cout&lt;&lt;endl;
	&#125;
&#125;&#x2F;&#x2F;检查函数，在程序出错时，利用输出A组和B组的形式，可以直观的的观察到A组和B组的真实情况，便于改错

int count()&#123;
	int m&#x3D;0;
	for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;
		for(int j&#x3D;1;j&lt;&#x3D;n;j++)&#123;
			if(a[i][j]&#x3D;&#x3D;&#39;@&#39;)&#123;
				m++;
			&#125;
		&#125;
	&#125;
	cout&lt;&lt;m;
&#125;&#x2F;&#x2F;计数函数，通过判断是否A组中有多少@来进行记数

void initb()&#123;
	for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;
		for(int j&#x3D;1;j&lt;&#x3D;n;j++)&#123;
			if(a[i][j]&#x3D;&#x3D;&#39;@&#39;)
				b[i][j]&#x3D;-1;
			else if(a[i][j]&#x3D;&#x3D;&#39;#&#39;)
				b[i][j]&#x3D;0;
			else
				b[i][j]&#x3D;1;
		&#125;
	&#125;
&#125;&#x2F;&#x2F;初始化B函数，应该是多余的


void infb()&#123;
	for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;
		for(int j&#x3D;1;j&lt;&#x3D;n;j++)&#123;
			if(a[i][j]&#x3D;&#x3D;&#39;@&#39;)&#123;
				b[i-1][j]&#x3D;-1;
				b[i+1][j]&#x3D;-1;
				b[i][j-1]&#x3D;-1;
				b[i][j+1]&#x3D;-1;
			&#125;
		&#125;
	&#125;
&#125;&#x2F;&#x2F;预感染函数，将根据A组当天情况，进行预感染判断，并将情况存储到B中

void btoa()&#123;
	for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;
		for(int j&#x3D;1;j&lt;&#x3D;n;j++)&#123;
			if(b[i][j]&#x3D;&#x3D;-1&amp;&amp;a[i][j]&#x3D;&#x3D;&#39;.&#39;)
				a[i][j]&#x3D;&#39;@&#39;;
			else if(b[i][j]&#x3D;&#x3D;-1&amp;&amp;a[i][j]&#x3D;&#x3D;&#39;#&#39;)
				b[i][j]&#x3D;0;
		&#125;
	&#125;
&#125;&#x2F;&#x2F;感染函数，将根据前天B组的预感染情况，结合A组的真实情况，进行感染判断，并储存在A中

int main()&#123;
	cin&gt;&gt;n;
	input();
	initb();
	cin&gt;&gt;m;
	for(int i&#x3D;1;i&lt;m;i++)&#123;
		infb();
		btoa();
	&#125;
	count();
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="括号匹配自动分析starstarstarstar">括号匹配（自动分析）:star::star::star::star:</h4>
<h5 id="题目描述-2">题目描述</h5>
<p>每个')'括号都有对应的'('，反之亦然</p>
<h5 id="运行结果-8">运行结果</h5>
<p><img data-src="https://raw.githubusercontent.com/Coldeye2020/picturebed/master/20200321172735.png" /></p>
<h5 id="代码部分-8">代码部分</h5>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;
#include&lt;cstring&gt; 
using namespace std;
int b&#x3D;0;&#x2F;&#x2F;我们想要match函数有两个输出返回值，所以选择了定义全局变量的方式，来代表其另外一个返回值
&#x2F;*我们利用递归基础中自动分析的原理，先假设了一个函数match可以检查一个&#39;(&#39;左括号右边是否存在一个可以与之匹配的&#39;)&#39;右括号(并且保证中间的所有嵌套括号(比初始检验第一个级别的括号)都有得匹配)，接受两个值：1.字符串 2.开始检查的标识指针位置，返回两个值：1.bool型表示匹配成功与否 2.int型表示成功匹配时的标识指针位置*&#x2F;
int match(char str[],int s)&#123;
	if(strlen(str)&#x3D;&#x3D;s)&#123;
		return (b&#x3D;true,-1);&#x2F;&#x2F;为了保证完全检验，且区别于(右括号结尾b为真)的情况，我们须将true与另一变量绑定进行标注
	&#125;
	else&#123;
		if(str[s]&#x3D;&#x3D;&#39;(&#39;)&#123;&#x2F;&#x2F;如果侦测到一个左括号,则我们需要将其进行检验，看是否有与之匹配的右括号
			int n;
			n&#x3D;match(str,s+1);&#x2F;&#x2F;检验左括号是否能被成功匹配
			if(b&#x3D;&#x3D;false)
				return (b&#x3D;false,n);&#x2F;&#x2F;如果返回是假，则说明匹配失败，直接返回假
			else&#123;
             if(str[n]&#x3D;&#x3D;&#39;)&#39;)
					return match(str,n+1);&#x2F;&#x2F;如果返回是真，说明匹配成功了，再检验右边是否有同级的
				else
					return false；
&#x2F;*值得注意的是，当最后一个多出来个左括号时，会继续调用函数，此时指针指到了外面，所以会返回第一层判断中的true和20，可能会导致一些不必要的错误，直接加一个判断条件，即如果指出去了还没有匹配成功的话就输出False，就可以使得错误被避免了*&#x2F;
          &#125;
		&#125;
		else&#123;&#x2F;*检测到一个右括号：1.如果左边的左括号用完了，函数会直接输出假真到main中，所以我们为了和因为完全检验完			输出的真，进行区别，我们把上面一个真与另外一个变量绑定在一起 2.如果左边还有左括号，将返回1与之匹配*&#x2F;
			return (b&#x3D;true,s);
		&#125;
	&#125;
&#125;

int main()&#123;
	char str[20],m;
	cin&gt;&gt;str;
	m&#x3D;match(str,0);
	if(b&#x3D;&#x3D;true&amp;&amp;m&#x3D;&#x3D;-1)&#x2F;&#x2F;
		cout&lt;&lt;&quot;valid&quot;&lt;&lt;endl;
	else
		cout&lt;&lt;&quot;invalid&quot;&lt;&lt;endl;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="常用表与库函数">常用表与库函数</h2>
<h3 id="表">表</h3>
<h4 id="算数运算符优先级表">算数运算符优先级表</h4>
<table>
<thead>
<tr class="header">
<th>优先级</th>
<th>运算符</th>
<th>名称或含义</th>
<th>使用形式</th>
<th>结合方向</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>[]</td>
<td>数组下标</td>
<td>数组名[常量表达式]</td>
<td>左到右</td>
<td></td>
</tr>
<tr class="even">
<td>()</td>
<td>圆括号</td>
<td>(表达式) 函数名(形参表)</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>.</td>
<td>成员选择（对象）</td>
<td>对象.成员名</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>-&gt;</td>
<td>成员选择（指针）</td>
<td>对象指针-&gt;成员名</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>2</td>
<td>-</td>
<td>负号运算符</td>
<td>-表达式</td>
<td>右到左</td>
<td>单目运算符</td>
</tr>
<tr class="even">
<td>(类型)</td>
<td>强制类型转换</td>
<td>(数据类型)表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>++</td>
<td>自增运算符</td>
<td>++变量名 变量名++</td>
<td>单目运算符</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>--</td>
<td>自减运算符</td>
<td>--变量名 变量名--</td>
<td>单目运算符</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>*</td>
<td>取值运算符</td>
<td>*指针变量</td>
<td>单目运算符</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>&amp;</td>
<td>取地址运算符</td>
<td>&amp;变量名</td>
<td>单目运算符</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>!</td>
<td>逻辑非运算符</td>
<td>!表达式</td>
<td>单目运算符</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>~</td>
<td>按位取反运算符</td>
<td>~表达式</td>
<td>单目运算符</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>sizeof</td>
<td>长度运算符</td>
<td>sizeof(表达式)</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>3</td>
<td>/</td>
<td>除</td>
<td>表达式 / 表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr class="odd">
<td>*</td>
<td>乘</td>
<td>表达式*表达式</td>
<td>双目运算符</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>%</td>
<td>余数（取模）</td>
<td>整型表达式%整型表达式</td>
<td>双目运算符</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>4</td>
<td>+</td>
<td>加</td>
<td>表达式+表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr class="even">
<td>-</td>
<td>减</td>
<td>表达式-表达式</td>
<td>双目运算符</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>5</td>
<td>&lt;&lt;</td>
<td>左移</td>
<td>变量&lt;&lt;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr class="even">
<td>&gt;&gt;</td>
<td>右移</td>
<td>变量&gt;&gt;表达式</td>
<td>双目运算符</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>6</td>
<td>&gt;</td>
<td>大于</td>
<td>表达式&gt;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr class="even">
<td>&gt;=</td>
<td>大于等于</td>
<td>表达式&gt;=表达式</td>
<td>双目运算符</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>&lt;</td>
<td>小于</td>
<td>表达式&lt;表达式</td>
<td>双目运算符</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>&lt;=</td>
<td>小于等于</td>
<td>表达式&lt;=表达式</td>
<td>双目运算符</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>7</td>
<td>==</td>
<td>等于</td>
<td>表达式==表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr class="even">
<td>!=</td>
<td>不等于</td>
<td>表达式!= 表达式</td>
<td>双目运算符</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>8</td>
<td>&amp;</td>
<td>按位与</td>
<td>表达式&amp;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr class="even">
<td>9</td>
<td>^</td>
<td>按位异或</td>
<td>表达式^表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr class="odd">
<td>10</td>
<td>|</td>
<td>按位或</td>
<td>表达式|表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr class="even">
<td>11</td>
<td>&amp;&amp;</td>
<td>逻辑与</td>
<td>表达式&amp;&amp;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr class="odd">
<td>12</td>
<td>||</td>
<td>逻辑或</td>
<td>表达式||表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr class="even">
<td>13</td>
<td>?:</td>
<td>条件运算符</td>
<td>表达式1? 表达式2: 表达式3</td>
<td>右到左</td>
<td>三目运算符</td>
</tr>
<tr class="odd">
<td>14</td>
<td>=</td>
<td>赋值运算符</td>
<td>变量=表达式</td>
<td>右到左</td>
<td></td>
</tr>
<tr class="even">
<td>/=</td>
<td>除后赋值</td>
<td>变量/=表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>*=</td>
<td>乘后赋值</td>
<td>变量*=表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>%=</td>
<td>取模后赋值</td>
<td>变量%=表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>+=</td>
<td>加后赋值</td>
<td>变量+=表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>-=</td>
<td>减后赋值</td>
<td>变量-=表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>&lt;&lt;=</td>
<td>左移后赋值</td>
<td>变量&lt;&lt;=表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>&gt;&gt;=</td>
<td>右移后赋值</td>
<td>变量&gt;&gt;=表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>&amp;=</td>
<td>按位与后赋值</td>
<td>变量&amp;=表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>^=</td>
<td>按位异或后赋值</td>
<td>变量^=表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>|=</td>
<td>按位或后赋值</td>
<td>变量|=表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>15</td>
<td>,</td>
<td>逗号运算符</td>
<td>表达式,表达式,…</td>
<td>左到右</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="库函数">库函数</h3>
<h4 id="流控制函数">流控制函数</h4>
<h5 id="库和函数">库和函数</h5>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">库
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
功能：
std::setw(n)：需要填充n个字符,默认填充的字符为&#39; &#39;空格
std::setfill：设置std::setw将填充什么样的字符，如:std::setfill(&#39;*&#39;)
std::setbase(n)：将输出数据转换为n进制
std::setprecision(n)：控制输出流显示浮点数的数字个数，C++默认的流输出数值有效位是6。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="运行测试">运行测试</h5>
<p><img data-src="https://raw.githubusercontent.com/Coldeye2020/picturebed/master/20200321172737.png" /></p>
<h5 id="代码演示">代码演示</h5>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;
#include &lt;iomanip&gt;
using namespace std;

int main()&#123;
    int a&#x3D;1111,b&#x3D;2222;
    float d&#x3D;2.0,e&#x3D;200003000;
    char c&#x3D;&#39;*&#39;;
  	cout&lt;&lt;&quot;setw()&quot;&lt;&lt;endl&lt;&lt;a&lt;&lt;setw(5)&lt;&lt;a&lt;&lt;b&lt;&lt;endl;
    cout&lt;&lt;a&lt;&lt;setw(5)&lt;&lt;a&lt;&lt;setw(3)&lt;&lt;b&lt;&lt;endl&lt;&lt;endl;
	&#x2F;*setw()只对其后面紧跟的输出产生作用，表示’a’共占n个元素，不足的用空格填充。若输入的内容超过setw()设置的长度，
	则按实际长度输出。setw()默认填充的内容为空格，可以setfill()配合使用设置其他字符填充。*&#x2F; 
	
	cout&lt;&lt;setfill(&#39;0&#39;)&lt;&lt;&quot;setfill+setw()&quot;&lt;&lt;endl&lt;&lt;setw(5)&lt;&lt;a&lt;&lt;endl;
	cout&lt;&lt;endl&lt;&lt;setw(6)&lt;&lt;b&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl;
	&#x2F;&#x2F;setfill()常常与配合setw()使用,且setfill()是作用于cout 
	
	
	cout&lt;&lt;endl&lt;&lt;endl&lt;&lt;&quot;fixed&quot;&lt;&lt;endl&lt;&lt;d&lt;&lt;endl;
	cout&lt;&lt;e&lt;&lt;endl;
	cout&lt;&lt;fixed&lt;&lt;d&lt;&lt;endl&lt;&lt;e&lt;&lt;endl;
	&#x2F;&#x2F;fixed就是强制规定输出到流输出的数值有效位（默认6位） 
	cout&lt;&lt;endl&lt;&lt;d&lt;&lt;endl&lt;&lt;endl;
	&#x2F;&#x2F;可以看到fixed的作用对象是cout，使其能够一直有效
    
	
	cout&lt;&lt;endl&lt;&lt;endl&lt;&lt;&quot;setprecision&quot;&lt;&lt;endl&lt;&lt;setprecision(5)&lt;&lt;d&lt;&lt;endl;
	cout&lt;&lt;d&lt;&lt;endl&lt;&lt;endl;
	&#x2F;&#x2F;setprecision控制输出流显示浮点数的数字个数(C++默认的流输出数值有效位是6),其作用对象也是cout
	cout&lt;&lt;setfill(&#39;0&#39;);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="字符串函数">字符串函数</h4>
<h5 id="库">库</h5>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;
#include &lt;cstring&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="普通字符串函数">普通字符串函数</h5>
<h6 id="复制">复制</h6>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">char *strcpy( char *destination, const char *source);&#x2F;&#x2F;作用是复制整个字符数组到另一个字符数组，因此也就非常简洁，只有两个参数,读变量名就可以知道，前一个是要复制到的目标数组起始位置，后一个是被复制的源数组起始位置
char *strncpy( char *destination, const char *source, size_t num );&#x2F;&#x2F;strncpy与strcpy很类似，只是可以指定复制多少个字符显然前两个参数的含义与strcpy相同，第三个参数num就是要复制的字符个数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h6 id="连接">连接</h6>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">char * strcat(char *destination, const char *source );&#x2F;&#x2F;strcat的功能是把一个字符数组连接到另一个字符数组的后面,前一个是目标数组，后一个是要添加到后面的源数组。
char * strncat(char *destination, const char *source, size_t num );&#x2F;&#x2F;连接，也是可以指定字符个数,参数跟前面的套路是一样的，这里就不重复了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h6 id="比较">比较</h6>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int strcmp(const char *str1, const char *str2 );&#x2F;&#x2F;对两个字符数组我们可不能直接if (s &gt; t)这样比较，要知道这样比较的可是两个字符数组的指针的地址。那么，我们就要用到strcmp函数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int stricmp(char *str1, char *str2);&#x2F;&#x2F;以大小写不敏感方式比较两个串，方法同上<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int stricmp(char *str1, char *str2);&#x2F;&#x2F;只比较前n个字符，方法同上<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><span class="math display">\[
strcmp(st{r_1},st{r_2}) = \left\{ \begin{array}{l}
\begin{array}{*{20}{c}}
{}&amp;{0}&amp;{st{r_1} = st{r_2}}
\end{array}\\
\begin{array}{*{20}{c}}
{ &lt; 0}&amp;{st{r_1} &lt; str{}_2}
\end{array}\\
\begin{array}{*{20}{c}}
{ &gt; 0}&amp;{st{r_1} &gt; st{r_2}}
\end{array}
\end{array} \right.
\]</span></p>
<h6 id="查找">查找</h6>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strchr</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> character <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//strchr函数可以在一个字符数组里找某个字符第一次出现的位置,显然前一个是原字符数组，后一个是要查找的字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strstr</span><span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//strstr函数可以在一个字符数组里查找另一个字符数组第一次出现的位置,其中前一个是文本串，后一个是模式串</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">char *strtok(char *s, const char *delim);&#x2F;&#x2F;找找到被某些字符分割的子串，如:&#39; &#39; , &#39;,&#39; , &#39;.&#39; , &#39;?&#39;一类，注意：1.若想找到全部子串需多次调用(可以定义一个指针变量接受返回值并输出)(后续调用时,记得将第一个参数设置为NULL) 2.再输入分割字符时，要输入字符串&quot; ,.?&quot;(已经包含了space ， 。 ？四个分割字符) 3.使用时会拆分掉原字符串<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">size_t strlen( const char *str );&#x2F;&#x2F;strlen用于求一个字符数组的长度，注意它是从给定的起始位置开始不断往后尝试，直到遇到’\0’为止的，因此它的时间复杂度并不是常数级别的，而是取决于字符数组的长度，在字符数组没有变动的情况下请务必不要重复调用。那么参数毋庸置疑自然就是要求长度的字符数组了。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h6 id="转化">转化</h6>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">char *strupr(char *str)&#x2F;&#x2F;将串中的小写字母转换为大写字母<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">char *strlwr(char *str);&#x2F;&#x2F;用于将字符串中的字符转换为小写<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">long strtol(char *str, char **endptr, int base);&#x2F;&#x2F;将串转换为长整数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img data-src="https://cdn.jsdelivr.net/gh/Coldeye2020/picturebed/img/20200322150939.png" /></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Coldeye2020/picturebed/img/20200322151023.png" /></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Coldeye2020/picturebed/img/20200322151310.png" /></p>
<h5 id="内存操作函数">内存操作函数</h5>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">memset</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">,</span> size_t num <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//memset是一个非常好用的函数，不仅在字符串方面。它可以把连续一段区间的内存修改成同一个值，以字节为单位。而一个字符正好就是一个字节，这也就让memset可以很好的为字符串的区间修改提供服务。ptr指向要修改的内存块的起始地址，value是要修改成什么值，num是修改多少个</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void *memcpy(void *destin, void *source, unsigned n);&#x2F;&#x2F;函数的功能是从源内存地址的起始位置开始拷贝若干个字节到目标内存地址中，即从源source中拷贝n个字节到目标destin中<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img data-src="https://cdn.jsdelivr.net/gh/Coldeye2020/picturebed/img/20200322153108.png" /></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Coldeye2020/picturebed/img/20200322153126.png" /></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Coldeye2020/picturebed/img/20200322153848.png" /></p>
<h4 id="标准库文件头函数">标准库文件头函数</h4>
<h5 id="库-1">库</h5>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;cstdlib&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>常见算法函数</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*))&#x2F;&#x2F;快速排序函数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="stl初步standard-template-library">STL初步（Standard Template Library）</h2>
<h3 id="algorism算法类">Algorism（算法类）</h3>
<h4 id="头文件">头文件</h4>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;algorism&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="排序算法">排序算法</h4>
<h5 id="sort">sort()</h5>
<h4 id="二分查找算法">二分查找算法</h4>
<h5 id="binary_search">binary_search()</h5>
<h5 id="lower_bound">lower_bound()</h5>
<h5 id="upper_bound">upper_bound()</h5>
<h3 id="containers容器类">Containers（容器类）</h3>
<h4 id="头文件-1">头文件</h4>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Tech</category>
        <category>Cpp</category>
      </categories>
      <tags>
        <tag>Cpp</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>Cpp项目(一)寻迹小车PID设计</title>
    <url>/Tech/Cpp/Pid/smart_car.html</url>
    <content><![CDATA[<div class="note info"><p><strong>说明</strong></p>
<p>本文记录了我在完成<code>大三下学期</code>的寻迹小车小组项目时的所负责的控制部分内容。</p>
</div>
<span id="more"></span>
<div class="note success"><p>单片机型号：<a href="https://os.mbed.com/platforms/ST-Nucleo-L432KC/l">NUCLEO-L432KC</a></p>
<p>编译平台：<a href="https://ide.mbed.com/compiler/">Mbed Online Compiler</a></p>
<p>Mbed OS：<a href="https://os.mbed.com/handbook">Mbed OS 2</a></p>
</div>
<h2 id="闭环控速部分一阶pid">闭环控速部分（一阶PID）</h2>
<h3 id="单片机引脚图">单片机引脚图</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/nucleo_l432kc_2017_10_09.png" /></p>
<h3 id="小车车架模型">小车车架模型</h3>
<p>我们采用的车架结构是<code>ZK-4WD</code>，具体清单如下：</p>
<ul>
<li><p>小车底盘（亚克力材质） 2只</p></li>
<li><p>直流减速电机（过EMC检测） 4只</p></li>
<li><p>黄色轮子 4只</p></li>
<li><p>20线测速码盘 4只</p></li>
<li><p>紧固件 8只</p></li>
<li><p>螺丝螺帽铜柱 若干</p></li>
</ul>
<p>小车模型如下:</p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/TB2H2C7ipXXXXXjXpXXXXXXXXXX_!!361121710.jpg" /></p>
<h3 id="一阶pid整体框架">一阶PID整体框架：</h3>
<h4 id="速度闭环控制系统结构图">速度闭环控制系统结构图</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/绘图1.svg" /></p>
<h4 id="part1wheel-speed-encoder-disk">Part1(Wheel &amp; Speed Encoder Disk)</h4>
<p>这部分包含车轮以及与车轮配套的测速码盘，一圈总计<code>20线</code>。</p>
<h5 id="function">Function</h5>
<ul>
<li>驱动小车前进</li>
<li>产生能让测速传感器读取的信号</li>
</ul>
<h5 id="input">Input</h5>
<ul>
<li>直流电机输出的机械能</li>
</ul>
<h5 id="output">Output</h5>
<ul>
<li>小车的位移，速度（by Wheel）</li>
<li>测速传感器的触发信号（by Speed Encoder Disk）</li>
</ul>
<h4 id="part2sensor">Part2(Sensor)</h4>
<p>这部分我们采用的测速传感器型号为：， 时高电平， 时低电平</p>
<h5 id="function-1">Function</h5>
<ul>
<li>将光信号转换为电信号，并触发Mbed的中断以记录速度信息。</li>
</ul>
<h5 id="input-1">Input</h5>
<ul>
<li>测速码盘产生的交替隔断信号</li>
</ul>
<h5 id="output-1">Output</h5>
<ul>
<li>Mbed的触发中断信号（by Sensor）</li>
<li>Mbed寄存器中特定值<code>counter</code>的增加（by Interrupt System in Mbed）</li>
</ul>
<h4 id="part3pid-control">Part3(PID control)</h4>
<p>这部分我们采用PID控制算法来实现小车各车轮速度的闭环控制。</p>
<h5 id="function-2">Function</h5>
<ul>
<li><p>将寄存器中的特定值<code>counter</code>换算为实际的速度值(单位 <span class="math inline">\(lines/s\)</span>)</p>
<p><span class="math display">\[
speed = \frac{\Delta counter}{\Delta time}
\]</span></p></li>
<li><p>通过各车轮对应的counter换算得到的实际速度值来调节各Pwm口的输出，从而使实际速度趋近于设定的目标速度。</p></li>
</ul>
<h5 id="input-2">Input</h5>
<ul>
<li><code>counter</code>值（from Registers in Mbed）</li>
<li><code>counter</code>转换出来的实际速度值（from Counter-Speed Converter）</li>
</ul>
<h5 id="output-2">Output</h5>
<ul>
<li>实际速度值（by Counter-Speed Converter）</li>
<li>PwmOut的更新值（by PID algorithm）</li>
</ul>
<h5 id="trigger">Trigger</h5>
<ul>
<li>方式一：时间增量触发：距离上一次迭代时间的增量到达某一指定值时，触发PID迭代，实现速度更新。</li>
<li>方式二：<code>counter</code>增量触发：<code>counter</code>的增量达到某一指定值时，触发PID迭代，实现速度更新。</li>
</ul>
<h4 id="part4pwmout">Part4(PwmOut)</h4>
<p>这部分我们采用Mbed的Pwm模块来控制直流电机的输出</p>
<h5 id="function-3">Function</h5>
<ul>
<li>控制直流电机</li>
</ul>
<h5 id="input-3">Input</h5>
<ul>
<li>PID的输出值（from PID algorithm）</li>
</ul>
<h5 id="output-3">Output</h5>
<ul>
<li>电机的Pwm电信号</li>
</ul>
<h4 id="part5bdc">Part5(BDC)</h4>
<p>这部分我们才用的是直流减速电机</p>
<h5 id="function-4">Function</h5>
<ul>
<li>提供机械能给车轮</li>
</ul>
<h5 id="input-4">Input</h5>
<ul>
<li>Pwm的电信号</li>
</ul>
<h5 id="output-4">Output</h5>
<ul>
<li>车轮的机械能</li>
</ul>
<h3 id="pid-设计">PID 设计：</h3>
<h4 id="pid原理">PID原理</h4>
<h5 id="wikipedia">Wikipedia</h5>
<p>The PID control scheme is named after its three correcting terms, whose sum constitutes the manipulated variable (MV). The proportional, integral, and derivative terms are summed to calculate the output of the PID controller. Defining <span class="math inline">\({u(t)}\)</span> the controller output, the final form of the PID algorithm is <span class="math display">\[
u(t)={MV}(t)=K_{\text{p}}e(t)+K_{\text{i}}\int _{0}^{t}e(\tau )\,d\tau +K_{\text{d}}{\frac {de(t)}{dt}}
\]</span> where</p>
<p><span class="math inline">\({\displaystyle K_{\text{p}}}\)</span>is the proportional gain, a tuning parameter</p>
<p><span class="math inline">\({\displaystyle K_{\text{i}}}\)</span>is the integral gain, a tuning parameter</p>
<p><span class="math inline">\({\displaystyle K_{\text{d}}}\)</span>is the derivative gain, a tuning parameter</p>
<p><span class="math inline">\({\displaystyle e(t)=\mathrm {SP} -\mathrm {PV} (t)}\)</span> is the error (SP is the setpoint, and PV(<em>t</em>) is the process variable)</p>
<p><span class="math inline">\(t\)</span> is the time or instantaneous time (the present)</p>
<p>$$ is the variable of integration (takes on values from time 0 to the present <span class="math inline">\({\displaystyle t}\)</span></p>
<p>Equivalently, the <a href="https://en.wikipedia.org/wiki/Transfer_function">transfer function</a> in the <a href="https://en.wikipedia.org/wiki/Laplace_transform">Laplace domain</a> of the PID controller is <span class="math display">\[
\displaystyle L(s)=K_{\text{p}}+K_{\text{i}}/s+K_{\text{d}}s
\]</span> where <span class="math inline">\({\displaystyle s}\)</span> is the complex frequency.</p>
<h5 id="bilibili">Bilibili</h5>
<iframe src="//player.bilibili.com/player.html?aid=627065033&amp;bvid=BV1et4y1i7Gm&amp;cid=235144459&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true">
</iframe>
<h4 id="pid更新方案触发条件">PID更新方案(触发条件)</h4>
<h5 id="方式一时间增量触发">方式一：时间增量触发</h5>
<p><del>原理：距离上一次迭代时间的增量到达某一指定值时，触发PID迭代，实现速度更新。</del>（已舍弃）</p>
<p>实现：</p>
<ul>
<li>通过<code>flipper</code>创建一个定时任务，规定每0.2s执行一次迭代</li>
<li>计算当前实际速度<span class="math inline">\(actual\ speed = \frac{\Delta counter}{time}\)</span></li>
<li>执行PID算法，<code>time_delta</code>恒定为0.2s</li>
<li>将<code>counter</code>清零，进入下一个定时循环</li>
</ul>
<p>问题&amp;改进：</p>
<ol type="1">
<li>测得速度与实际速度有误差，且该误差与小车速度以及迭代的间隔时间相关：
<ul>
<li><p>测试结果：在我们首先对一个车轮进行PID测试，发现存在返回的速度值波动较大，于是我们将Full Pwm加在电机上，我们发现在<code>time_delta</code>为0.2s的空转测试中，返回的测得速度在95~105之间波动，明显存在一定的问题</p></li>
<li><p>分析：我们猜测定时触发更新迭代会导致测得速度与实际速度之间存在随机的偏差，这是由于<code>counter</code>变量所表示出来的位移信息并不精确，举个具体一点例子吧！比如，实际位移应该是1.1个counter，1.5个counter和1.9个counter，这些统统都会被认为是1个counter。当然如果我们每次更新时counter的增量都很大的话，这种1以内的误差其实就并不会影响多少了。</p></li>
<li><p>理论分析：</p>
<ul>
<li><p>我们假设起始点为A，我们发现当counter的增量为n时，其位移最少为n，最大为n+1，假设起始点为A'，counter增量为n时，其位移最少为n-1，最大为n。所以对于counter读数为n而言，其最小可能位移为n-1，最大可能位移为n+1<img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/geogebra-export%20(1).svg" /></p></li>
<li><p>误差计算</p>
<p>我们假设能满足合理性<span class="math inline">\(\Delta time_{max} = 0.2s\)</span>，此时我们假设速度为<span class="math inline">\(\omega(unit:line/s)\)</span> <span class="math display">\[
counter = \omega \times \Delta time_{max} = 0.2\omega \\
counter_{error} = 2 \\
error = \frac{couter_{error}}{counter}=\frac{10}{\omega} \times 100\% \\
\]</span> 我们的最大速度<span class="math inline">\(\omega_{max}≈100\)</span>，所以最小误差为<span class="math inline">\(error_{min}≈10\%\)</span>，最小平均误差为<span class="math inline">\(ave\_error_{min}=\frac{1}{2} \times error_{min}≈5\%\)</span></p>
<p>当我们速度为<span class="math inline">\(\omega=50\)</span>，误差为<span class="math inline">\(error≈20\%\)</span></p>
<p>显然这是不可能容忍的，除非我们将<span class="math inline">\(\Delta time\)</span>设置为2s以上或者更高才能基本上满足我们的要求。</p></li>
</ul></li>
</ul></li>
</ol>
<p>结果：</p>
<ul>
<li>由于误差过大，我们基本上排除了了这个方法</li>
<li>但是如果后续需要添加根据长时间更新PID的策略时，我们也可以调用这个方法，尽量让<span class="math inline">\(\Delta time\)</span>大于2s就可以满足我们的需要了</li>
</ul>
<h5 id="方式二counter增量触发">方式二：<code>counter</code>增量触发</h5>
<p><code>counter</code>的增量达到某一指定值时，触发PID迭代，实现速度更新。</p>
<p>实现：</p>
<ul>
<li>通过<code>timer</code>创建一个计时器，用于记录连续两次PID更新之间的间隔时间<span class="math inline">\(\Delta time\)</span>。</li>
<li>在<code>main()</code>函数的循环过程中加入判断语句，规定<code>counter</code>变量的值达到10后执行一次迭代</li>
<li>计算当前实际速度<span class="math inline">\(actual\ speed = \frac{counter}{\Delta time}\)</span></li>
<li>执行PID算法，<code>time_delta</code>更新为<span class="math inline">\(\Delta time\)</span></li>
<li>将<code>counter</code>清零，将<code>timer</code>清零，进入下一个定时循环</li>
</ul>
<p>问题&amp;改进：</p>
<ol type="1">
<li><p>首先是停止后无法自动起步的问题</p>
<ul>
<li>测试结果：我们首先对一个车轮进行PID测试，发现小车并不能自动起步，需要手动给予一定速度后才能开始稳定运行</li>
<li>分析：由于这种更新触发策略需要小车开始运行后才能开始持续不断的更新速度，所以小车一旦因为任何原因停下以后将不能进行下一次的速度更新，导致永远无法自动起步</li>
<li>改进：我们可以利用PID中设定的计时器<code>timer</code>，因为每次执行PID算法时候，都会进行清零操作，所以我们很容易联想到的方法就是设定当计时器<code>timer</code>读数大于某个特定值时，将会强制执行PID算法</li>
<li>方案改进：</li>
</ul></li>
<li><p>然后就是停止过长时间再次更新时会导致PID算法中积分项过大的问题</p>
<p>然后就是起步时速度猛增的问题</p>
<ul>
<li><p>测试结果：我们首先对一个车轮进行PID测试，发现小车往往能够弹射起步，并维持一段时间告诉运行后之后才恢复到目标速度</p></li>
<li><p>测试结果：在我们首先对一个车轮进行PID测试时，发现小车往往能够弹射起步，并维持一段时间告诉运行后之后才恢复到目标速度</p></li>
<li><p>分析：<code>timer</code>的累积可能会导致PID算法中积分项过大</p></li>
<li><p>改进：在PID更新过程中，当检测到<code>timer</code>的读数过大时，自动识别为停止起步模式，返回测得速度为0，并将<span class="math inline">\(\Delta time\)</span> 设置为0.01s</p></li>
</ul></li>
</ol>
<p>结果：</p>
<ul>
<li>我们决定采用方案二作为我们的PID更新方式</li>
</ul>
<h4 id="pid代码">PID代码</h4>
<h5 id="项目目录">项目目录</h5>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">└─little_car
    ├─main.cpp
    ├─pid.h
    └─mbed
        └─...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>当算法译平台默认支持的语言是C和C++，因为除了大一的时候学过一学期C语言，之后都没怎么学过了，所以代码写的很糙，如果要直接使用的话，请仔细检查。</p>
<p>考虑到之后在PID Calibration过程，可能要使用到的字符串的处理，以及我之前在学习Java和Python时对类有一定的了解，所以果断采用C++。</p>
<p>该代码是最初始版本，包含了调试时所需要的串口通信和字符串处理的代码</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><div class="caption"><span>pid.h Used to define two Structures pidCalibrationand pidState</span></div><code class="language-c"><span class="token comment">// protection against multiple includes</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">SAXBOPHONE_PID_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SAXBOPHONE_PID_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token keyword">extern</span> <span class="token string">"C"</span><span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">pid_calibration</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/*
         * struct PID_Calibration
         * 
         * Struct storing calibrated PID constants for a PID Controller
         * These are used for tuning the algorithm and the values they take are
         * dependent upon the application - (in other words, YMMV...)
         */</span>
        <span class="token keyword">double</span> kp<span class="token punctuation">;</span> <span class="token comment">// Proportional gain</span>
        <span class="token keyword">double</span> ki<span class="token punctuation">;</span> <span class="token comment">// Integral gain</span>
        <span class="token keyword">double</span> kd<span class="token punctuation">;</span> <span class="token comment">// Derivative gain</span>
    <span class="token punctuation">&#125;</span> PID_Calibration<span class="token punctuation">;</span>


    <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">pid_state</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/*
         * struct PID_State
         * 
         * Struct storing the current state of a PID Controller.
         * This is used as the input value to the PID algorithm function, which also
         * returns a PID_State struct reflecting the adjustments suggested by the algorithm.
         * 
         * NOTE: The output field in this struct is set by the PID algorithm function, and
         * is ignored in the actual calculations.
         */</span>
        <span class="token keyword">double</span> actual<span class="token punctuation">;</span> <span class="token comment">// The actual reading as measured</span>
        <span class="token keyword">double</span> target<span class="token punctuation">;</span> <span class="token comment">// The desired reading</span>
        <span class="token keyword">double</span> time_delta<span class="token punctuation">;</span> <span class="token comment">// Time since last sample/calculation - should be set when updating state</span>
        <span class="token comment">// The previously calculated error between actual and target (zero initially)</span>
        <span class="token keyword">double</span> previous_error<span class="token punctuation">;</span>
        <span class="token keyword">double</span> integral<span class="token punctuation">;</span> <span class="token comment">// Sum of integral error over time</span>
        <span class="token keyword">double</span> output<span class="token punctuation">;</span> <span class="token comment">// the modified output value calculated by the algorithm, to compensate for error</span>
    <span class="token punctuation">&#125;</span> PID_State<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token punctuation">&#125;</span> <span class="token comment">// extern "C"</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">// end of header</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp" data-language="cpp"><div class="caption"><span>main.cpp</span></div><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mbed.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"pid.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

Serial <span class="token function">pc</span><span class="token punctuation">(</span>PA_9<span class="token punctuation">,</span> PA_10<span class="token punctuation">)</span><span class="token punctuation">;</span>

PwmOut <span class="token function">mot1</span><span class="token punctuation">(</span>D5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//D2配对左下轮</span>
PwmOut <span class="token function">mot2</span><span class="token punctuation">(</span>D6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//D3配对左上轮</span>
PwmOut <span class="token function">mot3</span><span class="token punctuation">(</span>D9<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//D11配对右上轮</span>
PwmOut <span class="token function">mot4</span><span class="token punctuation">(</span>D10<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//A2配对右下轮</span>

Ticker flipper<span class="token punctuation">;</span>

<span class="token keyword">int</span> iterationCounter<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">PidFirst</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">PidFirst</span><span class="token punctuation">(</span>PinName pwm_name<span class="token punctuation">,</span> PinName sensorPort<span class="token punctuation">,</span> <span class="token keyword">double</span> tar<span class="token operator">=</span><span class="token number">60.0</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">pwm</span><span class="token punctuation">(</span>pwm_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_interruptin</span><span class="token punctuation">(</span>sensorPort<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            _counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            pwm<span class="token punctuation">.</span><span class="token function">period_ms</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pwm<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            target <span class="token operator">=</span> tar<span class="token punctuation">;</span>
            PID_Calibration pidCali <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0.001</span><span class="token punctuation">,</span> <span class="token number">0.006</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
            PID_State pidState <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span>target<span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">,</span>target<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
            _pidCalibration <span class="token operator">=</span> pidCali<span class="token punctuation">;</span>
            _pidState <span class="token operator">=</span> pidState<span class="token punctuation">;</span>
            time<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            _interruptin<span class="token punctuation">.</span><span class="token function">rise</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>PidFirst<span class="token operator">::</span>counterFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        
        <span class="token comment">// Function: set target velocity</span>
        <span class="token keyword">void</span> <span class="token function">setTarget</span><span class="token punctuation">(</span><span class="token keyword">double</span> tar<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            _pidState<span class="token punctuation">.</span>target <span class="token operator">=</span> tar<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        
        <span class="token comment">// Function: set pid calibration</span>
        <span class="token keyword">void</span> <span class="token function">setPid</span><span class="token punctuation">(</span><span class="token keyword">double</span> kp<span class="token punctuation">,</span> <span class="token keyword">double</span> ki<span class="token punctuation">,</span> <span class="token keyword">double</span> kd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            _pidCalibration<span class="token punctuation">.</span>kp <span class="token operator">=</span> kp<span class="token punctuation">;</span>
            _pidCalibration<span class="token punctuation">.</span>ki <span class="token operator">=</span> ki<span class="token punctuation">;</span>
            _pidCalibration<span class="token punctuation">.</span>kd <span class="token operator">=</span> kd<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        
        <span class="token keyword">void</span> <span class="token function">counterFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            _counter<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">void</span> <span class="token function">counterClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            _counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">int</span> <span class="token function">counterCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> _counter<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// Function: return a speed and justify whether there is an error</span>
        <span class="token comment">// Attention: if the velocity lesson than 0.25round/s there will be a bug</span>
        <span class="token keyword">double</span> <span class="token function">speedFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            duration <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">read_ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>duration <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> duration <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                _pidState<span class="token punctuation">.</span>time_delta <span class="token operator">=</span>  duration<span class="token punctuation">;</span>
                <span class="token keyword">return</span>  _counter <span class="token operator">/</span> duration<span class="token punctuation">;</span>               
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                duration <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
                 _pidState<span class="token punctuation">.</span>time_delta <span class="token operator">=</span>  duration<span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// Function: to update the pid control factor</span>
        <span class="token keyword">void</span> <span class="token function">pid_iterate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token comment">// 计算目标值与反馈值之间的误差</span>
            <span class="token keyword">double</span> error <span class="token operator">=</span> _pidState<span class="token punctuation">.</span>target <span class="token operator">-</span> _pidState<span class="token punctuation">.</span>actual<span class="token punctuation">;</span>
            <span class="token comment">// 计算Iterm</span>
            _pidState<span class="token punctuation">.</span>integral <span class="token operator">+=</span> <span class="token punctuation">(</span>error <span class="token operator">*</span> _pidState<span class="token punctuation">.</span>time_delta<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 计算Pterm</span>
            <span class="token keyword">double</span> derivative <span class="token operator">=</span> <span class="token punctuation">(</span>error <span class="token operator">-</span> _pidState<span class="token punctuation">.</span>previous_error<span class="token punctuation">)</span> <span class="token operator">/</span> _pidState<span class="token punctuation">.</span>time_delta<span class="token punctuation">;</span>
            <span class="token comment">// 计算pid next state</span>
            _pidState<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token punctuation">(</span>
                <span class="token punctuation">(</span>_pidCalibration<span class="token punctuation">.</span>kp <span class="token operator">*</span> error<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>_pidCalibration<span class="token punctuation">.</span>ki <span class="token operator">*</span> _pidState<span class="token punctuation">.</span>integral<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>_pidCalibration<span class="token punctuation">.</span>kd <span class="token operator">*</span> derivative<span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 更新上一次的误差值为本次的误差值</span>
            _pidState<span class="token punctuation">.</span>previous_error <span class="token operator">=</span> error<span class="token punctuation">;</span>
            <span class="token comment">// 返回这次的状态</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// Function: renew pid state;</span>
        <span class="token keyword">void</span> <span class="token function">renewPidState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            _pidState<span class="token punctuation">.</span>actual <span class="token operator">=</span> <span class="token function">speedFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">pid_iterate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// Function: renew the hole motor parameter according to pid algorithm</span>
        <span class="token keyword">void</span> <span class="token function">renew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">renewPidState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pwm <span class="token operator">=</span> _pidState<span class="token punctuation">.</span>output<span class="token punctuation">;</span>
            time<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">counterClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        
        <span class="token keyword">double</span> <span class="token function">checkSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> _pidState<span class="token punctuation">.</span>actual<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        
        <span class="token keyword">double</span> <span class="token function">timeCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> time<span class="token punctuation">.</span><span class="token function">read_ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        
        
    <span class="token keyword">private</span><span class="token operator">:</span>
        PID_Calibration _pidCalibration<span class="token punctuation">;</span>       
        PID_State _pidState<span class="token punctuation">;</span>
        <span class="token keyword">double</span> target<span class="token punctuation">;</span>
        <span class="token keyword">volatile</span> <span class="token keyword">int</span> _counter<span class="token punctuation">;</span>
        PwmOut pwm<span class="token punctuation">;</span>
        InterruptIn _interruptin<span class="token punctuation">;</span>
        Timer time<span class="token punctuation">;</span>
        <span class="token keyword">double</span> duration<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

PidFirst <span class="token function">mot1_pid</span><span class="token punctuation">(</span>D5<span class="token punctuation">,</span> D2<span class="token punctuation">)</span><span class="token punctuation">;</span> 
PidFirst <span class="token function">mot2_pid</span><span class="token punctuation">(</span>D6<span class="token punctuation">,</span> D3<span class="token punctuation">)</span><span class="token punctuation">;</span>
PidFirst <span class="token function">mot3_pid</span><span class="token punctuation">(</span>D9<span class="token punctuation">,</span> D11<span class="token punctuation">)</span><span class="token punctuation">;</span>
PidFirst <span class="token function">mot4_pid</span><span class="token punctuation">(</span>D10<span class="token punctuation">,</span> A2<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">bool</span> <span class="token function">renew_motor</span><span class="token punctuation">(</span><span class="token keyword">char</span> _read<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>token<span class="token punctuation">;</span>
    token <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>_read<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    string flag <span class="token operator">=</span>  token<span class="token punctuation">;</span>

    token <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> kp <span class="token operator">=</span> <span class="token function">atof</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>

    token <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> ki <span class="token operator">=</span> <span class="token function">atof</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>

    token <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> kd <span class="token operator">=</span> <span class="token function">atof</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>

    token <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> tar <span class="token operator">=</span> <span class="token function">atof</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token string">"S"</span> <span class="token operator">||</span> flag <span class="token operator">==</span> <span class="token string">"s"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        mot1_pid<span class="token punctuation">.</span><span class="token function">setPid</span><span class="token punctuation">(</span>kp<span class="token punctuation">,</span> ki<span class="token punctuation">,</span> kd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mot1_pid<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>tar<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mot2_pid<span class="token punctuation">.</span><span class="token function">setPid</span><span class="token punctuation">(</span>kp<span class="token punctuation">,</span> ki<span class="token punctuation">,</span> kd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mot2_pid<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>tar<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mot3_pid<span class="token punctuation">.</span><span class="token function">setPid</span><span class="token punctuation">(</span>kp<span class="token punctuation">,</span> ki<span class="token punctuation">,</span> kd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mot3_pid<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>tar<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mot4_pid<span class="token punctuation">.</span><span class="token function">setPid</span><span class="token punctuation">(</span>kp<span class="token punctuation">,</span> ki<span class="token punctuation">,</span> kd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mot4_pid<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>tar<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token string">"S1"</span> <span class="token operator">||</span> flag <span class="token operator">==</span> <span class="token string">"s1"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        mot1_pid<span class="token punctuation">.</span><span class="token function">setPid</span><span class="token punctuation">(</span>kp<span class="token punctuation">,</span> ki<span class="token punctuation">,</span> kd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token string">"S2"</span> <span class="token operator">||</span> flag <span class="token operator">==</span> <span class="token string">"s2"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        mot2_pid<span class="token punctuation">.</span><span class="token function">setPid</span><span class="token punctuation">(</span>kp<span class="token punctuation">,</span> ki<span class="token punctuation">,</span> kd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token string">"S3"</span> <span class="token operator">||</span> flag <span class="token operator">==</span> <span class="token string">"s3"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        mot3_pid<span class="token punctuation">.</span><span class="token function">setPid</span><span class="token punctuation">(</span>kp<span class="token punctuation">,</span> ki<span class="token punctuation">,</span> kd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token string">"S4"</span> <span class="token operator">||</span> flag <span class="token operator">==</span> <span class="token string">"s4"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        mot4_pid<span class="token punctuation">.</span><span class="token function">setPid</span><span class="token punctuation">(</span>kp<span class="token punctuation">,</span> ki<span class="token punctuation">,</span> kd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">flag_change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    string str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
    flipper<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flag_change<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mot1_pid<span class="token punctuation">.</span><span class="token function">counterCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> iterationCounter <span class="token operator">||</span> mot1_pid<span class="token punctuation">.</span><span class="token function">timeCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            mot1_pid<span class="token punctuation">.</span><span class="token function">renew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mot2_pid<span class="token punctuation">.</span><span class="token function">counterCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> iterationCounter <span class="token operator">||</span> mot2_pid<span class="token punctuation">.</span><span class="token function">timeCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            mot2_pid<span class="token punctuation">.</span><span class="token function">renew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mot3_pid<span class="token punctuation">.</span><span class="token function">counterCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> iterationCounter <span class="token operator">||</span> mot3_pid<span class="token punctuation">.</span><span class="token function">timeCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            mot3_pid<span class="token punctuation">.</span><span class="token function">renew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mot4_pid<span class="token punctuation">.</span><span class="token function">counterCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> iterationCounter <span class="token operator">||</span> mot4_pid<span class="token punctuation">.</span><span class="token function">timeCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            mot4_pid<span class="token punctuation">.</span><span class="token function">renew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            pc<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f  %f  %f %f\n"</span><span class="token punctuation">,</span> mot1_pid<span class="token punctuation">.</span><span class="token function">checkSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mot2_pid<span class="token punctuation">.</span><span class="token function">checkSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mot3_pid<span class="token punctuation">.</span><span class="token function">checkSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mot4_pid<span class="token punctuation">.</span><span class="token function">checkSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pc<span class="token punctuation">.</span><span class="token function">readable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            ch <span class="token operator">=</span> pc<span class="token punctuation">.</span><span class="token function">getc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'E'</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">char</span> chTemp<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token function">strcpy</span><span class="token punctuation">(</span>chTemp<span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">renew_motor</span><span class="token punctuation">(</span>chTemp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    pc<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"successful!successful!successful!successful!successful!successful!successful!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                    pc<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"failed!failed!failed!failed!failed!failed!failed!failed!failed!failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> 
                str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                str <span class="token operator">+=</span> ch<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="pid调试">PID调试</h4>
<p>（未完待续）</p>
]]></content>
      <categories>
        <category>Tech</category>
        <category>Cpp</category>
        <category>Pid</category>
      </categories>
      <tags>
        <tag>Cpp</tag>
        <tag>PID</tag>
        <tag>car</tag>
      </tags>
  </entry>
  <entry>
    <title>Java(一)Java初级语法</title>
    <url>/Tech/Java/java_grammar_primary.html</url>
    <content><![CDATA[<div class="note info"><p><strong>说明</strong></p>
<ul>
<li>本文是在<code>大二下学期</code>参照<code>黑马程序员Java系列课程</code>教程所做笔记，后并为勘误，如有错误，请谅解</li>
</ul>
</div>
<h4 id="运算规则">运算规则</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. byte, char, short 类型数据进行计算时，计算结果自动转换为int型</span>
<span class="token comment">// 2. 小数常量自动为double类型</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWrold</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">char</span> <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token string">'b'</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    <span class="token comment">//error</span>
        <span class="token keyword">int</span>  <span class="token class-name">B</span> <span class="token operator">=</span> <span class="token string">'b'</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    <span class="token comment">//B = 1</span>
        <span class="token keyword">float</span> <span class="token class-name">C</span> <span class="token operator">=</span> <span class="token number">1.05</span><span class="token punctuation">;</span>        <span class="token comment">//error</span>
        <span class="token keyword">float</span> <span class="token class-name">D</span> <span class="token operator">=</span> <span class="token number">1.05F</span><span class="token punctuation">;</span>       <span class="token comment">//D = 1.05</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 2. 若表达式中出现不同的转换类型，则记过自动转换成两者中范围更大的数据类型</span>
<span class="token comment">// 范围大小排序如下表</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
     	<span class="token keyword">double</span> <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">;</span>     <span class="token comment">//A = 0.5   </span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr class="header">
<th>类型</th>
<th>byte</th>
<th>char</th>
<th>short</th>
<th>int</th>
<th>long</th>
<th>float</th>
<th>double</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>字节大小</td>
<td>1</td>
<td>2</td>
<td>2</td>
<td>4</td>
<td>8</td>
<td>4</td>
<td>8</td>
</tr>
<tr class="even">
<td>范围等级</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h4 id="赋值运算符">赋值运算符</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//值得注意的事，在java中，赋值运算符会将计算的结果强制转换为前面变量的类型</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">char</span> <span class="token class-name">B</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>
        <span class="token class-name">B</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A = "</span> <span class="token operator">+</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//A = B</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="字符串的加法">字符串的加法</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//字符串可以直接与其它类型的变量进行加法运算</span>
<span class="token comment">/*具体步骤:
	1. 若计算式两边有字符串，且有其他类型数据，则将其他类型数据转化成相应字符串:
	浮点型     1.05 = "1.05"
	boolean型 true = "true"
	int型     5 = "5"
	2. 将后面字符串接到前面字符串后面
	注: 在进行运算时 严格遵循计算顺序
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Coldeye"</span> <span class="token operator">+</span> <span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// Coldeye2020</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Coldeye"</span> <span class="token operator">+</span> <span class="token number">2000</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Coldeye200020</span>
        <span class="token class-name">Sytem</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2000</span> <span class="token operator">+</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token string">"Coldeye"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 2020Coldeye</span>
        
    <span class="token punctuation">&#125;</span>
    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="短路运算符-与-基本逻辑运算符">短路运算符 与 基本逻辑运算符</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//短路: &amp;&amp; or ||</span>
<span class="token comment">//基本: &amp;  or  |</span>
<span class="token comment">/*
	短路运算符若计算左边的结果已经足够输出结果，则不会去进行右边算术表达式的计算
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> k <span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>j<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// i = 11</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"j = "</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// j = 20</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>k<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"j = "</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// i = 21</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"k = "</span> <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// j = 31    </span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="三元表达式">三元表达式</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
	基本格式:
		关系表达式 ? 表达式1 : 表达式2;
	运算结果:
		先计算关系表达式的结果
		若关系表达式结果为True: 计算表达式1，且运算结果为表达式1的值
		若关系表达式结果为False: 计算表达式2，且运算结果为表达式2的值
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
     <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token operator">?</span> a<span class="token operator">++</span> <span class="token operator">:</span> b<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//a = 101</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"b = "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//b = 200</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="系统输入">系统输入</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//导包</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scnner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token string">"请输入i的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="条件判断语句">条件判断语句</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// if条件语句</span>

<span class="token comment">/*
	基本格式:
	if (条件判断语句)&#123;
		执行语句1;
		....
	&#125;else if (条件判断语句)&#123;
		执行语句2;
		....
	&#125;else if (条件判断语句)&#123;
		执行语句3;
		....
	&#125;else&#123;
		执行语句n;
		....
	&#125;
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// switch条件语句 与 case穿透</span>
<span class="token comment">/*
	表达式中的值可以是:
		byte, short, int, char, string, 枚举
	基本格式:
	switch(表达式):
		case value 1:
			执行语句1;
			break;
		case value 2:
			执行语句2;
			break;
		....
		default value n+1:
			执行语句n+1;
			[break;]        //最后一个break 可以省去
		
*/</span>

<span class="token comment">/*
	case穿透:
	switch(表达式):
		case value1:
		case value2:
		case value3:
			执行语句1;
			break;
		case value4:
		case value5:
		case value6:
			执行语句2;
			break;
		....
		default:
			执行语句3;
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="循环条件语句">循环条件语句</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// for 循环语句</span>
<span class="token comment">/*
	基本格式:
	for(int i=0; i &lt; 10; i++)&#123;
		循环体语句;
	&#125;
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// while 循环语句</span>
<span class="token comment">/*
	基本格式:
	while (循环判断语句)&#123;
		循环体语句;
		循环控制语句;
	&#125;
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// do while 循环语句</span>
<span class="token comment">/*
	基本格式:
	do&#123;
		循环体语句;
		循环控制语句;
	&#125;while(循环判断语句);
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="循环跳转语句">循环跳转语句</h5>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token keyword">continue</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="内容辅助键与快捷键">内容辅助键与快捷键</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//自动生成mian()方法</span>
psvm <span class="token operator">+</span> enter
<span class="token comment">//自动生成输出语句</span>
sout <span class="token operator">+</span> enter
<span class="token comment">//内容辅助键</span>
<span class="token class-name">Ctrl</span> <span class="token operator">+</span> <span class="token class-name">Shift</span> <span class="token operator">+</span> space
    
    
    
<span class="token comment">//快捷键</span>
<span class="token comment">//单行注释</span>
<span class="token class-name">Ctrl</span> <span class="token operator">+</span> <span class="token operator">/</span>
<span class="token comment">//多行注释</span>
<span class="token class-name">Ctrl</span> <span class="token operator">+</span> shift <span class="token operator">+</span> <span class="token operator">/</span>
<span class="token comment">//格式化</span>
<span class="token class-name">Ctrl</span> <span class="token operator">+</span> <span class="token class-name">Alt</span> <span class="token operator">+</span> l
<span class="token comment">//快捷键导包</span>
<span class="token class-name">Alt</span> <span class="token operator">+</span> <span class="token class-name">Enter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="数组">数组</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//定义数组</span>

<span class="token comment">//定义数组 以及 其动态初始化</span>
<span class="token comment">//1.定义了一个int类型数组，数组名是arr_name(最好用这种)</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr_name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span>
<span class="token comment">//2.定义了一个int类型的变量，变量名是arr_name数组</span>
<span class="token keyword">int</span> arr_name<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span>
    
<span class="token comment">//静态初始化</span>
<span class="token comment">//1.原格式</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr_name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>数据<span class="token number">1</span><span class="token punctuation">,</span> 数据<span class="token number">2</span><span class="token punctuation">,</span> 数据<span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>
<span class="token comment">//2.简化格式</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr_name <span class="token operator">=</span> <span class="token punctuation">&#123;</span>数据<span class="token number">1</span><span class="token punctuation">,</span> 数据<span class="token number">2</span><span class="token punctuation">,</span> 数据<span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>

<span class="token comment">//两个常见小问题</span>
<span class="token comment">//1.索引越界</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//空指针异常</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//数组遍历</span>
<span class="token comment">//通用格式</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> x<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//其中arr.length可以读取出arr数组的长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="方法定义与调用">方法定义与调用</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//定义</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method_name</span><span class="token punctuation">(</span>数据类型 参数名称<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//独立功能代码块</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="方法重载">方法重载</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
	方法重载:
		多个方法在一个类中
		多个方法具有相同的方法名
		多个方法的参数不相同，类型不同或者数量不同
*/</span>

<span class="token comment">/*
	方法重载的意义:
		1.使函数可以兼容不同类型的参数，和不同个数的参数
		2.进阶:通过输入的参数种类和个数来控制不同函数(同名不同功能)的调用
*/</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//需求1:求两个int类型数据和方法</span>
    
    <span class="token comment">//需求2:求两个double类型数据和的方法</span>
    
    <span class="token comment">//需求3:求三个int类型数据和的方法</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="传递基本类型引用类型">传递基本类型/引用类型</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
	传递基本类型参数原理:
		由于基本类型变量是在栈内存中占据一片空间，用以储存变量名和变量值, 在传递参数时，方法中的形参会在加载到栈内存, 并将被传递变量的值复制过来, 所以改变方法中形参的值不会影响main函数中变量的值
	
	传递引用类型参数原理:
		由于引用类型变量是先在栈内存中占据一块空间, 用以储存变量名并指向一片堆内存空间, 在传递参数时, 方法中的形参会在加载到栈内存，并将被传递变量的值复制过来，由于这次复制过来的是只想堆内存某处的地址信息，所在方法中改变此类型数据的值会改变相对应的堆内存中变量的值，从而影响到main函数中变量所指向堆内存空间的值(即变量的值)
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="面向对象">面向对象</h2>
<h3 id="调用类与创建对象">调用类与创建对象</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
	基本格式
		先导入包(若包在同目录下，则无需导包)
		类名  对象名 = new 类名();
	//Example:(创建具有phone类属性与方法的对象p)
		Phone p = new phone
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="多对象指向相同">多对象指向相同</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentTest03</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		s1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">"coldeye"</span><span class="token punctuation">;</span>
		s1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Student</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		s1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">"haha"</span>
		s2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">28</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> s2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">/*
	由于对象本身的值是一个指向堆内存某处的地址, 当多个对象指向相同的堆内存时，它们操作的其实是同一片内存中的数据
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="成员变量与局部变量">成员变量与局部变量</h3>
<table>
<thead>
<tr class="header">
<th>区别</th>
<th>成员变量</th>
<th>局部变量</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>类中位置不同</td>
<td>类中方法外</td>
<td>方法内或者方法声明中</td>
</tr>
<tr class="even">
<td>内存中位置不同</td>
<td>堆内存</td>
<td>栈内存</td>
</tr>
<tr class="odd">
<td>生命周期不同</td>
<td>随对象存在而存在，随对象消失而消失</td>
<td>随方法调用而存在，随方法调用完毕而消失</td>
</tr>
<tr class="even">
<td>初始化值不同</td>
<td>有默认的初始化值</td>
<td>没有默认的初始化值，必须先定义，赋值，才能使用</td>
</tr>
</tbody>
</table>
<h3 id="封装">封装</h3>
<h4 id="private">private</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//private 可以使变量仅能被同类下的方法所访问和修改，其他类无权访问和修改 </span>
    
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">//</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    
    <span class="token comment">//提供get/set方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入年龄错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
            age <span class="token operator">=</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="this">this</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Java中的this 和 Python中的self相似, this用以在方法中使用'调用该方法的对象的'成员变量(并区别于函数内同名的局部变量)</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//需要加上this 这个关键字以区分成员变量和局部变量</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//无需加上this 因为没有局部变量</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="封装-1">封装</h4>
<blockquote>
<p>面向对象三大特征: 封装, 继承, 多态</p>
<p>封装的原则: 将类的某些信息隐藏在类内部, 不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作与访问。</p>
<p>封装的优势:</p>
<p>​ 1.通过方法来控制成员变量的操作，提高了代码的安全性<br />
​ 2.把代码进行封装提高了代码的复用性</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
	构造方法: 
		类比于Python中的 __init__方法
*/</span>
<span class="token comment">//构造方法是什么?</span>
<span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//这是最早接触的 使用带参数的构造方法的例子, 其中Scanner()被称为构造方法, System.in是传进去的参数, 用以对创建的对象sc进行初始化, 值得注意的是构造方法的方法名需要与类名相同.</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token comment">//------------定义一个带参数的构造方法--------------</span>
    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"赋值初始化完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//------------重载一个不带参数的构造方法------------</span>
    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Lihua"</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认初始化完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//值得注意的是, 如果你并没有再类中定义一个构造方法, 系统会默认在该类中定义一个无参的构造方法, 而你一旦定义了一个构造方法, 则系统不会再自动定义一个无参的构造方法.</span>
<span class="token comment">/*
	所以当你定义了一个带参数的构造方法, 下次创建对象是则需要相应的参数，否则会报错，除非
	1. 你定义的参数是默认参数(貌似java并不支持默认参数)
	2. 你使用重载的方法定义了另外一个不带参数的构造方法
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="标准类的制作">标准类的制作</h4>
<ol type="1">
<li>成员变量
<ul>
<li>使用private 修饰成员变量</li>
</ul></li>
<li>构造方法
<ul>
<li>提供一个无参构造方法</li>
<li>提供一个带参构造方法</li>
</ul></li>
<li>成员方法
<ul>
<li>提供每一个成员变量对应的setXxx()/getXxx()</li>
<li>提供一个显示对象信息的show()</li>
</ul></li>
<li>创建对象并为其成员变量赋值的两种方式
<ul>
<li>无参构造方法创建对象后使用setXxx()赋值</li>
<li>使用带参构造方法直接创建带有属性值的对象</li>
</ul></li>
</ol>
<h4 id="java-api">Java API</h4>
<blockquote>
<p><a href="https://www.matools.com/api/java8">中文API</a></p>
</blockquote>
<blockquote>
<p><a href="https://docs.oracle.com/javase/7/docs/api/">英文API</a></p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//先写构造方法, 再敲击Ctrl+Alt+V, 自动补全前面创建对象部分</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一串字符: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//先调用方法, 再敲击Ctrl+Alt+V, 自动补全前面部分</span>
        <span class="token class-name">String</span> line <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您输入的字符串为: "</span> <span class="token operator">+</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="string">String</h3>
<h4 id="概述">概述</h4>
<p>​ String类在<code>java.lang</code> 包下, 所以使用的时候不需要导包。 ​ String类代表字符串，Java程序中的所有字符串文字(例如"abc") 都被实现为此类的实例, 也就是说, Java程序中的所有双引号字符串都是String类的对象</p>
<hr />
<h4 id="字符串的特点">字符串的特点</h4>
<ul>
<li>字符串不可变，他们的值在创建后不能被更改</li>
<li>虽然String的值是不可变的，但是他们可以被共享</li>
<li>字符串的效果上相当于字符数组(char[]), 但是底层原理是字节数组(byte[])</li>
</ul>
<hr />
<h4 id="string类对象的创建">String类对象的创建</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 构造方法的方式</span>
<span class="token comment">// 1. 无参构造方法:创建一个空白字符串对象, 不含有任何内容</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2. 字符数组参数构造方法:根据字符数组内容创建字符串对象</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3. 字节数组参数构造方法:根据字节数组内容创建字符串对象</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>各个字符所对应的ASCII码<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token comment">// 直接赋值的方式</span>
<span class="token comment">// 4. 字节赋值创建字符串对象</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string">"Fuck You, Bitch"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr />
<h4 id="不同方式创建string类对象的区别">不同方式创建String类对象的区别</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
	1. 构造方法创建的对象的特点
		由于, 该类方法每次创建一次对象都会使用一次 'new' 来申请一个内存空间, 故虽然内容相同, 但是地址值不同 
*/</span>
<span class="token comment">// 如下, s1 和 s2 创建对象时所参考的对象相同(都是字符数组chs) 但 他们的地址不同(即s1 和 s2 指向的不是同一个对象).</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">/*
	2. 直接赋值创建的对象的特点
		以" "方式给出的字符串, 只要字符串序列相同(顺序和大小写), 无论在程序中出现多少次, JVM都只会建立一个String对象, 并在字符串池中维护
*/</span>
<span class="token comment">// 如下, JVM首先会创建一个String对象放在字符串池中, 并给s3参考; 然后再创建s4时, 则直接让其指向字符串池中上一步已经创建好的String对象，也就是说本质上他们是同一个对象</span>
<span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//测试代码</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//构造方法得到</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//直接赋值得到</span>
    <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">=</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20200729125326551.png" /></p>
<hr />
<h4 id="string类的常见方法使用">String类的常见方法使用</h4>
<table>
<thead>
<tr class="header">
<th>方法</th>
<th>作用</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>str1.equals(String str2)</td>
<td>判断两个字符串中内容是否一致</td>
<td>Boolean 相同为True, 不同为False</td>
</tr>
<tr class="even">
<td>str1.charAt(int index)</td>
<td>输出索引处字符的char值</td>
<td>char 返回索引处字符的char值</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h5 id="字符串的比较">字符串的比较</h5>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//利用 == 判断是否指向的是同一个字符串对象(指向地址时候一样)</span>

<span class="token comment">//利用 equals() 判断字符串内容是否一样</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"bcd"</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="字符串的遍历">字符串的遍历</h5>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. 返回字符串中指定索引处的char值, 字符串public char charAt(int index)</span>
<span class="token comment">// 2. 利用for循环遍历字符串</span>

<span class="token comment">//通用格式</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//就是索引处的字符值</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="统计字符次数">统计字符次数</h5>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> smallCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> bigCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> numberCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> line <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">char</span> ch <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                bigCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;</span> <span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                smallCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                numberCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大写字母有"</span> <span class="token operator">+</span> bigCount <span class="token operator">+</span> <span class="token string">"个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小写字母有"</span><span class="token operator">+</span> smallCount <span class="token operator">+</span> <span class="token string">"个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数字有"</span><span class="token operator">+</span> numberCount <span class="token operator">+</span> <span class="token string">"个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="string-builder">String Builder</h3>
<h4 id="背景">背景</h4>
<h5 id="string类的对象进行拼接操作时在内存中的情况">String类的对象进行拼接操作时在内存中的情况:</h5>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
    s <span class="token operator">+=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20200729143509091.png" /></p>
<blockquote>
<p>​ 如图中所示, 对于第2行代码, 首先在堆内存的String常量池中创建了字符串常量"hello", 地址为001(假设), 再在栈内存的main方法中创建了一个String类对象s, 指向地址001(假设). ​ 执行第3行代码时, 因为 "hello" 为字符串常量不可以修改, 所以首先在堆内存的String常量池中创建了堆内存"world", 地址为002(假设), 由于是拼接操作, String类对象s只能指向一个地址, 但是常量池中并没有一个内容为"helloworld"常量, 所以会在堆内存中再创建一个"helloworld"字符串常量, 地址为003, 并将栈内存中的s指向003.</p>
</blockquote>
<h5 id="string拼接原理带来的坏处">String拼接原理带来的坏处</h5>
<p>​ 很明显, 如果对字符串进行拼接操作, 每次拼接, 都会构建一个新的String对象, 且保留之前已经创建的String对象, 既耗时, 又浪费内存空间, 而且这种操作还无可避免. 所以我们需要引入一种新的类来解决这个问题, 这个类就是StringBuilder类.</p>
<h4 id="stringbuilder-概述">StringBuilder 概述</h4>
<p>​ StringBuilder 是一个可变的字符串类, 我们可以把它看成是一个容器, 这里的可变指的是StringBuilder对象中的内容是可变的</p>
<p>String 和 StringBuilder的区别:</p>
<ul>
<li>String:内容是不可变得</li>
<li>StringBuilder:内容是可变的</li>
</ul>
<h4 id="stringbuilder-构造方法">StringBuilder 构造方法</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
	方法1: public StringBuilder(), 创建一个空白的可变的字符串对象，不含有任何内容
	方法2: public StringBuilder(String str), 根据字符串的内容, 来创建可变字符串对象
*/</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb"</span> <span class="token operator">+</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb.length()"</span> <span class="token operator">+</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">StringBuilder</span> sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb2"</span> <span class="token operator">+</span> sb2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb2.length()"</span> <span class="token operator">+</span> sb2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="stringbuilder类的常见方法使用">StringBuilder类的常见方法使用</h4>
<table>
<thead>
<tr class="header">
<th>方法</th>
<th>作用</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>sb1.append(任意类型数据)</td>
<td>在sb1后添加数据, 并返回对象自身</td>
<td>StringBuilder 返回添加数据后对象本身</td>
</tr>
<tr class="even">
<td>sb1.reverse()</td>
<td>将sb1的内容进行反转, 返回对象本身</td>
<td>StringBuilder 返回反转后对象本身</td>
</tr>
</tbody>
</table>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       	<span class="token comment">//调用append()方法, 并将返回值赋值给sb2</span>
        <span class="token class-name">StringBuilder</span> sb2 <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//查看sb, sb2内容</span>
       	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb: "</span> <span class="token operator">+</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb2: "</span> <span class="token operator">+</span> sb2<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        
        <span class="token comment">//链式编程原理:</span>
        <span class="token comment">//1. 对象.对象具有的方法 返回 对象</span>
        <span class="token comment">//2. (对象.对象具有的方法).对象具有的方法</span>
        <span class="token class-name">StringBuilder</span> sb3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sb3<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//查看sb3的内容</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb3: "</span> <span class="token operator">+</span> sb3<span class="token punctuation">)</span><span class="token punctuation">;</span>       
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="string与stringbuilder的相互转换">String与StringBuilder的相互转换</h4>
<table>
<thead>
<tr class="header">
<th>方法</th>
<th>作用</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>sb1.toString()</td>
<td>根据StringBuilder类对象sb1内容返回一个String</td>
<td>String</td>
</tr>
<tr class="even">
<td>StringBuilder(String s)</td>
<td>通过构造方法把String转换为StringBuilder类</td>
<td></td>
</tr>
</tbody>
</table>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"Hello, World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" world~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//sb本身不会转换为String, 而是返回一个内容相同的String</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	
    
    <span class="token comment">//利用构造方法创建与String类对象str2内容相同的StringBuilder类对象sb2</span>
   	<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"Fuck"</span><span class="token punctuation">;</span>
    <span class="token class-name">StringBuilder</span> sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Tech</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>美赛建模2021</title>
    <url>/Tech/Math/Modeling/MCM_2021.html</url>
    <content><![CDATA[<div class="note info"><p><strong>说明</strong></p>
<p>本文是在<code>大三上寒假</code>时看网课所做笔记，后并未勘误，如有错误，请谅解</p>
</div>
<span id="more"></span>
<h1 id="评价模型方法">评价模型方法</h1>
<h2 id="层次分析法">层次分析法</h2>
<p>适用于：评价类问题：</p>
<ol type="1">
<li>我们评价的目标是什么</li>
<li>我们为了达到这个目标有哪些可选方案</li>
<li>评价的准则或者说指标是什么</li>
</ol>
<h3 id="基本步骤"><strong>基本步骤:</strong></h3>
<p>​ 因为对于一个问题的多个评价权重往往很难一次性给出，我们常用评价标准的两两比较给出，所以我们建立一个矩阵，通过矩阵来计算出权重。规定<span class="math inline">\(a_{ij}\)</span>指的是与<span class="math inline">\(j\)</span>指标相比，<span class="math inline">\(i\)</span>的重要程度。于是我们得到判断矩阵：</p>
<p><strong>判断矩阵</strong>(正互反矩阵)</p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/%7BF5F6288D-75B2-BDE3-9ECF-EA7C8BD53CCC%7D.png" /></p>
<p>但是判断矩阵有时并不符合逻辑，所以我们定义一致矩阵如下：</p>
<p><strong>一致矩阵</strong></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/%7BC6FE221D-6BAF-0AEA-A95F-992CA5530BC6%7D.png" /></p>
<p>但是对于大多数的判断矩阵我们很难说做到完全的一致，合理的稍微的不合逻辑是可以被接受的，故而我们建立如下评价标准：</p>
<p>事实上，我们不难看出，对于一个绝对的一致矩阵，它的行与行，列与列之间都是呈一定的比例的，这表示矩阵的秩为1，即<span class="math inline">\(r(A)=1\)</span>，根据有个引理可知，A将只有一个特征值，该特征值为矩阵的迹<span class="math inline">\(tr(A)\)</span>，对于一致矩阵，<span class="math inline">\(tr(A)=n\)</span>，其余的特征值均为0。</p>
<p>另外，我们很容易得到，特征值为n时，对应的特征向量刚好是<span class="math inline">\(k[\frac{1}{a_{11}},\frac{1}{a_{12}},\frac{1}{a_{13}}...\frac{1}{a_{1n}}]\)</span></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210123100925573.png" /></p>
<p><strong>对于满足一致性检验标准的判断矩阵进行权重计算</strong></p>
<p>方法一:</p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/%7B3446F105-4914-74B9-AD56-9FDF18F35BDF%7D.png" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/%7B576ADAA3-DBD5-8A27-E1E6-73BC2636E039%7D.png" /></p>
<p>方法二:</p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/%7B00B96A4B-F39B-E21C-F6F5-53F6BDE713E8%7D.png" /></p>
<p>方法三:(用的最多)</p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/%7B10379D32-7085-CA1E-442B-1297D9643CD5%7D.png" /></p>
<p>用excel计算最终得分的小技巧：</p>
<ol type="1">
<li>加 鼠标点击要带入的单元格和对应算术符号(*,+)</li>
<li>固定住权重的那一列，在每一个B2，B3之类的上面按一下f4</li>
<li>拖一下</li>
</ol>
<h3 id="论文中的具体步骤">论文中的具体步骤:</h3>
<h4 id="画层次分析法的结构组织图"><strong>画层次分析法的结构组织图</strong></h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/%7B228033CA-AC9B-2BF2-5775-682FEA5AE4FC%7D.png" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210123104835330.png" /></p>
<h4 id="构造判断矩阵">构造判断矩阵</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/%7B8A0C20B7-A4D5-865A-B788-5649210A8BFB%7D.png" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/%7B312AC0CE-4071-6617-A4DF-D2DD473E626D%7D.png" /></p>
<p>但往往都不会是专家填的，所以避开说明这个问题。下面为优秀范文示例：</p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/%7B64D09155-B59E-3859-3E58-DA6912D6B386%7D.png" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/%7B64D09155-B59E-3859-3E58-DA6912D6B386%7D.png" /></p>
<h4 id="进行一致性检验如果通过不了就进行微调">进行一致性检验（如果通过不了就进行微调）</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210123105707643.png" /></p>
<h4 id="计算权值">计算权值</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210123110414289.png" /></p>
<h3 id="局限性">局限性</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210123110613285.png" /></p>
<h2 id="topsis法">TOPSIS法</h2>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210124104109656.png" /></p>
<p>统一指标的类型:</p>
<ol type="1">
<li><p>将所有的指标转化为极大型称为<strong>指标正向化</strong>(最常用)</p>
<p>常见的极小型指标转换为极大型指标的公式</p></li>
</ol>
<p><span class="math display">\[
max - x
\]</span></p>
<ol start="2" type="1">
<li><p>为了消除不同指标的量纲影响，需要对已经正向化了的矩阵进行<strong>标准化</strong>处理</p>
<p>标准化处理的公式，将原正向化矩阵X转换为标准化矩阵Z</p></li>
</ol>
<p><span class="math display">\[
z_{ij}=\frac{x_{ij}}{\sqrt{\sum^n_{m=1}x_{mj}^2}}
\]</span></p>
<p>​ 3. 将标准化处理后的矩阵带入<strong>TOPSIS</strong>公式</p>
<p>​ TOPSIS原始形式： <span class="math display">\[
\frac{x-min}{max-x}
\]</span> ​ 进阶形式: <span class="math display">\[
\frac{x-min}{(max-x)+(x-min)}
\]</span></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210124103822637.png" /></p>
<h3 id="基本步骤-1">基本步骤</h3>
<h4 id="第一步正向化">第一步（正向化）</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210124104251166.png" /></p>
<p><strong>极小型==&gt;极大型</strong></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210124104406955.png" alt="image-20210124104406955" style="zoom:50%;" /></p>
<p><strong>中间型==&gt;极大型</strong></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210124104505109.png" alt="image-20210124104505109" style="zoom: 50%;" /></p>
<p><strong>区间型==&gt;极大型</strong></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210124110313797.png" alt="image-20210124110313797" style="zoom:50%;" /></p>
<h4 id="第二步标准化">第二步（标准化）</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210124105157908.png" alt="image-20210124105157908" style="zoom:50%;" /></p>
<h4 id="第三步计算得分并归一化">第三步（计算得分并归一化）</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210124105329521.png" alt="image-20210124105329521" style="zoom:50%;" /></p>
<p>特别注意!!!:warning:一般来说我们计算D的公式不会是这么简单的，我们一般会带上每个特征的权重(权重是由层次分析法确定的) <span class="math display">\[
D_i^+=\sqrt{\sum^m_{j=1}\omega_j(Z^+_j-z_{ij})^2} \\
D_i^-=\sqrt{\sum^m_{j=1}\omega_j(Z^-_j-z_{ij})^2}
\]</span> <img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210124112258354.png" alt="image-20210124112258354" style="zoom:50%;" /></p>
<h3 id="熵权法">熵权法</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210124122043754.png" alt="image-20210124122043754" style="zoom:50%;" /></p>
<h2 id="灰色关联分析美赛不要用">灰色关联分析（美赛不要用）</h2>
<h4 id="用于系统分析">用于系统分析</h4>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210125103141283.png" alt="image-20210125103141283" style="zoom:50%;" /></p>
<h3 id="基本原理">基本原理</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210125103243154.png" alt="image-20210125103243154" style="zoom:50%;" /></p>
<h2 id="模糊综合评价">模糊综合评价</h2>
<p>自己看Ipad上的讲义就好了，方法都是一样的，主要是分为两类:评价类，选择最优方案类</p>
<h1 id="数据补充类算法">数据补充类算法</h1>
<h2 id="一维插值算法插值数据少">一维插值算法（插值）（数据少）</h2>
<h3 id="分段三次hermite-插值法插值算法常用于数据较少的时候">分段三次Hermite 插值法(插值算法常用于数据较少的时候)</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210125180852122.png" alt="image-20210125180852122" style="zoom:50%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210125180943733.png" alt="image-20210125180943733" style="zoom:50%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210125181006001.png" alt="image-20210125181006001" style="zoom:50%;" /></p>
<h3 id="三次样条插值法也很常用">三次样条插值法(也很常用)</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210125191216292.png" alt="image-20210125191216292" style="zoom:80%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210125191051888.png" alt="image-20210125191051888" style="zoom:50%;" /></p>
<h2 id="n维插值算法">n维插值算法</h2>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210125191720159.png" alt="image-20210125191720159" style="zoom: 80%;" /></p>
<h2 id="拟合算法数据多">拟合算法（数据多）</h2>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126164257294.png" alt="image-20210126164257294" style="zoom:50%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126164211795.png" alt="image-20210126164211795" style="zoom:50%;" /></p>
<p>注意：只有线性函数可以使用<span class="math inline">\(R^2\)</span></p>
<p>何为线性?</p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126165602272.png" alt="image-20210126165602272" style="zoom:80%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126165650300.png" alt="image-20210126165650300" style="zoom:80%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126164527059.png" alt="image-20210126164527059" style="zoom:80%;" /></p>
<h3 id="代码">代码</h3>
<p>最好还是用<code>cftool</code>里面自动生成的function</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>clc
load  data1
<span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">)</span>
<span class="token comment">% 给x和y轴加上标签</span>
<span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'x的值'</span><span class="token punctuation">)</span>
<span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'y的值'</span><span class="token punctuation">)</span>
n <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
k <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token operator">.*</span>y<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sum</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token operator">.*</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token operator">.*</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sum</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token operator">.*</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token operator">.*</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
hold on <span class="token comment">% 继续在之前的图形上来画图形</span>
grid on <span class="token comment">% 显示网格线</span>

<span class="token comment">% % 画出y=kx+b的函数图像 plot(x,y)</span>
<span class="token comment">% % 传统的画法：模拟生成x和y的序列，比如要画出[0,5]上的图形</span>
<span class="token comment">% xx = 2.5: 0.1 :7  % 间隔设置的越小画出来的图形越准确</span>
<span class="token comment">% yy = k * xx + b  % k和b都是已知值</span>
<span class="token comment">% plot(xx,yy,'-')</span>

<span class="token comment">% 匿名函数的基本用法。</span>
<span class="token comment">% handle = @(arglist) anonymous_function</span>
<span class="token comment">% 其中handle为调用匿名函数时使用的名字。</span>
<span class="token comment">% arglist为匿名函数的输入参数，可以是一个，也可以是多个，用逗号分隔。</span>
<span class="token comment">% anonymous_function为匿名函数的表达式。</span>
<span class="token comment">% 举个小例子</span>
<span class="token comment">%  z=@(x,y) x^2+y^2; </span>
<span class="token comment">%  z(1,2) </span>
<span class="token comment">% % ans =  5</span>
<span class="token comment">% fplot函数可用于画出匿名一元函数的图形。</span>
<span class="token comment">% fplot(f,xinterval) 将匿名函数f在指定区间xinterval绘图。xinterval =  [xmin xmax] 表示定义域的范围</span>

f<span class="token operator">=</span><span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> k<span class="token operator">*</span>x<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token function">fplot</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2.5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">legend</span><span class="token punctuation">(</span><span class="token string">'样本数据'</span><span class="token punctuation">,</span><span class="token string">'拟合函数'</span><span class="token punctuation">,</span><span class="token string">'location'</span><span class="token punctuation">,</span><span class="token string">'SouthEast'</span><span class="token punctuation">)</span>

y_hat <span class="token operator">=</span> k<span class="token operator">*</span>x<span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token comment">% y的拟合值</span>
SSR <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y_hat<span class="token operator">-</span><span class="token function">mean</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">% 回归平方和</span>
SSE <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y_hat<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">% 误差平方和</span>
SST <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token function">mean</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">% 总体平方和</span>
SST<span class="token operator">-</span>SSE<span class="token operator">-</span>SSR   <span class="token comment">% 5.6843e-14  =   5.6843*10^-14   matlab浮点数计算的一个误差</span>
R_2 <span class="token operator">=</span> SSR <span class="token operator">/</span> SST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="cftool的使用"><code>cftool</code>的使用</h3>
<ol type="1">
<li><p>首先导入数据</p></li>
<li><p>进入<code>cftool</code></p></li>
<li><p>选择custom function</p></li>
<li><p>输入优化所得到的函数</p></li>
<li><p>如果不收敛，则调整初始化的值（fit option）</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>clc
year <span class="token operator">=</span> <span class="token number">1790</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">2000</span><span class="token punctuation">;</span>
population <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3.9</span><span class="token punctuation">,</span><span class="token number">5.3</span><span class="token punctuation">,</span><span class="token number">7.2</span><span class="token punctuation">,</span><span class="token number">9.6</span><span class="token punctuation">,</span><span class="token number">12.9</span><span class="token punctuation">,</span><span class="token number">17.1</span><span class="token punctuation">,</span><span class="token number">23.2</span><span class="token punctuation">,</span><span class="token number">31.4</span><span class="token punctuation">,</span><span class="token number">38.6</span><span class="token punctuation">,</span><span class="token number">50.2</span><span class="token punctuation">,</span><span class="token number">62.9</span><span class="token punctuation">,</span><span class="token number">76.0</span><span class="token punctuation">,</span><span class="token number">92.0</span><span class="token punctuation">,</span><span class="token number">106.5</span><span class="token punctuation">,</span><span class="token number">123.2</span><span class="token punctuation">,</span><span class="token number">131.7</span><span class="token punctuation">,</span><span class="token number">150.7</span><span class="token punctuation">,</span><span class="token number">179.3</span><span class="token punctuation">,</span><span class="token number">204.0</span><span class="token punctuation">,</span><span class="token number">226.5</span><span class="token punctuation">,</span><span class="token number">251.4</span><span class="token punctuation">,</span><span class="token number">281.4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">plot</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span>population<span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">)</span>
cftool  <span class="token comment">% 拟合工具箱</span>
<span class="token comment">% (1) X data 选择 year</span>
<span class="token comment">% (2) Y data 选择 population</span>
<span class="token comment">% (3) 拟合方式选择：Custom Equation (自定义方程)</span>
<span class="token comment">% (4) 修改下方的方框为：x = f(t) = xm/(1+(xm/3.9-1)*exp(-r*(t-1790)))</span>
<span class="token comment">% (5) 左边的result一栏最上面显示：Fit computation did not converge:即没有找到收敛解，右边的拟合图形也表明拟合结果不理想</span>
<span class="token comment">% (6) 点击Fit Options，修改非线性最小二乘估计法拟合的初始值(StartPoint), r修改为0.02，xm修改为500 </span>
<span class="token comment">% 有很多同学有疑惑，初始值为什么要这样设置？我们在未来学习微分方程模型和智能算法的课程时再来给大家介绍这里面蕴含的技巧。</span>
<span class="token comment">% (7) 此时左边的result一览得到了拟合结果：r = 0.02735, xm = 342.4</span>
<span class="token comment">% (8) 依次点击拟合工具箱的菜单栏最左边的文件—Generate Code(导出代码到时候可以放在你的论文附录)，可以得到一个未命名的脚本文件</span>
<span class="token comment">% (9) 在这个打开的脚本中按快捷键Ctrl+S，将这个文件保存到当前文件夹。</span>
<span class="token comment">% (10) 在现在这个文件中调用这个函数得到参数的拟合值和预测的效果</span>
<span class="token punctuation">[</span>fitresult<span class="token punctuation">,</span> gof<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createFit</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> population<span class="token punctuation">)</span>
t <span class="token operator">=</span> <span class="token number">2001</span><span class="token operator">:</span><span class="token number">2030</span><span class="token punctuation">;</span>
xm <span class="token operator">=</span> <span class="token number">342.4</span><span class="token punctuation">;</span>   
r <span class="token operator">=</span>  <span class="token number">0.02735</span><span class="token punctuation">;</span>
predictions <span class="token operator">=</span> xm<span class="token operator">./</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">(</span>xm<span class="token operator">./</span><span class="token number">3.9</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">.*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>r<span class="token operator">.*</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token number">1790</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">% 计算预测值（注意这里要写成点乘和点除,这样可以保证按照对应元素进行计算）</span>
<span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token function">plot</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span>population<span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span>t<span class="token punctuation">,</span>predictions<span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span>  <span class="token comment">% 绘制预测结果图</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>生成随机数的代码</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% （1）randi : 产生均匀分布的随机整数（i = int）  </span>
<span class="token comment">%产生一个1至10之间的随机整数矩阵，大小为2x5；</span>
s1 <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token comment">%产生一个-5至5之间的随机整数矩阵，大小为1x10；</span>
s2 <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>

<span class="token comment">%  （2） rand: 产生0至1之间均匀分布的随机数</span>
<span class="token comment">%产生一个0至1之间的随机矩阵，大小为1x5；</span>
s3 <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token comment">%产生一个a至b之间的随机矩阵，大小为1x5；  % a + (b-a) * rand(1,5); 如：a,b = 2,5</span>
s4<span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>

<span class="token comment">% （3）normrnd:产生正态分布的随机数</span>
<span class="token comment">%产生一个均值为0，标准差（方差开根号）为2的正态分布的随机矩阵，大小为3x4；</span>
s5 <span class="token operator">=</span> <span class="token function">normrnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>

<span class="token comment">% （4）roundn—任意位置四舍五入</span>
<span class="token comment">% 0个位 1十位  2百位 -1小数点后一位  </span>
a <span class="token operator">=</span> <span class="token number">3.1415</span>
<span class="token function">roundn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">% ans   =  3.1400</span>
<span class="token function">roundn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment">% ans   =  0</span>
a <span class="token operator">=</span><span class="token number">31415</span>
<span class="token function">roundn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">% ans  = 31400</span>
<span class="token function">roundn</span><span class="token punctuation">(</span><span class="token number">5.5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">%6</span>
<span class="token function">roundn</span><span class="token punctuation">(</span><span class="token number">5.5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">%10相关性分析</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h1 id="相关性分析">相关性分析</h1>
<p><strong>如果可以的话记得要进行描述性统计！！！</strong></p>
<p>可以使用<code>matlab</code>中的函数，也可以利用<code>spass</code>软件，直接得到描述性统计数据</p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126181949607.png" alt="image-20210126181949607" style="zoom: 50%;" /></p>
<h2 id="作出散点图查看呈现出什么样的关系">作出散点图(查看呈现出什么样的关系)</h2>
<p>直接使用<code>spass</code>中的矩阵散点图功能即可</p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126202855023.png" alt="image-20210126202855023" style="zoom:80%;" /></p>
<h2 id="计算各个特征之间的皮尔森pearson相关系数只对线性关系其作用">计算各个特征之间的皮尔森pearson相关系数（只对线性关系其作用）</h2>
<p>用<code>matlab</code>计算出数据之间的相关系数，并利用excel进行美化。</p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126204355384.png" alt="image-20210126204355384" style="zoom: 80%;" /></p>
<h2 id="假设检验简介">假设检验（简介）</h2>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126215020334.png" alt="image-20210126215020334" style="zoom:50%;" />、</p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126215245553.png" alt="image-20210126215245553" style="zoom:50%;" /></p>
<h3 id="主要还是要使用p值检验比较简单">主要还是要使用P值检验（比较简单）</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126215202396.png" alt="image-20210126215202396" style="zoom:50%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126215459185.png" alt="image-20210126215459185" style="zoom:50%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126215758361.png" alt="image-20210126215758361" style="zoom:80%;" /></p>
<h2 id="对皮尔逊相关系数进行假设检验">对皮尔逊相关系数进行假设检验</h2>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126221258147.png" alt="image-20210126221258147" style="zoom: 80%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126221331694.png" alt="image-20210126221331694" style="zoom:80%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126221408294.png" alt="image-20210126221408294" style="zoom:80%;" /></p>
<p>注：0.5*代表在90%的置信水平上拒绝原假设(显著异于0),0.5**代表在95%的置信水平上拒绝原假设(显著异于0)，0.5***代表在99%的置信水平上拒绝原假设(显著异于0)</p>
<p>可以直接使用<code>spass</code>进行P值计算，也可以使用<code>matlab</code>进行P值计算</p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126222857716.png" alt="image-20210126222857716" style="zoom:80%;" /></p>
<p><code>Spass</code>里面: 分析=&gt;相关性=&gt;双变量</p>
<h3 id="重要-进行假设检验需要满足的条件">重要: 进行假设检验需要满足的条件</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126222711099.png" alt="image-20210126222711099" style="zoom: 80%;" /></p>
<h2 id="样本数据的正态分布检验">样本数据的正态分布检验</h2>
<h3 id="大样本-jb检验">大样本: JB检验</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126225333046.png" alt="image-20210126225333046" style="zoom: 80%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126231116702.png" alt="image-20210126231116702" style="zoom: 80%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126231150521.png" alt="image-20210126231150521" style="zoom:80%;" /></p>
<h3 id="小样本shapiro-wilk检验">小样本:Shapiro-Wilk检验</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126231334656.png" alt="image-20210126231334656" style="zoom:80%;" /></p>
<h3 id="当数据量非常大时">当数据量非常大时</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126231727443.png" alt="image-20210126231727443" style="zoom:80%;" /></p>
<h2 id="spearman相关系数">Spearman相关系数</h2>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126232715805.png" alt="image-20210126232715805" style="zoom:80%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126234139072.png" alt="image-20210126234139072" style="zoom:80%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126234156040.png" alt="image-20210126234156040" style="zoom:80%;" /></p>
<h2 id="spearman相关系数的假设检验">Spearman相关系数的假设检验</h2>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126234238381.png" alt="image-20210126234238381" style="zoom:80%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126234254774.png" alt="image-20210126234254774" style="zoom:80%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126234317897.png" alt="image-20210126234317897" style="zoom:80%;" /></p>
<h3 id="代码-1">代码</h3>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>clc
load <span class="token string">'physical fitness test.mat'</span>  <span class="token comment">%文件名如果有空格隔开，那么需要加引号</span>
<span class="token comment">% https://ww2.mathworks.cn/help/matlab/ref/corrcoef.html</span>
<span class="token comment">%% 统计描述</span>
MIN <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">% 每一列的最小值</span>
MAX <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">% 每一列的最大值</span>
MEAN <span class="token operator">=</span> <span class="token function">mean</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">% 每一列的均值</span>
MEDIAN <span class="token operator">=</span> <span class="token function">median</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">%每一列的中位数</span>
SKEWNESS <span class="token operator">=</span> <span class="token function">skewness</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%每一列的偏度</span>
KURTOSIS <span class="token operator">=</span> <span class="token function">kurtosis</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">%每一列的峰度</span>
STD <span class="token operator">=</span> <span class="token function">std</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">% 每一列的标准差</span>
RESULT <span class="token operator">=</span> <span class="token punctuation">[</span>MIN<span class="token punctuation">;</span>MAX<span class="token punctuation">;</span>MEAN<span class="token punctuation">;</span>MEDIAN<span class="token punctuation">;</span>SKEWNESS<span class="token punctuation">;</span>KURTOSIS<span class="token punctuation">;</span>STD<span class="token punctuation">]</span>  <span class="token comment">%将这些统计量放到一个矩阵中表示</span>


<span class="token comment">%% 计算各列之间的相关系数</span>
<span class="token comment">% 在计算皮尔逊相关系数之前,一定要做出散点图来看两组变量之间是否有线性关系</span>
<span class="token comment">% 这里使用Spss比较方便: 图形 - 旧对话框 - 散点图/点图 - 矩阵散点图</span>

R <span class="token operator">=</span> <span class="token function">corrcoef</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span>   <span class="token comment">% correlation coefficient</span>


<span class="token comment">%% 假设检验部分</span>
x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token function">tpdf</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">%求t分布的概率密度值 28是自由度  </span>
<span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">)</span>
grid on  <span class="token comment">% 在画出的图上加上网格线</span>
hold on  <span class="token comment">% 保留原来的图，以便继续在上面操作</span>
<span class="token comment">% matlab可以求出临界值，函数如下</span>
<span class="token function">tinv</span><span class="token punctuation">(</span><span class="token number">0.975</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span>    <span class="token comment">%    2.0484</span>
<span class="token comment">% 这个函数是累积密度函数cdf的反函数</span>
<span class="token function">plot</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2.048</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2.048</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">tpdf</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.048</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'r-'</span><span class="token punctuation">)</span>
<span class="token function">plot</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2.048</span><span class="token punctuation">,</span><span class="token number">2.048</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">tpdf</span><span class="token punctuation">(</span><span class="token number">2.048</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'r-'</span><span class="token punctuation">)</span>


<span class="token comment">%% 计算p值</span>
x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token function">tpdf</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">)</span>
grid on 
hold on
<span class="token comment">% 画线段的方法</span>
<span class="token function">plot</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3.055</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3.055</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">tpdf</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.055</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'r-'</span><span class="token punctuation">)</span>
<span class="token function">plot</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3.055</span><span class="token punctuation">,</span><span class="token number">3.055</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">tpdf</span><span class="token punctuation">(</span><span class="token number">3.055</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'r-'</span><span class="token punctuation">)</span>
<span class="token function">disp</span><span class="token punctuation">(</span><span class="token string">'该检验值对应的p值为：'</span><span class="token punctuation">)</span>
<span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token function">tcdf</span><span class="token punctuation">(</span><span class="token number">3.055</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">%双侧检验的p值要乘以2</span>

<span class="token comment">%% 计算各列之间的相关系数以及p值</span>
<span class="token punctuation">[</span>R<span class="token punctuation">,</span>P<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">corrcoef</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span>
<span class="token comment">% 在EXCEL表格中给数据右上角标上显著性符号吧</span>
P <span class="token operator">&lt;</span> <span class="token number">0.01</span>  <span class="token comment">% 标记3颗星的位置</span>
<span class="token punctuation">(</span>P <span class="token operator">&lt;</span> <span class="token number">0.05</span><span class="token punctuation">)</span> <span class="token operator">.*</span> <span class="token punctuation">(</span>P <span class="token operator">></span> <span class="token number">0.01</span><span class="token punctuation">)</span>  <span class="token comment">% 标记2颗星的位置</span>
<span class="token punctuation">(</span>P <span class="token operator">&lt;</span> <span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token operator">.*</span> <span class="token punctuation">(</span>P <span class="token operator">></span> <span class="token number">0.05</span><span class="token punctuation">)</span> <span class="token comment">% % 标记1颗星的位置</span>
<span class="token comment">% 也可以使用Spss操作哦 看我演示</span>

<span class="token comment">%% 正态分布检验</span>
<span class="token comment">% 正态分布的偏度和峰度</span>
x <span class="token operator">=</span> <span class="token function">normrnd</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">% 生成100*1的随机向量，每个元素是均值为2，标准差为3的正态分布</span>
<span class="token function">skewness</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">%偏度</span>
<span class="token function">kurtosis</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">%峰度</span>
<span class="token function">qqplot</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    
<span class="token comment">% 检验第一列数据是否为正态分布</span>
<span class="token punctuation">[</span>h<span class="token punctuation">,</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">jbtest</span><span class="token punctuation">(</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.05</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>h<span class="token punctuation">,</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">jbtest</span><span class="token punctuation">(</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.01</span><span class="token punctuation">)</span>

<span class="token comment">% 用循环检验所有列的数据</span>
n_c <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>Test<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">% number of column 数据的列数</span>
H <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">% 初始化节省时间和消耗</span>
P <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>n_c
    <span class="token punctuation">[</span>h<span class="token punctuation">,</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">jbtest</span><span class="token punctuation">(</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">H</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span>h<span class="token punctuation">;</span>
    <span class="token function">P</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span>p<span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token function">disp</span><span class="token punctuation">(</span>H<span class="token punctuation">)</span>
<span class="token function">disp</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span>

<span class="token comment">% Q-Q图</span>
<span class="token function">qqplot</span><span class="token punctuation">(</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">%% 斯皮尔曼相关系数</span>
X <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">8</span> <span class="token number">4</span> <span class="token number">7</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token string">'  % 一定要是列向量哦，一撇'</span>表示求转置
Y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">10</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">'</span>
<span class="token comment">% 第一种计算方法</span>
<span class="token number">1</span><span class="token operator">-</span><span class="token number">6</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">0.25</span><span class="token operator">+</span><span class="token number">0.25</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">24</span>

<span class="token comment">% 第二种计算方法</span>
coeff <span class="token operator">=</span> <span class="token function">corr</span><span class="token punctuation">(</span>X <span class="token punctuation">,</span> Y <span class="token punctuation">,</span> <span class="token string">'type'</span> <span class="token punctuation">,</span> <span class="token string">'Spearman'</span><span class="token punctuation">)</span>
<span class="token comment">% 等价于：</span>
RX <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">5</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">1</span><span class="token punctuation">]</span>
RY <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">4.5</span> <span class="token number">3</span> <span class="token number">4.5</span> <span class="token number">2</span><span class="token punctuation">]</span>
R <span class="token operator">=</span> <span class="token function">corrcoef</span><span class="token punctuation">(</span>RX<span class="token punctuation">,</span>RY<span class="token punctuation">)</span>

<span class="token comment">% 计算矩阵各列的斯皮尔曼相关系数</span>
R <span class="token operator">=</span> <span class="token function">corr</span><span class="token punctuation">(</span>Test<span class="token punctuation">,</span> <span class="token string">'type'</span> <span class="token punctuation">,</span> <span class="token string">'Spearman'</span><span class="token punctuation">)</span>

<span class="token comment">% 大样本下的假设检验</span>
<span class="token comment">% 计算检验值</span>
<span class="token function">disp</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">590</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.0301</span><span class="token punctuation">)</span>
<span class="token comment">% 计算p值</span>
<span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token function">normcdf</span><span class="token punctuation">(</span><span class="token number">0.7311</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">% normcdf用来计算标准正态分布的累积概率密度函数</span>

<span class="token comment">% 直接给出相关系数和p值</span>
<span class="token punctuation">[</span>R<span class="token punctuation">,</span>P<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">corr</span><span class="token punctuation">(</span>Test<span class="token punctuation">,</span> <span class="token string">'type'</span> <span class="token punctuation">,</span> <span class="token string">'Spearman'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="基本步骤-2">基本步骤:</h3>
<ol type="1">
<li><p>对数据进行描述性统计</p></li>
<li><p>对数据进行正态分布检验</p></li>
<li><p>如果正态检验分布通过</p>
<ol type="1">
<li>进行pearson相关系数计算</li>
<li>进行pearson相关系数假设检验</li>
</ol></li>
<li><p>如果正态分布没有通过</p>
<ol type="1">
<li>进行spearson相关系数计算</li>
</ol></li>
</ol>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210126234047746.png" alt="image-20210126234047746" style="zoom:80%;" /></p>
<h1 id="回归分析模型">回归分析模型</h1>
<h2 id="回归简介">回归简介</h2>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210127161914066.png" alt="image-20210127161914066" style="zoom:80%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210127161938470.png" alt="image-20210127161938470" style="zoom:80%;" /></p>
<p>横截面:时间相同其他研究对象不同的数据</p>
<p>时间序列顺序:其他研究对象相同但是时间不同的数据</p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210127162835419.png" alt="image-20210127162835419" style="zoom:80%;" /></p>
<h2 id="内生性问题">内生性问题</h2>
<p><strong>重点</strong>：<strong>核心变量</strong> 和 <strong>控制变量</strong></p>
<h3 id="线性回归模型">线性回归模型</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210127163346307.png" alt="image-20210127163346307" style="zoom:80%;" /></p>
<h3 id="回归系数的解释">回归系数的解释</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210127195552107.png" alt="image-20210127195552107" style="zoom:80%;" /></p>
<h3 id="什么是内生性就是误差项与自变量x相关系数不为0">什么是内生性（就是误差项与自变量x相关系数不为0）</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210127210351609.png" alt="image-20210127210351609" style="zoom:80%;" /></p>
<h3 id="如何解决内生性引入核心变量">如何解决内生性（引入核心变量）</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210127210806993.png" alt="image-20210127210806993" style="zoom:80%;" /></p>
<h2 id="回归模型">回归模型</h2>
<h3 id="回归系数的解释进阶版">回归系数的解释（进阶版）</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210127211318348.png" alt="image-20210127211318348" style="zoom:80%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210127211341553.png" alt="image-20210127211341553" style="zoom:80%;" /></p>
<h3 id="如何将定性变量转化为定量变量虚拟变量">如何将定性变量转化为定量变量（虚拟变量）</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210127211907454.png" alt="image-20210127211907454" style="zoom:80%;" /></p>
<h3 id="多分类虚拟变量设置">多分类虚拟变量设置</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210127212841022.png" alt="image-20210127212841022" style="zoom:80%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210127212821281.png" alt="image-20210127212821281" style="zoom:80%;" /></p>
<h3 id="含有交互项的自变量自变量之间存在某种关系">含有交互项的自变量（自变量之间存在某种关系）</h3>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210127213539323.png" alt="image-20210127213539323" style="zoom:80%;" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/image-20210131085205990.png" alt="image-20210131085205990" style="zoom:80%;" /></p>
]]></content>
      <categories>
        <category>Tech</category>
        <category>Math</category>
        <category>Modeling</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>Mathematical_modeling</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo技巧(一)Plugin</title>
    <url>/Hexo/hexo_trick_1.html</url>
    <content><![CDATA[<div class="note info"><p><strong>Attention</strong></p>
<p>本文撰写时的环境为<code>Hexo Version:5.4.0</code>,<code>Next Version:8.2.2</code></p>
</div>
<p><code>Next</code>主题或者说<code>HEXO</code>官方其实是提供了很多可以增加博文美观的plugin，戳<a href="https://theme-next.js.org/docs/tag-plugins" title="" target="_blank">此处</a>查看Next官方文档，这篇文章将介绍部分实用的<code>Next plugins</code>以帮助使用者们更好的使用<code>Hexo</code>进行写作，戳<a href="https://theme-next.js.org/docs/tag-plugins" title="" target="_blank">此处</a>查看Hexo官方文档提供的<code>plugins</code></p>
<ol type="1">
<li>Button</li>
<li>Group Pictures</li>
<li>Label</li>
<li>Link Grid</li>
<li>Note</li>
<li>PDF</li>
<li>Tabs</li>
</ol>
<span id="more"></span>
<h2 id="button">Button</h2>
<h3 id="作用">作用：</h3>
<p>将链接封装在一个button中以提高互动性和美观程度。</p>
<h3 id="用法">用法：</h3>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% button url, text, icon [class], [title] %&#125;
<span class="token comment">&lt;!-- Tag Alias --></span>
&#123;% btn url, text, icon [class], [title] %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>url</code>: 绝对路径或者相对路径，当然也可以是网络地址</li>
<li><code>text</code>: Button中的文字内容. （和icon两者任选其一即可，也可以同时使用两者）</li>
<li><code>icon</code>: Button中的Awesome Icon （和text两者任选其一）</li>
<li><code>[class]</code>: 可选项，icon的size(es): fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5x（从小到大）</li>
<li><code>[title]</code>:可选项， 鼠标悬停时的提示文字.</li>
</ul>
<h3 id="示例">示例：</h3>
<h4 id="button-with-text">Button with text</h4>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% btn #, Text %&#125;
&#123;% btn #, Text &amp; Title,, Title %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<a class="btn" href="#">Text</a>
<a class="btn" href="#" title="Title">Text & Title</a>
<h4 id="button-with-icon">Button with icon</h4>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"># 使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> 进行换行控制
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;% btn #,, home fa-5x %&#125;&#123;% btn #,, home fa-5x %&#125;&#123;% btn #,, home fa-5x %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;% btn #,, home fa-4x %&#125;&#123;% btn #,, home fa-4x %&#125;&#123;% btn #,, home fa-4x %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;% btn #,, home fa-3x %&#125;&#123;% btn #,, home fa-3x %&#125;&#123;% btn #,, home fa-3x %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;% btn #,, home fa-2x %&#125;&#123;% btn #,, home fa-2x %&#125;&#123;% btn #,, home fa-2x %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;% btn #,, home fa-lg %&#125;&#123;% btn #,, home fa-lg %&#125;&#123;% btn #,, home fa-lg %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;% btn #,, home %&#125;&#123;% btn #,, home %&#125;&#123;% btn #,, home %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div>
<a class="btn" href="#"><i class="fa fa-home fa-5x"></i></a>
<a class="btn" href="#"><i class="fa fa-home fa-5x"></i></a>
<a class="btn" href="#"><i class="fa fa-home fa-5x"></i></a>
<div>
<div>
<a class="btn" href="#"><i class="fa fa-home fa-4x"></i></a>
<a class="btn" href="#"><i class="fa fa-home fa-4x"></i></a>
<a class="btn" href="#"><i class="fa fa-home fa-4x"></i></a>
<div>
<div>
<a class="btn" href="#"><i class="fa fa-home fa-3x"></i></a>
<a class="btn" href="#"><i class="fa fa-home fa-3x"></i></a>
<a class="btn" href="#"><i class="fa fa-home fa-3x"></i></a>
<div>
<div>
<a class="btn" href="#"><i class="fa fa-home fa-2x"></i></a>
<a class="btn" href="#"><i class="fa fa-home fa-2x"></i></a>
<a class="btn" href="#"><i class="fa fa-home fa-2x"></i></a>
<div>
<div>
<a class="btn" href="#"><i class="fa fa-home fa-lg"></i></a>
<a class="btn" href="#"><i class="fa fa-home fa-lg"></i></a>
<a class="btn" href="#"><i class="fa fa-home fa-lg"></i></a>
<div>
<div>
<a class="btn" href="#"><i class="fa fa-home"></i></a>
<a class="btn" href="#"><i class="fa fa-home"></i></a>
<a class="btn" href="#"><i class="fa fa-home"></i></a>
<div>


<h4 id="button-with-text-icon">Button with text &amp; icon</h4>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;% btn #, Text &amp; Icon (buggy), home %&#125;
&#123;% btn #, Text &amp; Icon (fixed width), home fa-fw %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>
<a class="btn" href="#"><i class="fa fa-home"></i>Text & Icon (buggy)</a>
<a class="btn" href="#"><i class="fa fa-home fa-fw"></i>Text & Icon (fixed width)</a>
</p>
<h4 id="button-inside-text">Button inside text</h4>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">Lorem &#123;% btn #, Lorem, home fa-fw fa-lg %&#125; ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident &#123;% btn #, Ipsum, home fa-fw fa-lg %&#125;, sunt in culpa qui officia deserunt mollit anim id est laborum.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>Lorem <a class="btn" href="#"><i class="fa fa-home fa-fw fa-lg"></i>Lorem</a> ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident <a class="btn" href="#"><i class="fa fa-home fa-fw fa-lg"></i>Ipsum</a>, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
<h4 id="button-inside-other-tag">Button inside other tag</h4>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% note info %&#125;
&#123;% btn #, Text &amp; Icon, home fa-fw %&#125;

&#123;% btn #,, home, Title %&#125;&#123;% btn #, Text %&#125;

[Link](#)
&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info"><p><a class="btn" href="#"><i class="fa fa-home fa-fw"></i>Text &amp; Icon</a></p>
<p><a class="btn" href="#" title="Title"><i class="fa fa-home"></i></a><a class="btn" href="#">Text</a></p>
<p><a href="#">Link</a></p>
</div>
<h4 id="button-margin">Button margin</h4>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;% btn #,, heading %&#125;&#123;% btn #,, fab fa-edge %&#125;&#123;% btn #,, times %&#125;&#123;% btn #,, circle-notch %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;% btn #,, italic %&#125;&#123;% btn #,, fab fa-scribd %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;% btn #,, fab fa-google %&#125;&#123;% btn #,, fab fa-chrome %&#125;&#123;% btn #,, fab fa-opera %&#125;&#123;% btn #,, gem fa-rotate-270 %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<div class="text-center">
<div>
<a class="btn" href="#"><i class="fa fa-heading"></i></a>
<a class="btn" href="#"><i class="fab fa-edge"></i></a>
<a class="btn" href="#"><i class="fa fa-times"></i></a>
<a class="btn" href="#"><i class="fa fa-circle-notch"></i></a>
</div>
<div>
<a class="btn" href="#"><i class="fa fa-italic"></i></a>
<a class="btn" href="#"><i class="fab fa-scribd"></i></a>
</div>
<div>
<a class="btn" href="#"><i class="fab fa-google"></i></a>
<a class="btn" href="#"><i class="fab fa-chrome"></i></a>
<a class="btn" href="#"><i class="fab fa-opera"></i></a>
<a class="btn" href="#"><i class="fa fa-gem fa-rotate-270"></i></a>
</div>
</div>
<h4 id="button-with-relative-url">Button with relative URL</h4>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;% btn #, Previous Chapter, arrow-left fa-fw fa-lg, Previous Chapter (Full Image) %&#125; &#123;% btn #, Next Chapter, arrow-right fa-fw fa-lg, Next Chapter (Label) %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<div class="text-center">
<a class="btn" href="#" title="Previous Chapter (Full Image)"><i class="fa fa-arrow-left fa-fw fa-lg"></i>Previous Chapter</a>
<a class="btn" href="#" title="Next Chapter (Label)"><i class="fa fa-arrow-right fa-fw fa-lg"></i>Next Chapter</a>
</div>
<h4 id="button-with-absolute-url">Button with absolute URL</h4>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;% btn https://github.com, GitHub, fab fa-github fa-fw fa-lg, GitHub %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<div class="text-center">
<a class="btn" href="https://github.com" title="GitHub"><i class="fab fa-github fa-fw fa-lg"></i>GitHub</a>
</div>
<h2 id="group-pictures">Group Pictures</h2>
<h3 id="作用-1">作用：</h3>
<p>按照一定的结构排列一组图片，以增加美感。</p>
<h3 id="用法-1">用法：</h3>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% grouppicture [number]-[layout] %&#125;&#123;% endgrouppicture %&#125;
<span class="token comment">&lt;!-- Tag Alias --></span>
&#123;% gp [number]-[layout] %&#125;&#123;% endgp %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>[number]</code> : 可选项，图片的总数量</li>
<li><code>[layout]</code> : 可选项，图片的布局结构</li>
</ul>
<p><code>[layout]</code>如下：</p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/group-picture-1.png" /></p>
<p><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/group-picture-2.png" /></p>
<h3 id="示例-1">示例：</h3>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token punctuation">&#123;</span>% grouppicture 6-3 %<span class="token punctuation">&#125;</span>
<span class="token selector">![](https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/next.svg)
![](https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/next.svg)
![](https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/next.svg)
![](https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/next.svg)
![](https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/next.svg)
![](https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/next.svg)</span>
<span class="token punctuation">&#123;</span>% endgrouppicture %<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/next.svg" /></div><div class="group-picture-column"><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/next.svg" /></div></div><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/next.svg" /></div></div><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/next.svg" /></div><div class="group-picture-column"><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/next.svg" /></div><div class="group-picture-column"><img data-src="https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/next.svg" /></div></div></div>
<h2 id="label">Label</h2>
<h3 id="作用-2">作用：</h3>
<p>对文字加上标签，突出重点，增加文章可读性。</p>
<h3 id="用法-2">用法：</h3>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% label [class]@text %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><code>[class]</code> : 可选项，支持的值有: <code>default</code> | <code>primary</code> | <code>success</code> | <code>info</code> | <code>warning</code> | <code>danger</code>.默认为<code>default</code></li>
<li><code>text</code> : <code>@text</code> can be specified with or without space E.g. <code>success @text</code> is the same as <code>success@text</code>.</li>
</ul>
<h3 id="示例-2">示例：</h3>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">Lorem &#123;% label @ipsum %&#125; &#123;% label primary@dolor sit %&#125; amet, consectetur &#123;% label success@adipiscing elit, %&#125; sed &#123;% label info@do eiusmod %&#125; tempor incididunt ut labore et dolore magna aliqua.

Ut enim *&#123;% label warning @ad %&#125;* minim veniam, quis **&#123;% label danger@nostrud %&#125;** exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

Duis aute irure dolor in reprehenderit in voluptate ~~&#123;% label default @velit %&#125;~~ <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mark</span><span class="token punctuation">></span></span>esse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mark</span><span class="token punctuation">></span></span> cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Lorem <mark class="label ">ipsum</mark> <mark class="label primary">dolor sit</mark> amet, consectetur <mark class="label success">adipiscing elit,</mark> sed <mark class="label info">do eiusmod</mark> tempor incididunt ut labore et dolore magna aliqua.</p>
<p>Ut enim <em><mark class="label warning">ad</mark></em> minim veniam, quis <strong><mark class="label danger">nostrud</mark></strong> exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
<p>Duis aute irure dolor in reprehenderit in voluptate <del><mark class="label default">velit</mark></del> <mark>esse</mark> cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
<h2 id="link-grid">Link Grid</h2>
<h3 id="作用-3">作用：</h3>
<p>动态的<code>link grid</code>，增加互动性</p>
<h3 id="用法-3">用法：</h3>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token punctuation">&#123;</span>% linkgrid [image] [delimiter] [comment] %<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>% endlinkgrid %<span class="token punctuation">&#125;</span>
<span class="token selector">&lt;!-- Tag Alias --></span>
<span class="token punctuation">&#123;</span>% lg [image] [delimiter] [comment] %<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>% endlg %<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>[image]</code> : 可选项， 图片的URL地址.</li>
<li><code>[delimiter]</code> : 可选项，如果不给出分隔符的话默认分隔符为<code>|</code>，可以在此项指定分隔符.</li>
<li><code>[comment]</code> : 可选项，如果不给出的注释参数的话默认分隔符为<code>%</code>，可以在此项指定注释参数.</li>
</ul>
<h3 id="示例-3">示例：</h3>
<h4 id="使用方式1">使用方式1</h4>
<pre class="line-numbers language-none"><code class="language-none">&#123;% linkgrid %&#125;
Theme NexT | https:&#x2F;&#x2F;theme-next.js.org&#x2F; | Stay Simple. Stay NexT. | https:&#x2F;&#x2F;picgo-1301748200.cos.ap-chengdu.myqcloud.com&#x2F;apple-touch-icon-next.png
Theme NexT | https:&#x2F;&#x2F;theme-next.js.org&#x2F; | Stay Simple. Stay NexT. | https:&#x2F;&#x2F;picgo-1301748200.cos.ap-chengdu.myqcloud.com&#x2F;apple-touch-icon-next.png
Theme NexT | https:&#x2F;&#x2F;theme-next.js.org&#x2F; | Stay Simple. Stay NexT. | https:&#x2F;&#x2F;picgo-1301748200.cos.ap-chengdu.myqcloud.com&#x2F;apple-touch-icon-next.png
Theme NexT | https:&#x2F;&#x2F;theme-next.js.org&#x2F; | Stay Simple. Stay NexT. | https:&#x2F;&#x2F;picgo-1301748200.cos.ap-chengdu.myqcloud.com&#x2F;apple-touch-icon-next.png
% Theme NexT | https:&#x2F;&#x2F;theme-next.js.org&#x2F; | Stay Simple. Stay NexT. | https:&#x2F;&#x2F;picgo-1301748200.cos.ap-chengdu.myqcloud.com&#x2F;apple-touch-icon-next.png
&#123;% endlinkgrid %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="link-grid"><div class="link-grid-container">
<div class="link-grid-image" style="background-image: url(https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/apple-touch-icon-next.png);"></div>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div><div class="link-grid-container">
<div class="link-grid-image" style="background-image: url(https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/apple-touch-icon-next.png);"></div>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div><div class="link-grid-container">
<div class="link-grid-image" style="background-image: url(https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/apple-touch-icon-next.png);"></div>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div><div class="link-grid-container">
<div class="link-grid-image" style="background-image: url(https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/apple-touch-icon-next.png);"></div>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div></div>
<h4 id="使用方式2">使用方式2</h4>
<pre class="line-numbers language-none"><code class="language-none">&#123;% lg &#x2F;images&#x2F;apple-touch-icon-next.png , %&#125;
Theme NexT , https:&#x2F;&#x2F;theme-next.js.org&#x2F; , Stay Simple. Stay NexT. , https:&#x2F;&#x2F;picgo-1301748200.cos.ap-chengdu.myqcloud.com&#x2F;apple-touch-icon-next.png
Theme NexT , https:&#x2F;&#x2F;theme-next.js.org&#x2F; , Stay Simple. Stay NexT. , https:&#x2F;&#x2F;picgo-1301748200.cos.ap-chengdu.myqcloud.com&#x2F;apple-touch-icon-next.png
Theme NexT , https:&#x2F;&#x2F;theme-next.js.org&#x2F; , Stay Simple. Stay NexT. , https:&#x2F;&#x2F;picgo-1301748200.cos.ap-chengdu.myqcloud.com&#x2F;apple-touch-icon-next.png
% Theme NexT , https:&#x2F;&#x2F;theme-next.js.org&#x2F; , Stay Simple. Stay NexT. , https:&#x2F;&#x2F;picgo-1301748200.cos.ap-chengdu.myqcloud.com&#x2F;apple-touch-icon-next.png
&#123;% endlg %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="link-grid"><div class="link-grid-container">
<div class="link-grid-image" style="background-image: url(https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/apple-touch-icon-next.png);"></div>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div><div class="link-grid-container">
<div class="link-grid-image" style="background-image: url(https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/apple-touch-icon-next.png);"></div>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div><div class="link-grid-container">
<div class="link-grid-image" style="background-image: url(https://picgo-1301748200.cos.ap-chengdu.myqcloud.com/apple-touch-icon-next.png);"></div>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div></div>
<h2 id="note">Note</h2>
<h3 id="作用-4">作用：</h3>
<p>动态的<code>link grid</code>，增加互动性</p>
<h3 id="设置">设置：</h3>
<p>打开主题配置文件<code>next/_config.yml</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">note</span><span class="token punctuation">:</span>
  <span class="token comment"># Note tag style values:</span>
  <span class="token comment">#  - simple    bs-callout old alert style. Default.</span>
  <span class="token comment">#  - modern    bs-callout new (v2-v3) alert style.</span>
  <span class="token comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span>
  <span class="token comment">#  - disabled  disable all CSS styles import of note tag.</span>
  <span class="token key atrule">style</span><span class="token punctuation">:</span> simple
  <span class="token key atrule">icons</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span>
  <span class="token comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span>
  <span class="token key atrule">light_bg_offset</span><span class="token punctuation">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="用法-4">用法：</h3>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token punctuation">&#123;</span>% note [class] [no-icon] [summary] %<span class="token punctuation">&#125;</span>
<span class="token selector">Any content (support inline tags too).</span>
<span class="token punctuation">&#123;</span>% endnote %<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>[class]</code> : 可选项，支持的值有: default | primary | success | info | warning | danger.</li>
<li><code>[no-icon]</code> : 可选项，取消icon.</li>
<li><code>[summary]</code> : 可选项，总结note.</li>
</ul>
<h3 id="示例-4">示例：</h3>
<h4 id="简单示例">简单示例</h4>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token punctuation">&#123;</span>% note %<span class="token punctuation">&#125;</span>
<span class="token selector">#### Header
(without define class style)</span>
<span class="token punctuation">&#123;</span>% endnote %<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note "><h4 id="header">Header</h4>
<p>(without define class style)</p>
</div>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% note default %&#125;
<span class="token title important"><span class="token punctuation">####</span> Default Header</span>
Welcome to <span class="token url">[<span class="token content">Hexo!</span>](<span class="token url">https://hexo.io</span>)</span>
&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note default"><h4 id="default-header">Default Header</h4>
<p>Welcome to <a href="https://hexo.io">Hexo!</a></p>
</div>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% note primary %&#125;
<span class="token title important"><span class="token punctuation">####</span> Primary Header</span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">Welcome</span><span class="token punctuation">**</span></span> to <span class="token url">[<span class="token content">Hexo!</span>](<span class="token url">https://hexo.io</span>)</span>
&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note primary"><h4 id="primary-header">Primary Header</h4>
<p><strong>Welcome</strong> to <a href="https://hexo.io">Hexo!</a></p>
</div>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% note info %&#125;
<span class="token title important"><span class="token punctuation">####</span> Info Header</span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">Welcome</span><span class="token punctuation">**</span></span> to <span class="token url">[<span class="token content">Hexo!</span>](<span class="token url">https://hexo.io</span>)</span>
&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info"><h4 id="info-header">Info Header</h4>
<p><strong>Welcome</strong> to <a href="https://hexo.io">Hexo!</a></p>
</div>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% note success %&#125;
<span class="token title important"><span class="token punctuation">####</span> Success Header</span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">Welcome</span><span class="token punctuation">**</span></span> to <span class="token url">[<span class="token content">Hexo!</span>](<span class="token url">https://hexo.io</span>)</span>
&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note success"><h4 id="success-header">Success Header</h4>
<p><strong>Welcome</strong> to <a href="https://hexo.io">Hexo!</a></p>
</div>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% note warning %&#125;
<span class="token title important"><span class="token punctuation">####</span> Warning Header</span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">Welcome</span><span class="token punctuation">**</span></span> to <span class="token url">[<span class="token content">Hexo!</span>](<span class="token url">https://hexo.io</span>)</span>
&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note warning"><h4 id="warning-header">Warning Header</h4>
<p><strong>Welcome</strong> to <a href="https://hexo.io">Hexo!</a></p>
</div>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% note danger %&#125;
<span class="token title important"><span class="token punctuation">####</span> Danger Header</span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">Welcome</span><span class="token punctuation">**</span></span> to <span class="token url">[<span class="token content">Hexo!</span>](<span class="token url">https://hexo.io</span>)</span>
&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note danger"><h4 id="danger-header">Danger Header</h4>
<p><strong>Welcome</strong> to <a href="https://hexo.io">Hexo!</a></p>
</div>
<h4 id="高级用法">高级用法</h4>
<h5 id="no-icon-note">No icon note</h5>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% note info no-icon %&#125;
<span class="token title important"><span class="token punctuation">####</span> No icon note</span>
Note <span class="token bold"><span class="token punctuation">**</span><span class="token content">without</span><span class="token punctuation">**</span></span> icon: <span class="token code keyword">`note info no-icon`</span>
&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info no-icon"><h4 id="no-icon-note">No icon note</h4>
<p>Note <strong>without</strong> icon: <code>note info no-icon</code></p>
</div>
<h5 id="note-with-summary">Note with summary</h5>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% note primary This is a summary %&#125;
<span class="token title important"><span class="token punctuation">####</span> Details and summary</span>
Note with summary: <span class="token code keyword">`note primary This is a summary`</span>
&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<details class="note primary"><summary><p>This is a summary</p>
</summary>
<h4 id="details-and-summary">Details and summary</h4>
<p>Note with summary: <code>note primary This is a summary</code></p>

</details>
<h5 id="no-icon-with-summary">No icon with Summary</h5>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% note info no-icon This is a summary %&#125;
<span class="token title important"><span class="token punctuation">####</span> Details and summary (No icon)</span>
Note with summary: <span class="token code keyword">`note info no-icon This is a summary`</span>
&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<details class="note info no-icon"><summary><p>This is a summary</p>
</summary>
<h4 id="details-and-summary-no-icon">Details and summary (No icon)</h4>
<p>Note with summary: <code>note info no-icon This is a summary</code></p>

</details>
<h5 id="codeblock-in-note">Codeblock in note</h5>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% note success %&#125;
<span class="token title important"><span class="token punctuation">####</span> Codeblock in note</span>
&#123;% code %&#125;
code block in note tag
code block in note tag
code block in note tag
&#123;% endcode %&#125;
&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note success"><h4 id="codeblock-in-note">Codeblock in note</h4>
<pre class="line-numbers language-none"><code class="language-none">code block in note tag
code block in note tag
code block in note tag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</div>
<h5 id="list-in-note">List in note</h5>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% note default %&#125;
<span class="token title important"><span class="token punctuation">####</span> Lists in note</span>
<span class="token list punctuation">*</span> ul
<span class="token list punctuation">*</span> ul
    <span class="token list punctuation">*</span> ul
    <span class="token list punctuation">*</span> ul
<span class="token list punctuation">*</span> ul

<span class="token list punctuation">1.</span> ol
<span class="token list punctuation">2.</span> ol
    <span class="token list punctuation">1.</span> ol
    <span class="token list punctuation">2.</span> ol
<span class="token list punctuation">3.</span> ol
&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note default"><h4 id="lists-in-note">Lists in note</h4>
<ul>
<li>ul</li>
<li>ul
<ul>
<li>ul</li>
<li>ul</li>
</ul></li>
<li>ul</li>
</ul>
<ol type="1">
<li>ol</li>
<li>ol
<ol type="1">
<li>ol</li>
<li>ol</li>
</ol></li>
<li>ol</li>
</ol>
</div>
<h5 id="table-in-note">Table in note</h5>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">####</span> Table in Note</span>
&#123;% note default %&#125;
| 1 | 2 |
| - | - |
| 3 | 4 |
| 5 | 6 |
| 7 | 8 |
&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="table-in-note-1">Table in Note</h4>
<div class="note default"><table>
<thead>
<tr class="header">
<th>1</th>
<th>2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>3</td>
<td>4</td>
</tr>
<tr class="even">
<td>5</td>
<td>6</td>
</tr>
<tr class="odd">
<td>7</td>
<td>8</td>
</tr>
</tbody>
</table>
</div>
<h2 id="pdf">PDF</h2>
<h3 id="设置-1">设置：</h3>
<p>在主题配置文件<code>next/_config.yml</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">pdf</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token comment"># Default height</span>
  <span class="token key atrule">height</span><span class="token punctuation">:</span> 500px<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="作用-5">作用：</h3>
<p>可以在文章中导入pdf。</p>
<h3 id="用法-5">用法：</h3>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% pdf url [height] %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><code>url</code> : The URL (Absolute path) of the PDF file.</li>
<li><code>[height]</code> : <em>Optional parameter.</em> Height of the PDF display element, e.g. 800px.</li>
</ul>
<h3 id="示例-5">示例：</h3>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% pdf https://example.com/sample.pdf %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% pdf /path/to/your/file.pdf 600px %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="tabs">Tabs</h2>
<h3 id="设置-2">设置：</h3>
<p>在主题配置文件<code>next/_config.yml</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tabs</span><span class="token punctuation">:</span>
  <span class="token key atrule">transition</span><span class="token punctuation">:</span>
    <span class="token key atrule">tabs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">labels</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="作用-6">作用：</h3>
<p>可以在文章中加入带有互动选项的表格，一般用于提供某一个问题的多种不同解决方案。</p>
<h3 id="用法-6">用法：</h3>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% tabs Unique name, [index] %&#125;
<span class="token comment">&lt;!-- tab [Tab caption] [@icon] --></span>
Any content (support inline tags too).
<span class="token comment">&lt;!-- endtab --></span>
&#123;% endtabs %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>Unique name</code> : 表的名字
<ul>
<li>必选参数</li>
<li>首先一定要有，作为该tabs的唯一标识符，且一篇文章中不能出现同名的unique name</li>
<li>并且当<code>[Tab caption]</code>项没有指定的话，将与<code>自动生成的index</code>一起作为每一个选项的名字</li>
</ul></li>
<li><code>[index]</code> : 默认出现的选项
<ul>
<li>可选参数</li>
<li>可以选择某一个选项作为默认选项，即如果用户未指定就是这个选项，若不指定<code>[index]</code>默认为1</li>
<li>当然也可以设置一个选项都不指定，将<code>[index]</code>的值设置为<code>-1</code></li>
</ul></li>
<li><code>[Tab caption]</code> : 各选项的表头名
<ul>
<li>可选参数</li>
<li>如果不指定
<ul>
<li>同时也没有设置选项的<code>[@icon]</code>：则默认设置为<code>Unique name</code>+选项对应的<code>index</code></li>
<li>如果设置了<code>[@icon]</code>：则留空</li>
</ul></li>
</ul></li>
<li><code>[@icon]</code> : 字体图标名，戳<a href="https://fontawesome.com/v4.7.0/icons/" title="" target="_blank">“此处”</a>查询
<ul>
<li>可选参数</li>
<li>可以与<code>[Tab caption]</code>配合起来一起使用，也可以单独使用</li>
</ul></li>
</ul>
<h3 id="示例-6">示例：</h3>
<h4 id="简单用法">简单用法：</h4>
<h5 id="tabs-with-default-tab-selected">Tabs with default tab selected</h5>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% tabs First unique name %&#125;
<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 1.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 2.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 3.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>
&#123;% endtabs %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="tabs" id="first-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#first-unique-name-1">First unique name 1</a></li><li class="tab"><a href="#first-unique-name-2">First unique name 2</a></li><li class="tab"><a href="#first-unique-name-3">First unique name 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="first-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="first-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div>
<h5 id="tabs-with-3rd-tab-selected">Tabs with 3rd tab selected</h5>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% tabs Second unique name, 3 %&#125;
<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 1.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 2.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 3.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>
&#123;% endtabs %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="tabs" id="second-unique-name"><ul class="nav-tabs"><li class="tab"><a href="#second-unique-name-1">Second unique name 1</a></li><li class="tab"><a href="#second-unique-name-2">Second unique name 2</a></li><li class="tab active"><a href="#second-unique-name-3">Second unique name 3</a></li></ul><div class="tab-content"><div class="tab-pane" id="second-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="second-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane active" id="second-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div>
<h5 id="tabs-with-no-tab-selected">Tabs with no tab selected</h5>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% tabs Third unique name, -1 %&#125;
<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 1.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 2.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 3.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>
&#123;% endtabs %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="tabs" id="third-unique-name"><ul class="nav-tabs"><li class="tab"><a href="#third-unique-name-1">Third unique name 1</a></li><li class="tab"><a href="#third-unique-name-2">Third unique name 2</a></li><li class="tab"><a href="#third-unique-name-3">Third unique name 3</a></li></ul><div class="tab-content"><div class="tab-pane" id="third-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="third-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="third-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div>
<h5 id="tabs-with-custom-labels">Tabs with custom labels</h5>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% tabs Fourth unique name %&#125;
<span class="token comment">&lt;!-- tab Solution 1 --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 1.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab Solution 2 --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 2.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab Solution 3 --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 3.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>
&#123;% endtabs %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="tabs" id="fourth-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#fourth-unique-name-1">Solution 1</a></li><li class="tab"><a href="#fourth-unique-name-2">Solution 2</a></li><li class="tab"><a href="#fourth-unique-name-3">Solution 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="fourth-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="fourth-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="fourth-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div>
<h5 id="tabs-with-icons-only">Tabs with icons only</h5>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% tabs Fifth unique name %&#125;
<span class="token comment">&lt;!-- tab @text-width --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 1.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab @font --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 2.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab @bold --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 3.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>
&#123;% endtabs %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="tabs" id="fifth-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#fifth-unique-name-1"><i class="fa fa-text-width"></i></a></li><li class="tab"><a href="#fifth-unique-name-2"><i class="fa fa-font"></i></a></li><li class="tab"><a href="#fifth-unique-name-3"><i class="fa fa-bold"></i></a></li></ul><div class="tab-content"><div class="tab-pane active" id="fifth-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="fifth-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="fifth-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div>
<h5 id="tabs-with-icons-and-labels">Tabs with icons and labels</h5>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% tabs Sixth unique name %&#125;
<span class="token comment">&lt;!-- tab Solution 1@text-width --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 1.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab Solution 2@font --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 2.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab Solution 3@bold --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 3.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>
&#123;% endtabs %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="tabs" id="sixth-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#sixth-unique-name-1"><i class="fa fa-text-width"></i>Solution 1</a></li><li class="tab"><a href="#sixth-unique-name-2"><i class="fa fa-font"></i>Solution 2</a></li><li class="tab"><a href="#sixth-unique-name-3"><i class="fa fa-bold"></i>Solution 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="sixth-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="sixth-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="sixth-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div>
<h4 id="高级用法-1">高级用法</h4>
<h5 id="tabs-permalinks-testtabs在页面中的链接">Tabs permalinks test（tabs在页面中的链接）</h5>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">Permalink for > <span class="token url">[<span class="token content">Tab one</span>](<span class="token url">#tab-one</span>)</span>.
Permalink for > <span class="token url">[<span class="token content">Tab one 1</span>](<span class="token url">#tab-one-1</span>)</span>.
Permalink for > <span class="token url">[<span class="token content">Tab one 2</span>](<span class="token url">#tab-one-2</span>)</span>.
Permalink for > <span class="token url">[<span class="token content">Tab one 3</span>](<span class="token url">#tab-one-3</span>)</span>.

Permalink for > <span class="token url">[<span class="token content">Tab two</span>](<span class="token url">#tab-two</span>)</span>.
Permalink for > <span class="token url">[<span class="token content">Tab two 1</span>](<span class="token url">#tab-two-1</span>)</span>.
Permalink for > <span class="token url">[<span class="token content">Tab two 2</span>](<span class="token url">#tab-two-2</span>)</span>.
Permalink for > <span class="token url">[<span class="token content">Tab two 3</span>](<span class="token url">#tab-two-3</span>)</span>.

&#123;% tabs Tab one %&#125;
<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 1.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 2.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 3.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>
&#123;% endtabs %&#125;

&#123;% tabs Tab two %&#125;
<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 1.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 2.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 3.</span><span class="token punctuation">**</span></span>
<span class="token comment">&lt;!-- endtab --></span>
&#123;% endtabs %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Permalink for &gt; <a href="#tab-one">Tab one</a>. Permalink for &gt; <a href="#tab-one-1">Tab one 1</a>. Permalink for &gt; <a href="#tab-one-2">Tab one 2</a>. Permalink for &gt; <a href="#tab-one-3">Tab one 3</a>.</p>
<p>Permalink for &gt; <a href="#tab-two">Tab two</a>. Permalink for &gt; <a href="#tab-two-1">Tab two 1</a>. Permalink for &gt; <a href="#tab-two-2">Tab two 2</a>. Permalink for &gt; <a href="#tab-two-3">Tab two 3</a>.</p>
<div class="tabs" id="tab-one"><ul class="nav-tabs"><li class="tab active"><a href="#tab-one-1">Tab one 1</a></li><li class="tab"><a href="#tab-one-2">Tab one 2</a></li><li class="tab"><a href="#tab-one-3">Tab one 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-one-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="tab-one-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="tab-one-3"><p><strong>This is Tab 3.</strong></p></div></div></div>
<div class="tabs" id="tab-two"><ul class="nav-tabs"><li class="tab active"><a href="#tab-two-1">Tab two 1</a></li><li class="tab"><a href="#tab-two-2">Tab two 2</a></li><li class="tab"><a href="#tab-two-3">Tab two 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-two-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="tab-two-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="tab-two-3"><p><strong>This is Tab 3.</strong></p></div></div></div>
<h5 id="tabs-with-other-tags">Tabs with other tags</h5>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% tabs Tags %&#125;
<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 1.</span><span class="token punctuation">**</span></span>

<span class="token list punctuation">1.</span> One
<span class="token list punctuation">2.</span> Two
<span class="token list punctuation">3.</span> Three

Indented code block:

<span class="token code keyword">    nano /etc</span>

Tagged code block:

&#123;% code %&#125;
code tag
code tag
code tag
&#123;% endcode %&#125;

&#123;% note default %&#125;
Note default tag.
&#123;% endnote %&#125;
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 2.</span><span class="token punctuation">**</span></span>

<span class="token list punctuation">*</span> Five
<span class="token list punctuation">*</span> Six
<span class="token list punctuation">*</span> Seven

&#123;% note primary %&#125;
&#123;% youtube Kt7u5kr_P5o %&#125;
&#123;% endnote %&#125;
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Tab 3.</span><span class="token punctuation">**</span></span>

&#123;% subtabs Sub Tabs %&#125;
<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Sub Tab 1.</span><span class="token punctuation">**</span></span>
&#123;% note success %&#125;
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.

&#123;% note warning %&#125;
Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.
&#123;% endnote %&#125;

Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.
&#123;% endnote %&#125;
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Sub Tab 2.</span><span class="token punctuation">**</span></span>
&#123;% note success %&#125;
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.

Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.

&#123;% note danger %&#125;
Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.
&#123;% endnote %&#125;
&#123;% endnote %&#125;
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Sub Tab 3.</span><span class="token punctuation">**</span></span>

&#123;% subtabs Sub-Sub Tabs %&#125;
<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Sub-Sub Tab 1 of Sub Tab 3.</span><span class="token punctuation">**</span></span>
&#123;% note success %&#125;
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.

Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.

Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.
&#123;% endnote %&#125;
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Sub-Sub Tab 2 of Sub Tab 3.</span><span class="token punctuation">**</span></span>
&#123;% note success %&#125;
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.

&#123;% note warning %&#125;
Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.

Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.
&#123;% endnote %&#125;

&#123;% endnote %&#125;
<span class="token comment">&lt;!-- endtab --></span>

<span class="token comment">&lt;!-- tab --></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">This is Sub-Sub Tab 3 of Sub Tab 3.</span><span class="token punctuation">**</span></span>

&#123;% note success %&#125;
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.

&#123;% note warning %&#125;
Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.

&#123;% note danger %&#125;
Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.
&#123;% endnote %&#125;

&#123;% endnote %&#125;

&#123;% endnote %&#125;
<span class="token comment">&lt;!-- endtab --></span>
&#123;% endsubtabs %&#125;

<span class="token comment">&lt;!-- endtab --></span>
&#123;% endsubtabs %&#125;

<span class="token comment">&lt;!-- endtab --></span>
&#123;% endtabs %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="tabs" id="tags"><ul class="nav-tabs"><li class="tab active"><a href="#tags-1">Tags 1</a></li><li class="tab"><a href="#tags-2">Tags 2</a></li><li class="tab"><a href="#tags-3">Tags 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tags-1"><p><strong>This is Tab 1.</strong></p>
<ol type="1">
<li>One</li>
<li>Two</li>
<li>Three</li>
</ol>
<p>Indented code block:</p>
<pre><code>nano /etc</code></pre>
<p>Tagged code block:</p>
<pre class="line-numbers language-none"><code class="language-none">code tag
code tag
code tag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<div class="note default">
<p>
Note default tag.
</p>
</div></div><div class="tab-pane" id="tags-2"><p><strong>This is Tab 2.</strong></p>
<ul>
<li>Five</li>
<li>Six</li>
<li>Seven</li>
</ul>
<div class="note primary">
<div class="video-container">
<iframe src="https://www.youtube.com/embed/Kt7u5kr_P5o" frameborder="0" loading="lazy" allowfullscreen>
</iframe>
</div>
</div></div><div class="tab-pane" id="tags-3"><p><strong>This is Tab 3.</strong></p>
<div id="sub-tabs" class="tabs">
<ul class="nav-tabs">
<li class="tab active">
<a href="#sub-tabs-1">Sub Tabs 1</a>
</li>
<li class="tab">
<a href="#sub-tabs-2">Sub Tabs 2</a>
</li>
<li class="tab">
<a href="#sub-tabs-3">Sub Tabs 3</a>
</li>
</ul>
<div class="tab-content">
<div id="sub-tabs-1" class="tab-pane active">
<strong>This is Sub Tab 1.</strong>
<div class="note success">
<p>
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.
</p>
<div class="note warning">
<p>
Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.
</p>
</div>
<p>
Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.
</p>
</div>
</div>
<div id="sub-tabs-2" class="tab-pane">
<strong>This is Sub Tab 2.</strong>
<div class="note success">
<p>
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.
</p>
<p>
Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.
</p>
<div class="note danger">
<p>
Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.
</p>
</div>
</div>
</div>
<div id="sub-tabs-3" class="tab-pane">
<p>
<strong>This is Sub Tab 3.</strong>
</p>
<div id="sub-sub-tabs" class="tabs">
<ul class="nav-tabs">
<li class="tab active">
<a href="#sub-sub-tabs-1">Sub-Sub Tabs 1</a>
</li>
<li class="tab">
<a href="#sub-sub-tabs-2">Sub-Sub Tabs 2</a>
</li>
<li class="tab">
<a href="#sub-sub-tabs-3">Sub-Sub Tabs 3</a>
</li>
</ul>
<div class="tab-content">
<div id="sub-sub-tabs-1" class="tab-pane active">
<strong>This is Sub-Sub Tab 1 of Sub Tab 3.</strong>
<div class="note success">
<p>
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.
</p>
<p>
Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.
</p>
<p>
Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.
</p>
</div>
</div>
<div id="sub-sub-tabs-2" class="tab-pane">
<strong>This is Sub-Sub Tab 2 of Sub Tab 3.</strong>
<div class="note success">
<p>
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.
</p>
<div class="note warning">
<p>
Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.
</p>
<p>
Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.
</p>
</div>
</div>
</div>
<div id="sub-sub-tabs-3" class="tab-pane">
<p>
<strong>This is Sub-Sub Tab 3 of Sub Tab 3.</strong>
</p>
<div class="note success">
<p>
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.
</p>
<div class="note warning">
<p>
Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.
</p>
<div class="note danger">
<p>
Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.
</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div></div></div></div>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Python(二)Python中级语法</title>
    <url>/Tech/Python/python_grammar_intermediate.html</url>
    <content><![CDATA[<div class="note info"><p><strong>说明</strong></p>
<ul>
<li>本文是在<code>大三上学期</code>参照<code>廖雪峰Python</code>教程所做笔记，后并未勘误，如有错误，请谅解</li>
<li>另外，本文并不是一份严谨可靠的Python教程，更多的是我学习Python`中级语法设计时的一些心得和感悟</li>
</ul>
</div>
<span id="more"></span>
<h3 id="定义默认参数要牢记一点默认参数必须指向不变对象最重要">定义默认参数要牢记一点：默认参数必须指向不变对象！（最重要！！！）</h3>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 以下就是将默认参数指向可变对象的例子</span>
<span class="token keyword">def</span> <span class="token function">appenderror</span><span class="token punctuation">(</span>L<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	L<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> L

<span class="token comment"># 我们传入参数正常使用时</span>
In<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span><span class="token operator">></span> appenerror<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Error'</span><span class="token punctuation">]</span>

In<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span><span class="token operator">></span> appenerror<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'S'</span><span class="token punctuation">,</span><span class="token string">'K'</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'S'</span><span class="token punctuation">,</span><span class="token string">'K'</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">,</span><span class="token string">'Error'</span><span class="token punctuation">]</span>

<span class="token comment"># 但我们使用默认参数时</span>
In<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">>></span><span class="token operator">></span> appenerror<span class="token punctuation">(</span><span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'Error'</span><span class="token punctuation">]</span>
<span class="token comment"># 似乎也没毛病</span>

<span class="token comment"># 但是我们再次调用函数并使用默认参数时</span>
In<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">>></span><span class="token operator">></span> appenerror<span class="token punctuation">(</span><span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'Error'</span><span class="token punctuation">,</span><span class="token string">'Error'</span><span class="token punctuation">]</span>

<span class="token comment"># 显然得到的不是我们想要的答案</span>
<span class="token triple-quoted-string string">'''
	原因：这主要是由于Python的函数在使用默认参数时，是将默认参数先计算出来的，事实上，如果将默认参数指向可变对象，他也会创造出一个可变对象，对这个指向对象的任何操作都会影响到后续
'''</span>

<span class="token comment"># 那我们要是就是想要使用列表作为默认参数呢？</span>
<span class="token triple-quoted-string string">'''
	可采用的方法: 引入 None 或者其他任何不可变对象，
'''</span>
<span class="token keyword">def</span> <span class="token function">appenderror</span><span class="token punctuation">(</span>L<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> L <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	L<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> L
<span class="token comment"># 当然也可以吧L换做任何字符串常量，但最好还是使用None，经过判断语句之后再把其改为想要的数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="可变长参数的妙用">可变长参数的妙用</h3>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># A函数 未使用可变长</span>
<span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> n <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>
        <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> n <span class="token operator">*</span> n
    <span class="token keyword">return</span> <span class="token builtin">sum</span>

<span class="token comment"># A函数使用</span>
calc<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>


<span class="token comment"># B函数 使用可变长参数(其中可变长部分传入的元素是以tuple的方式传入的)</span>
<span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token operator">*</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> n <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>
        <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> n <span class="token operator">*</span> n
    <span class="token keyword">return</span> <span class="token builtin">sum</span>

<span class="token comment"># B函数使用</span>
calc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>

<span class="token comment"># 如果我们想用可迭代对象的元素当做可变长参数传入函数B</span>
d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
calc<span class="token punctuation">(</span><span class="token operator">*</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="关键字参数">关键字参数</h3>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
	‘关键字参数’ 区别于 ‘参数名传参’ 的点在于
		1.关键字传参时是不会有提示的，即函数不会把参数名字给你，一般函数定义如下:
			def func(**kwarg):
			 	...
		  并且关键字传参时不限制数量的，你可以一直写下去，只有函数能够识别出来，如下例:
		  	func(name='小明', age=18, hometowm='湖北')
		  他是通过来生成一个dict，并根据你的输入产生键值对，来进行值的传递的
		  关键字参数的传递时是一定是要给出参数名的，这与参数名传参时可有可无不同（如果不给参数名则默认严格遵守位置传参的规则）
         2.位置参数（参数名传参）时是会有提示的，即函数不会把参数名字给你，这一点在好的文本编辑器上体现的比较明显      
     所以如果除开‘数量限制’和‘是否必须加上参数名’这两点来说的话，关键字参数真的和位置参数的（参数名传参的方式是很像了），几乎可以说是等同了
'''</span>

<span class="token comment"># 请欣赏表演:</span>
In <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>	<span class="token keyword">def</span> <span class="token function">pri</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'小红'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">12</span> <span class="token punctuation">,</span><span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name:'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>	c <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'fuck'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token string">'就这？'</span><span class="token punctuation">&#125;</span>
     	pri<span class="token punctuation">(</span><span class="token operator">**</span>c<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> name<span class="token punctuation">:</span> fuck age<span class="token punctuation">:</span> 就这？
            
In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>	c <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'fuck'</span><span class="token punctuation">,</span> <span class="token string">'age2'</span><span class="token punctuation">:</span><span class="token string">'sb'</span><span class="token punctuation">&#125;</span>
     	pri<span class="token punctuation">(</span><span class="token operator">**</span>c<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> name<span class="token punctuation">:</span> fuck age<span class="token punctuation">:</span> <span class="token number">12</span>            

<span class="token triple-quoted-string string">'''
	关键字参数的掠夺能力:
	容易看出的是:
		当把字典通过"**号表达式"作为一个个键值对传入后，他会先判别时候是属于未知参数，如果不都不是才会传递给关键字参数，这体现了关键字参数和未知参数通过“参数名传参的”关系。
'''</span>            

<span class="token triple-quoted-string string">'''
	让人又爱又恨的 ‘*号表达式’:
		在很多情况下，当我们调用含有关键字或者可变长参数的函数式，当我们想传入可迭代对象或者dict时，通常不是将其作为一个整体，而是想将其中的每一个元素传入函数，所以我们会使用 *表达式来拆分他们。
		1.  *可迭代对象 返回的是很多个单独的元素，但如果他们被作为不定长参数接收后，将会重新整合成一个tuple。
		2. **dict 返回的是很多个键值对，但形式不是标准的键值对，而是为‘key=value’，但如果他们作为关键字参数被接收后，将会重新整合为一个新的dict。
		3. *dict 返回一个由key组成的tuple。
		当然 ‘*号表达式’ 的作用绝不仅限于给函数传参时使用，但我绝不建议你不这样做，特别是对于新手来说。
'''</span>

<span class="token triple-quoted-string string">'''
	否定了位置传参可能的，命名关键字参数：
		可以进行位置传参也可以进行关键字传参的参数:必选参数（必须传入一个），默认参数（可以传入一个或零个）
		只能进行位置传参的参数:可变长参数（无限位置传参）
		只能进行关键字传参的参数:命名关键字参数（会有提示，也可以设置默认参数，但有限，并且如果没有设置默认则必须传入参数），关键字参数（无限关键字传参）
'''</span>
<span class="token comment"># 在下例中: name为必选参数，age为默认参数，args为可变长参数，city为默认命名关键字参数（可以不传入），job为必选命名关键字参数（必须传入），kwargs为关键字参数（无限传参）</span>
<span class="token keyword">def</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">'Beijing'</span><span class="token punctuation">,</span> job<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> args<span class="token punctuation">,</span> city<span class="token punctuation">,</span> job<span class="token punctuation">)</span>
<span class="token comment"># 引入命名关键字参数带来的新操作</span>
<span class="token comment"># 1.对于默认命名关键字参数: 如果你想设置一个可以选传的参数A，如果你简单的设置为默认位置参数，那么在前面通过位置传参的过程中，如果你不想给这个参数传参，则参数A之后的所有默认位置参数和“可变长参数”（特别是可变长，如果不把A用“位置传参”填上，你就永远无法把参数传到可变长那里）就都不可以进行位置传参了，除非用“位置传参”（如果你用关键字传参也不行，只能是位置传参）把这个参数A填上，这就与你想设置一个选传参数A的初心矛盾了。</span>
<span class="token comment"># 如下例，第一个函数将可选参数age定义为默认位置参数，但显然，如果不给age进行位置传参，则永远无法给可变长参数args进行传参，第二个函数将可选参数age定义为默认命名关键字参数，这次，即是不给age传参，仍可以给args传参</span>
<span class="token keyword">def</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">'beijing'</span><span class="token punctuation">,</span> job<span class="token operator">=</span><span class="token string">'guangzhou'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> args<span class="token punctuation">,</span> city<span class="token punctuation">,</span> job<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span>	person<span class="token punctuation">(</span><span class="token string">'xiaohong'</span><span class="token punctuation">,</span> <span class="token string">'他是个傻子'</span><span class="token punctuation">)</span>    
xiaohong 他是个傻子 <span class="token punctuation">(</span><span class="token punctuation">)</span> beijing guangzhou

<span class="token keyword">def</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">'beijing'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> job<span class="token operator">=</span><span class="token string">'guangzhou'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> args<span class="token punctuation">,</span> city<span class="token punctuation">,</span> job<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span>	person<span class="token punctuation">(</span><span class="token string">'xiaohong'</span><span class="token punctuation">,</span> <span class="token string">'他是个傻子'</span><span class="token punctuation">)</span>    
xiaohong <span class="token number">12</span> <span class="token punctuation">(</span><span class="token string">'他是个傻子'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> beijing guangzhou
    
<span class="token comment"># 2.pass，从现在的是用来看，似乎必选命名关键字参数能做的，必选位置参数都能做的，看似好像就是简单地把其传参方式减少了</span>


<span class="token triple-quoted-string string">'''
	如果看了上面关于‘*号表达式’的表述后，你产生了一些疑问，这是正常的。
	请看下面几个例子
'''</span>

<span class="token comment"># 请欣赏表演:</span>
In <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>	<span class="token keyword">def</span> <span class="token function">pri</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'小红'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">12</span> <span class="token punctuation">,</span><span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name:'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>

<span class="token comment"># 将dict作为参数名进行传参的例子</span>
In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>	c <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'fuck'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token string">'就这？'</span><span class="token punctuation">&#125;</span>
     	pri<span class="token punctuation">(</span><span class="token operator">**</span>c<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> name<span class="token punctuation">:</span> fuck age<span class="token punctuation">:</span> 就这？

<span class="token comment"># 将可迭代对象作为参数进行位置传参的例子</span>
In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>	d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'就这水平？'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>
     	pri<span class="token punctuation">(</span><span class="token operator">*</span>d<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> name<span class="token punctuation">:</span> 就这水平？ age<span class="token punctuation">:</span> <span class="token number">12</span>

<span class="token comment"># 用单‘*’星号表达式拆解dict</span>
In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pri<span class="token punctuation">(</span><span class="token operator">*</span>c<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> name<span class="token punctuation">:</span> name age<span class="token punctuation">:</span> age            

<span class="token comment"># 我们来观察一下，是位置参数的掠夺能力强还是的关键字参数能力的强</span>
In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>	d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'就这水平？'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>
		pri<span class="token punctuation">(</span> <span class="token operator">*</span>d<span class="token punctuation">,</span><span class="token operator">**</span>c<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> TypeError<span class="token punctuation">:</span> pri<span class="token punctuation">(</span><span class="token punctuation">)</span> got multiple values <span class="token keyword">for</span> argument <span class="token string">'name'</span>
<span class="token comment"># 根据上面代码的结果，我们可以得知还是positional argument的掠夺能力更强一些，只要满足关键字，就会被位置参数夺去</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="混合传参">混合传参</h3>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
	虽说上面这些讨论可以初步看出python在函数传参时的一些规则，但是仍然十分的混乱，所以我们就直接来介绍一种极端情况下的例子，来看看python到底是如何进行参数分配的
'''</span>

<span class="token comment"># 规则1:函数的参数定义时的顺序: 必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>
    	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a ='</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">'b ='</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token string">'c ='</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">'args ='</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token string">'kw ='</span><span class="token punctuation">,</span> kw<span class="token punctuation">)</span>
        

<span class="token operator">>></span><span class="token operator">></span>	<span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>
    	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a ='</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">'b ='</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token string">'c ='</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">'d ='</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token string">'kw ='</span><span class="token punctuation">,</span> kw<span class="token punctuation">)</span>
        
        
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>
    	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a ='</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">'b ='</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token string">'c ='</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">'args ='</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token string">'kw ='</span><span class="token punctuation">,</span> kw<span class="token punctuation">)</span>
SyntaxError<span class="token punctuation">:</span> non<span class="token operator">-</span>default argument follows default argument        
        
<span class="token comment"># 规则2:调用函数传参时的顺序: 位置传参, 关键字(参数名)传参（不讲究顺序），例如</span>
<span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token number">1</span> b <span class="token operator">=</span> <span class="token number">2</span> c <span class="token operator">=</span> <span class="token number">3</span> args <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span> kw <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>
SyntaxError<span class="token punctuation">:</span> positional argument follows keyword argument

<span class="token comment"># 规则3:当使用位置传参时前面的参数叠满后，移至才会下一个参数（可能不是很好理解），请看下例</span>
<span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token number">1</span> b <span class="token operator">=</span> <span class="token number">3</span> c <span class="token operator">=</span> a args <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> kw <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">&#125;</span>

<span class="token comment"># 规则4:表明某一个参数接受了两个或以上的传参时则会报错,并不会是更新为最后传递的参数</span>
<span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">)</span>
TypeError<span class="token punctuation">:</span> f1<span class="token punctuation">(</span><span class="token punctuation">)</span> got multiple values <span class="token keyword">for</span> argument <span class="token string">'a'</span>

<span class="token comment"># 规则5:不同参数对传参的掠夺能力:必选参数 > 默认参数 > 可变参数 > 命名关键字参数 > 关键字参数</span>
<span class="token comment"># 前面三个参数的大小关系主要是由其‘函数定义时就已经定好的参数位置关系’决定，关键字参数和可变参数的大小关系并不会影响什么，因为他们接受的传参类型完全不同，一个只能是value，一个必须是key=value。而后面关键字参数的掠夺能力与前三个参数的关系则很重要，如下例:</span>
<span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">)</span>
TypeError<span class="token punctuation">:</span> f1<span class="token punctuation">(</span><span class="token punctuation">)</span> got multiple values <span class="token keyword">for</span> argument <span class="token string">'a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="字符串细节">字符串细节</h3>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 众所周知，Python把当做了字符串当做了一个tuple来处理</span>
<span class="token comment"># 所以利用切片和迭代的性质可以非常快捷的处理字符串</span>

<span class="token triple-quoted-string string">'''
	切片小细节:
		请问下面代码的输出结果是什么?
'''</span>

a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span>	a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span>	a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span>	a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span>	a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span>	a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span>	a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span>	a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span>	a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token triple-quoted-string string">'''
	根据以上代码得结果表明: 与索引不同的是，切片在超出范围的时候并不会报错，而是将满足要求的元素进行输出
	验证代码如下:
'''</span>
b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span>	b<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span>	b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span>	b<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span>	b<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span>	b<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

<span class="token comment"># 根据上面几个例子打开可以归纳出切片的导出细则:</span>
<span class="token comment"># 1.首先计算出第一,二个index所代表的位置</span>
<span class="token comment"># 2.观察是否满足第三个value的正负号规则</span>
<span class="token comment"># 3.如果不满足直接返回空list[]</span>
<span class="token comment"># 4.如果满足，则计算切片是否超出list范围</span>
<span class="token comment"># 5.如果超出则把超出的一边或者两边定义在list的边界上</span>
<span class="token comment"># 6.如果未超出则按正常次序计算</span>

<span class="token triple-quoted-string string">'''
	question:
		利用切片操作，实现一个trim()函数，去除字符串首尾的空格，
'''</span>

<span class="token keyword">def</span> <span class="token function">trim</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> s
    <span class="token keyword">while</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>
          s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>
          s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> s

<span class="token comment"># 现在来解释一下，为什么要引入这个例子，因为:</span>
<span class="token comment"># 你可能认为 s[-1:] 和 s[-1]是同一个东西，但是事实上，前者为切片，超出范围会自动限制在list边界处，后者为索引，超出范围会直接报错, 我们看一个更为容易理解的例子:</span>
s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span>	s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
Error
<span class="token comment"># 上例中对于lenth为0的list而言，s[-1:] 即代表s的全部即[]，而s[-1] 则会报错显示index超出了。</span>

但事实上，上述问题才用的方法并不是值得推崇的，因为在利用切片赋值时会开辟内存空间，从而占用了大量不必要的内存，所以比较好的做法是先找到非<span class="token string">' '</span>元素的index，再通过切片一次性赋值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="listtupledict一类的迭代原理-与zip-的区别">list<code>,</code>tuple<code>,</code>dict<code>一类的迭代原理 与</code>zip` 的区别</h3>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>	<span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    	<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token number">3</span> <span class="token number">9</span>

<span class="token triple-quoted-string string">'''
	对上述代码结果的解释:
		对于可迭代对象[((1, 1), (2, 4)), (3, 9)]而言,其第一个迭代元素为((1, 1), (2, 4))
												其第二个迭代元素为(3,9)
		所以将第一次迭代时, x = (1,1), y = (2, 4)
			 第二次迭代时, x = 3, y = 9
	但是对于generator 和 iterator的原理还有待考量
'''</span>

<span class="token comment"># zip()函数</span>
<span class="token operator">>></span><span class="token operator">></span>	<span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 他会生成一个迭代器，且每次的迭代元素是对应的元素组成的一个tuple</span>
<span class="token comment"># 相当于他会生成一个[(1,5),(2,3),(3,8)]的可迭代对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="细究-list-生成式">细究 <code>list</code> 生成式</h3>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
	探究list生成式中，if放前面和放后面的区别
'''</span>
<span class="token operator">>></span><span class="token operator">></span>	L1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> L1
<span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span>	L2 <span class="token operator">=</span> <span class="token punctuation">[</span>s<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> L1 <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span>	L2
<span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span>	L3 <span class="token operator">=</span> <span class="token punctuation">[</span>s<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token keyword">else</span> s <span class="token keyword">for</span> s <span class="token keyword">in</span> L1<span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span>	L3
<span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>

<span class="token triple-quoted-string string">'''
	上例可知对于列表生成式而言，
		if放for前面: 和else连用形成一个类似三目运算符的效果，其返回的是一个值，并不能作为筛选依据，所以if放前面时，并不会改变生成list的元素个数
		if放for后面: 构成对for的迭代元素的筛选依据，其决定了迭代的元素s是否返回给生成式，所以不会影响到最终生成元素的值，而是对元素进行筛选，改变生成list的元素个数
'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="generator-创建方式"><code>generator</code> 创建方式</h3>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方式1，类似于列表生成式，但是要将列表生成式的[]，改为()</span>
<span class="token operator">>></span><span class="token operator">></span>	a <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span>	<span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token number">0</span>
<span class="token number">1</span>
<span class="token number">4</span>
<span class="token number">9</span>
<span class="token number">16</span>
<span class="token number">25</span>
<span class="token number">36</span>
<span class="token number">49</span>
<span class="token number">64</span>
<span class="token number">81</span>
<span class="token comment"># 也可以通过调用next(a)来进行遍历操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方式2，通过 yield 可以将普通的函数转换为列表生成式</span>
<span class="token operator">>></span><span class="token operator">></span>	define a<span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>		i<span class="token punctuation">,</span> <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    	<span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token builtin">max</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>			<span class="token builtin">sum</span> <span class="token operator">+=</span> i
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>			<span class="token keyword">yield</span> <span class="token builtin">sum</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>			i <span class="token operator">+=</span> <span class="token number">1</span>

<span class="token operator">>></span><span class="token operator">></span>	b <span class="token operator">=</span> a<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span>	b
<span class="token operator">&lt;</span>generator <span class="token builtin">object</span> a at <span class="token number">0x0000027213B0CD68</span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span>	<span class="token keyword">for</span> i <span class="token keyword">in</span> b<span class="token punctuation">:</span>
    	<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token number">3</span>
<span class="token number">6</span>
<span class="token number">10</span>
<span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 但是当我们使用函数来当生成器时，我们很难拿到return的值，事实上，默认生成器里面只有yield的值，如下</span>
<span class="token operator">>></span><span class="token operator">></span>	<span class="token keyword">def</span> <span class="token function">fib_ge</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	    n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token builtin">max</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	        <span class="token keyword">yield</span> b
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	        n <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	    <span class="token keyword">return</span> <span class="token string">'done'</span>


<span class="token operator">>></span><span class="token operator">></span>	<span class="token keyword">for</span> i <span class="token keyword">in</span> fib_ge<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

<span class="token number">1</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">5</span>
<span class="token number">8</span>
<span class="token number">13</span>
<span class="token number">21</span>
<span class="token number">34</span>
<span class="token number">55</span>
<span class="token number">89</span>

<span class="token comment"># 如果想要得到函数的真正返回值，我们需要使用next函数。</span>
<span class="token operator">>></span><span class="token operator">></span>	<span class="token keyword">def</span> <span class="token function">fib_ge</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	    n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token builtin">max</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	        <span class="token keyword">yield</span> b
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	        n <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	    <span class="token keyword">return</span> <span class="token string">'done'</span>

<span class="token operator">>></span><span class="token operator">></span>	a <span class="token operator">=</span> fib_ge<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span>	<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	    <span class="token keyword">try</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	        x <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	    <span class="token keyword">except</span> StopIteration <span class="token keyword">as</span> e<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	        <span class="token keyword">break</span>

<span class="token number">1</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">5</span>
<span class="token number">8</span>
<span class="token number">13</span>
<span class="token number">21</span>
<span class="token number">34</span>
<span class="token number">55</span>
<span class="token number">89</span>
done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>还有一件事，使用generator的时候一定要把它先赋给某个变量，不然对generator调用next()函数永远都只会得到相同的初始值时</p>
</blockquote>
<h3 id="高阶函数">高阶函数</h3>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
	介绍几个比较常用的python内置的高阶函数
'''</span>

<span class="token comment"># 1. map()</span>
<span class="token triple-quoted-string string">'''
	用法: map(用于转换func,可迭代序列A)
	返回值: Iterator
	功能: 将A中的每一个元素都带入func中，得到的返回值作为返回的iterator对应的元素
'''</span>

<span class="token comment"># 2. reduce()</span>
<span class="token triple-quoted-string string">'''
	用法: reduce(用于计算的func,可迭代序列B)
	返回值: 最后的结果
	功能: func必须接收两个变量，将B中的头两个元素带入func中得到的结果再与第三个一起作为变量传递给func，如此循环，直至到最后一个元素
'''</span>

<span class="token comment"># 3. filter()</span>
<span class="token triple-quoted-string string">'''
	用法: filter(用于判断的func,可迭代序列C)
	返回值: Iterator
	功能:将C中的每一个元素都带入func中进行检验，返回值为True保留，为False则被丢弃，所有保留下来的元素成为iterator对应的元素
'''</span>

<span class="token comment"># 4.sorted()</span>
<span class="token triple-quoted-string string">'''
	用法:sorted(待排序的list或者dict D, key=用于转换的func, reverse=True)
	返回值: Iterator
	功能:将D中的元素先通过func转换之后再进行排序.
	Example:
		sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower, reverse=True)
		['about', 'bob', 'Credit', 'Zoo']
'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="返回函数闭包">返回函数(闭包)</h3>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 闭包的关键点在于理解变量的作用域</span>
<span class="token triple-quoted-string string">'''
	下面是一些关于如何理解返回函数的例子:
		例子1 返回函数的定义
		例子2，3 使用返回函数时的常见错误(对变量作用域的误解)
		例子4，5 闭包的好处(4.当闭包执行完后，仍然能够保持住当前的运行环境(记忆性), 5.闭包可以根据外部作用域的局部变量来得到不同的结果(更灵活))
'''</span>

<span class="token comment"># 例1: 闭包的基本定义:在函数中定义了函数，并且内函数调用了外部函数的变量</span>
<span class="token keyword">def</span> <span class="token function">lazy_sum</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        ax <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> n <span class="token keyword">in</span> args<span class="token punctuation">:</span>
            ax <span class="token operator">=</span> ax <span class="token operator">+</span> n
        <span class="token keyword">return</span> ax
    <span class="token keyword">return</span> <span class="token builtin">sum</span>

<span class="token operator">>></span><span class="token operator">></span>	a <span class="token operator">=</span> lazy_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span>	a<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">11</span>





<span class="token comment"># 例2: 返回函数中使用可变变量时</span>
<span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
             <span class="token keyword">return</span> i<span class="token operator">*</span>i
        fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    <span class="token keyword">return</span> fs

f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span>	f1<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">9</span>
<span class="token operator">>></span><span class="token operator">></span>	f2<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">9</span>
<span class="token operator">>></span><span class="token operator">></span>	f3<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">9</span>

<span class="token triple-quoted-string string">'''
	解释为何会出现如下结果:
		官方解释: 返回的函数并没有立刻执行，而是直到调用了f()才执行
		我的理解: 在调取返回函数时,函数开始找参数，根据之前的规则我们知道函数肯定是从上往下挨个找的，当他里面没有定义i这个local变量时，就回去找他的下面一层（外函数）中是否有定义i，发现确实是有定义的，于是就返回该i的平方，此时i为3，故而都返回的是9
		奇怪之处: 在C语言里面，一般来说循环变量用完就会被扔掉了，Python为何可以找到呢？原因在于Python并没有规定循环变量的作用域，如果他在地面上使用，那么全局的i都会被改变，如果他在函数A里面使用，那么函数A的i变量就会被改变，如下例:
'''</span>
<span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    i <span class="token operator">=</span> <span class="token number">1000</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    
<span class="token operator">>></span><span class="token operator">></span>	count<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">9</span>

<span class="token comment"># 代码改进</span>
<span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">def</span> <span class="token function">f_2</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>			<span class="token comment"># 此处的j的作用域是函数f_2(),比起外函数count的j,f在被调用时会优先选择f_2()的j</span>
        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> j<span class="token operator">*</span>j
        <span class="token keyword">return</span> f
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 	<span class="token comment"># 此处的j的作用域是整个函数count </span>
   		fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f_2<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment"># 这是起决定性的一步，在函数f_2被调用的时候,f_2里面所用的变量就已经被计算出来了,此时返回的f，在之后的调用过程中的参数会取决于此时f_2中的所有参数</span>
    <span class="token keyword">return</span> fs






<span class="token comment"># 例3: 在返回函数中是不能更改外部变量的</span>
<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
    a <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
        a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">return</span> a
    <span class="token keyword">return</span> bar

<span class="token triple-quoted-string string">'''
	报错原因: 这是因为在执行代码 c = foo()时，python会导入全部的闭包函数体bar()来分析其的局部变量，python规则指定所有在赋值语句左面的变量都是局部变量，则在闭包bar()中，变量a在赋值符号"="的左面，被python认为是bar()中的局部变量。再接下来执行print c()时，程序运行至a = a + 1时，因为先前已经把a归为bar()中的局部变量，所以python会在bar()中去找在赋值语句右面的a的值，结果找不到，就会报错。解决的方法很简单
	1. 使用nonlocal或global的关键字
		
	2. 使用list等可变类型
'''</span>

<span class="token comment"># 1</span>
<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
	a <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
        <span class="token keyword">nonlocal</span> a
        a <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> a 
    <span class="token keyword">return</span> bar


<span class="token comment"># 2</span>
<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
	a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 
    <span class="token keyword">return</span> bar






<span class="token comment"># 例4: 返回函数保持住当前的运行环境</span>
origin <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 坐标系统原点 </span>
legal_x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span> <span class="token comment"># x轴方向的合法坐标 </span>
legal_y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span> <span class="token comment"># y轴方向的合法坐标 </span>
<span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>pos<span class="token operator">=</span>origin<span class="token punctuation">)</span><span class="token punctuation">:</span> 
    <span class="token keyword">def</span> <span class="token function">player</span><span class="token punctuation">(</span>direction<span class="token punctuation">,</span>step<span class="token punctuation">)</span><span class="token punctuation">:</span> 
  	<span class="token comment"># 这里应该首先判断参数direction,step的合法性，比如direction不能斜着走，step不能为负等 </span>
    <span class="token comment"># 然后还要对新生成的x，y坐标的合法性进行判断处理，这里主要是想介绍闭包，就不详细写了。 </span>
    	new_x <span class="token operator">=</span> pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> direction<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>step 
		new_y <span class="token operator">=</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> direction<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>step 
		pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_x 
		pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_y <span class="token comment"># 注意！此处不能写成 pos = [new_x, new_y]，原因在上文有说过 </span>
		<span class="token keyword">return</span> pos 
	<span class="token keyword">return</span> player 
  
player <span class="token operator">=</span> create<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 创建棋子player，起点为原点 </span>
<span class="token keyword">print</span><span class="token punctuation">(</span>player<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 向x轴正方向移动10步 </span>
<span class="token keyword">print</span><span class="token punctuation">(</span>player<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 向y轴正方向移动20步 </span>
<span class="token keyword">print</span><span class="token punctuation">(</span>player<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 向x轴负方向移动10步</span>

<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>

<span class="token triple-quoted-string string">'''
	我来谈一下对返回函数记忆性的理解:
		在上述代码 ‘player = create()’ 执行时，执行了函数creat, creat()中player()外的变量全部被创造出来了,并放置在某一个未知空间(其实就只有两个变量，即变量pos和函数变量player),在调用player时候，因为是通过可变类型list进行传递的参数，所以是可以在返回函数执行过程中改变外部变量的值的，于是存在于未知空间的变量pos就这样被改来改去，并且每次调用player时，接受的也是这样的一个pos,于是通过这个pos变量，具有了记忆性，如果pos不能使list类型，则需要在中player中使用nonlocal关键字
'''</span>


<span class="token comment"># 例5: 返回函数根据外部作用域的局部变量来得到不同的结果（灵活性）</span>
<span class="token keyword">def</span> <span class="token function">make_filter</span><span class="token punctuation">(</span>keep<span class="token punctuation">)</span><span class="token punctuation">:</span> 
    <span class="token keyword">def</span> <span class="token function">the_filter</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">:</span> 
        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span> 
        lines <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span> 
        <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> 
        filter_doc <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> lines <span class="token keyword">if</span> keep <span class="token keyword">in</span> i<span class="token punctuation">]</span> 
        <span class="token keyword">return</span> filter_doc 
    <span class="token keyword">return</span> the_filter

<span class="token comment"># 显然当我们传递进去不同参数是,我们便可以进行不一样的功能</span>
<span class="token comment"># 如果我们需要取得文件"result.txt"中含有"pass"关键字的行，则可以这样使用例子程序</span>
<span class="token builtin">filter</span> <span class="token operator">=</span> make_filter<span class="token punctuation">(</span><span class="token string">"pass"</span><span class="token punctuation">)</span>
filter_result <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token string">"result.txt"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="聪明人才看得懂的例子">聪明人才看得懂的例子</h3>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
	请说出下面两个生成器的区别
'''</span>

<span class="token keyword">def</span> <span class="token function">_odd_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> <span class="token number">3</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> a
        a <span class="token operator">+=</span> <span class="token number">2</span>

<span class="token keyword">def</span> <span class="token function">_not_divisible</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">%</span> n <span class="token operator">></span> <span class="token number">0</span>

<span class="token keyword">def</span> <span class="token function">primes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">yield</span> <span class="token number">2</span>
    it <span class="token operator">=</span> _odd_iter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 初始序列</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token comment"># 返回序列的第一个数</span>
        <span class="token keyword">yield</span> n
        it <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span>_not_divisible<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">)</span> <span class="token comment"># 构造新序列</span>

<span class="token keyword">def</span> <span class="token function">primes_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">yield</span> <span class="token number">2</span>
    it <span class="token operator">=</span> _odd_iter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 初始序列</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token comment"># 返回序列的第一个数</span>
        <span class="token keyword">yield</span> n
        it <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">%</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> it<span class="token punctuation">)</span> <span class="token comment"># 构造新序列</span>

pri <span class="token operator">=</span> prime<span class="token punctuation">(</span><span class="token punctuation">)</span>
pri_2 <span class="token operator">=</span> prime_2<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        
<span class="token triple-quoted-string string">'''
	傻瓜才会看得程序运行顺序分析:
		对于Primes()这个生成器的对象pri而言,他的运行顺序为:
			第一次执行next(pri):
				1. 执行 yield 2
				2. 跳出
				
			第二次执行next(pri):
				1. 执行 it = _odd_iter(), 将生成一个‘从三开始，只含奇数’的迭代对象
				2. 进入 while()循环
				3. 第一次执行 next(it):
					1. return 3
					2. 跳出
				4. 将返回值‘3’赋给n
				5. yield n(3)
				6. 跳出
				
			第三次执行next(pri):
				1. 执行 it = filter(_not_divisible(n), it):
					1. 开辟一片内存，来调用_not_divisible(n):
						2. 传入参数n(3) # 因为这里是直接调用了函数，而并不是简简单单的函数名赋值，所以这个函数空间里面的所有参数(除了内函数lambda里面独有的参数)都已经被计算出来了,所以这里的n已经占据了函数空间的一片区域，并且不会改变(除非内函数里面引入nonlocal这种关键字),我将这片内存空间里面的这个变量称为n_1(这与传入的参数的内存空间是不一样的)
						3. 返回lambda表达式
					2. 将返回的对象，即lambda表达式传递给filter作为判断func # 此时由于，只是将匿名函数当一个变量传递给了filter，而没有去调用它，所以lambda表达式中的参数值n并不会确定下来
					3. 将迭代对象it传递给filter
					4. filter 函数返回一个迭代对象给新的it_1(我这么叫是为了区分之后的it序列), 因为filter已经执行了所以可以肯定filter里面的参数的必然已经确定下来了，即‘调用的判断规则 _not_divisible(3)’和‘参考的原始generator’ 已经确定，但原始的generator还没调用，所以仍然停在3这个位置
				2. 重新开始循环
				3. 执行 next(it_1):
					1. 首先是调用原始的generator 'it':
						1. a += 2
						2. yield a(5)
					2. 判断是否满足判断规则 ‘_not_divisible(3)’:
						1. 传入 it 生成的 5 到匿名函数中
						2. 执行 lambda x: x % n > 0 # 这里lambda表达式的n会从_not_divisible(3)中找到，即n=3
						3. 判断得出:不能整除3，所以返回5
				4. 执行 n = 5
				5. 执行 yield n(5)
				6. 跳出
				
			第四次执行next(pri):
				1.  执行 it_2 = filter(_not_divisible(5), it_1) # 这标注下标也只是为了区分其不同
				2.	重新开始循环	
				3. 执行 next(it_2):
					1. 首先是调用他的上一个的generator 'it_1':
						1. 调用'it_1'的generator 'it':
							1. a += 2
							2. yield a(7)
						2. 判断是否满足判断规则 ‘_not_divisible(3)’:
							1. 传入 it 生成的 7 到匿名函数中
							2. 执行 lambda x: x % n > 0 # 这里lambda表达式的n会从_not_divisible(3)中找到，即n=3
							3. 判断得出:不能整除3，所以返回7
					2. 判断是否满足判断规则 ‘_not_divisible(5)’:
						1. 传入 it 生成的 7 到匿名函数中
						2. 执行 lambda x: x % n > 0 # 这里lambda表达式的n会从_not_divisible(5)中找到，即n=5
						3. 判断得出:不能整除5，所以返回7
				4. 执行 n = 7
				5. 执行 yield n(7)
				6. 跳出


			第五次执行next(pri):
				1. 执行 it_3 = filter(_not_divisible(7), it_2) # 这标注下标也只是为了区分其不同
				2. 重新开始循环	
				3. 执行 next(it_3):
					1. 首先是调用他的上一个的generator 'it_2':
						1. 调用'it_2'的generator 'it_1':
							1. 调用'it_1'的上一个generator 'it':
								1. a += 2
								2. yield a(9)
							2. 判断是否满足判断规则 ‘_not_divisible(3)’:
								1. 传入 it 生成的 7 到匿名函数中
								2. 执行 lambda x: x % n > 0 # 这里lambda表达式的n会从_not_divisible(3)中找到，即n=3
							3. 判断得出:能整除3，所以再一次调用generator'it':
								1. a += 2
								2. yield a(11)
							4. 判断是否满足判断规则 ‘_not_divisible(3)’:
								1. 传入 it 生成的 7 到匿名函数中
								2. 执行 lambda x: x % n > 0 # 这里lambda表达式的n会从_not_divisible(3)中找到，即n=3
							5. 判断得出:不能整除3:
								1. a += 2
								2. yield a(11)
						2. 判断是否满足判断规则 ‘_not_divisible(5)’:
							1. 传入 it 生成的 11 到匿名函数中
							2. 执行 lambda x: x % n > 0 # 这里lambda表达式的n会从_not_divisible(5)中找到，即n=5
							3. 判断得出:不能整除5，所以返回11
					2. 判断是否满足判断规则 ‘_not_divisible(7)’:
						1. 传入 it 生成的 11 到匿名函数中
						2. 执行 lambda x: x % n > 0 # 这里lambda表达式的n会从_not_divisible(7)中找到，即n=7
						3. 判断得出:不能整除7，所以返回11
				4. n = 11
				5. 执行 yield n(11)
				6. 跳出
				
'''</span>

<span class="token triple-quoted-string string">'''
		如果对pri_2进行一波顺寻分析，会发现主要的不同在于,它的判断规则从 ‘_not_divisible(3)’, ‘_not_divisible(5)’, ‘_not_divisible(7)’ 分别变成了‘lambda x: x % n > 0’, ‘lambda x: x % n > 0’, ‘lambda x: x % n > 0’, 因为在每一次执行时,前者判断条件里面的n来源于已经创造的函数空间中的变量n, 即3,5,7。而后者因为并不是返回函数，且本身并没有定义n，所以会自动在外层函数中找n,最终找到了定义在prime_2()中的n值, 故而三个lambda表达式都是使用的一样的n值。
'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="装饰器">装饰器</h3>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 装饰器主要用于增强函数的功能，本质上，decorator就是一个返回函数的高阶函数</span>
<span class="token triple-quoted-string string">'''
	下面将举几个例子来帮助理解装饰器的行为及其用法:
		例1: 基本使用
		例2: 带参数的decorator
		例3: 使用decorator的decorator(常用)
		例4: 提前执行func,并以变量作为返回值的装饰器(最常用)
'''</span>

<span class="token comment"># 例1: 基本使用</span>
<span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call %s():'</span> <span class="token operator">%</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>
        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>
    <span class="token keyword">return</span> wrapper

<span class="token decorator annotation punctuation">@log</span>
<span class="token keyword">def</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2020-12-2'</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span>	now<span class="token punctuation">(</span><span class="token punctuation">)</span>
call now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">2</span>

<span class="token comment"># 实际上在执行now()这一步可以拆分为两步:</span>
<span class="token comment">#				1. now_1 = log(now)</span>
<span class="token comment">#				2. now_1():</span>
<span class="token comment">#					1. wrapper():</span>
<span class="token comment">#						1. print('call %s():' % now.__name__)</span>
<span class="token comment">#						2. return now()</span>
<span class="token comment">#					2. now()</span>



<span class="token comment"># 例2: 带参数的decorator</span>
<span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s %s():'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>text<span class="token punctuation">,</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>
        <span class="token keyword">return</span> wrapper
    <span class="token keyword">return</span> decorator

<span class="token decorator annotation punctuation">@log</span><span class="token punctuation">(</span><span class="token string">'excute'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2020-12-2'</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> now<span class="token punctuation">(</span><span class="token punctuation">)</span>
excute now<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">12</span>

<span class="token comment"># 执行顺序分析:</span>
<span class="token comment"># 1. now_1 = log('excute')(now):</span>
<span class="token comment">#		1. text = 'excute'</span>
<span class="token comment">#		2. now_1 = decorator(now)</span>
<span class="token comment"># 2. now_1():</span>
<span class="token comment">#		1. wrapper():</span>
<span class="token comment">#			1. print('%s %s():' % ('excute', now.__name__))</span>
<span class="token comment">#			2. return now()</span>
<span class="token comment">#		2. now()</span>




<span class="token comment"># 例3: 使用decorator的decorator(常用)</span>
<span class="token keyword">import</span> functools

<span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">decorator_1</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token decorator annotation punctuation">@functools<span class="token punctuation">.</span>wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>
        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s %s():'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>text<span class="token punctuation">,</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>
        <span class="token keyword">return</span> wrapper
    <span class="token keyword">return</span> decorator

<span class="token comment"># 其中@functools.wraps(func)使用这个装饰器是为了将函数在使用了@decorator这个装饰器之后,把 .__name__这一属性保持不变</span>


<span class="token comment"># 如果不加上@functools.wraps(func)</span>
<span class="token decorator annotation punctuation">@log</span>
<span class="token keyword">def</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2020-12-2'</span><span class="token punctuation">)</span>

    
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> now
<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>__name__
<span class="token string">'decorator_1'</span>


<span class="token comment"># 加上@functools.wraps(func)这一语句后</span>
<span class="token decorator annotation punctuation">@log</span>
<span class="token keyword">def</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2020-12-2'</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> now    
<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>__name__
<span class="token string">'now'</span>



<span class="token comment"># 例4: 提前执行func,并以变量作为返回值的装饰器(最常用)</span>
<span class="token keyword">import</span> time<span class="token punctuation">,</span> functools

<span class="token keyword">def</span> <span class="token function">metric</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@functools<span class="token punctuation">.</span>wraps</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">decoretor</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        t0 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        back <span class="token operator">=</span> fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        delta_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t0
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s executed in %s ms'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>fn<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> delta_time<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> back
    <span class="token keyword">return</span> decoretor

<span class="token comment"># 可见返回的是变量back,使用这样的方法可以在执行decorator()的过程中就调用函数,并得到相关信息,而并不需要等到decorator都执行完了最后才调用函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="偏函数">偏函数</h3>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 当我们大量使用某一个函数是，我们想要将某些参数固定下来，我们会引入偏函数的概念</span>

<span class="token comment"># 例1: 手动创建偏函数</span>
<span class="token keyword">def</span> <span class="token function">int2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> base<span class="token punctuation">)</span>

<span class="token comment"># 例2: 利用functools.partial()函数创建偏函数</span>
int2 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment"># 实际上functools.partial()接收三个参数, partial(func, *args, **keywords), 其中第一个为函数名，后面两个参数将分别作为位置传参和关键字传参传入到func中</span>

<span class="token comment"># 如:</span>
int2 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
int2<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">,</span>base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>

max10 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
max10<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="模块初步">模块初步</h3>
<h4 id="模块简介">模块简介</h4>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span>
<span class="token comment"># -*- coding: utf-8 -*-</span>

<span class="token string">' a test module '</span>

__author__ <span class="token operator">=</span> <span class="token string">'Michael Liao'</span>

<span class="token keyword">import</span> sys

<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    args <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> <span class="token builtin">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, %s!'</span> <span class="token operator">%</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Too many arguments!'</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>
    test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
	第1行和第2行是标准注释，第1行注释可以让这个hello.py文件直接在Unix/Linux/Mac上运行，第2行注释表示.py文件本身使用标准UTF-8编码；

	第4行是一个字符串，表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释；

	第6行使用__author__变量把作者写进去，这样当你公开源代码后别人就可以瞻仰你的大名
	
	以上就是Python模块的标准文件模板，当然也可以全部删掉不写，但是，按标准办事肯定没错。
	
	
	
	后面开始就是真正的代码部分。
	
	第8行import sys导入内建的系统模块
	
	sys模块有一个argv变量，用list存储了命令行的所有参数。argv至少有一个元素，因为第一个参数永远是该.py文件的名称，例如：
	运行python3 hello.py获得的sys.argv就是['hello.py']
	运行python3 hello.py Michael获得的sys.argv就是['hello.py', 'Michael']
	
	最后两行:
		if __name__=='__main__':
   	 		test()
   	 	当我们在命令行运行hello模块文件时，Python解释器把一个特殊变量__name__置为__main__，而如果在其他地方导入该hello模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试:
   	 	情况1: //直接运行hello.py，判定__name__ == __main__, 所以直接执行test()
   	 		$ python3 hello.py
			Hello, world!
			$ python hello.py Michael
			Hello, Michael!
		情况2: //导入hello模块时,虽然最后两行也被导入了,但是不同的是__name__ ！= __main__, 所以不执行test(), 如需执行则需要手动调用test()
			$ python3
			Python 3.4.3 (v3.4.3:9b73f1c3e601, Feb 23 2015, 02:52:03) 
			[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
			Type "help", "copyright", "credits" or "license" for more information.
			>>> import hello
			>>> hello.test()
			Hello, world!				
'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="作用域数据封装">作用域(数据封装)</h4>
<ol type="1">
<li><p>特殊变量(魔法变量): <code>__xxx__</code> : <code>__author__</code>,<code>__name__</code>,<code>__doc__</code> 可以被直接引用，但是有特殊用途</p></li>
<li><p>私有变量:<code>_xxx</code> 或者<code>__xxx</code> : 不应该被直接引用 一个下划线开头的实例变量名，比如<code>_name</code>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。</p>
<p>​ 双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问<code>__name</code>是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量：</p></li>
<li><p>公开变量: <code>xxx</code></p></li>
</ol>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 常见错误</span>
<span class="token operator">>></span><span class="token operator">></span> bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart Simpson'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">'Bart Simpson'</span>
<span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>__name <span class="token operator">=</span> <span class="token string">'New Name'</span> <span class="token comment"># 设置__name变量！</span>
<span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>__name
<span class="token string">'New Name'</span>

<span class="token comment"># 表面上看，外部代码“成功”地设置了__name变量，但实际上这个__name变量和class内部的__name变量不是一个变量！内部的__name变量已经被Python解释器自动改成了_Student__name，而外部代码给bart新增了一个__name变量。不信试试：</span>

<span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># get_name()内部返回self.__name</span>
<span class="token string">'Bart Simpson'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="这里有一个值得注意的但不知道放到哪里的实际案例">这里有一个值得注意的但不知道放到哪里的实际案例</h4>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">F</span><span class="token punctuation">:</span>
    val <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
    val_2 <span class="token operator">=</span> <span class="token number">3</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    
f1 <span class="token operator">=</span> F<span class="token punctuation">(</span><span class="token punctuation">)</span>
f2 <span class="token operator">=</span> F<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">.</span>val<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 
<span class="token operator">>></span><span class="token operator">></span> f2<span class="token punctuation">.</span>val
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>       <span class="token comment"># 对f1实例中属性的操作，影响到了f2</span>

<span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">.</span>val_2 <span class="token operator">+=</span> <span class="token number">1</span> 
<span class="token operator">>></span><span class="token operator">></span> f2<span class="token punctuation">.</span>val_2	 <span class="token comment"># 对f1实例中属性的操作，没有影响到f2</span>
<span class="token number">3</span>

<span class="token operator">>></span><span class="token operator">></span> f3 <span class="token operator">=</span> F<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> f3<span class="token punctuation">.</span>val
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>	<span class="token comment">#可以说对实例f1的操作，已经影响到了这个类</span>

<span class="token comment"># 以上现象的本质原因是Python的可变和不可变数据类型所决定的，这是因为在实例化后，类变量是各个实例共享的对象，都指向同一个内存地址，起先f1.val_2和f2.val_2是指向同一个内存地址，f1.val和f2.val是指向同一内存地址，但f1.val_2和f2.val_2指向的是一个数字，而f1.val和f2.val指向的是一个列表，数字是一个不可变对象，列表是一个可变对象，所以在执行f1.val_2 += 2后，f1.val_2新创建了一个指向数字“7”的对象，而f2.val_2还是指向实例化时指向数字“5”的对象；而向列表中增加一个元素并不会创建一个新的对象，所以f1.val和f2.val依然指向同一个内存地址。</span>
<span class="token comment"># 但这种现象仅限于对于 ‘类中已经定义好的可变类型变量’ 进行更改时会出现，而对于类中未定义, 而是在使用实例时新增加的属性，则不会有这种担心</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="继承和多态">继承和多态</h4>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 和函数在选择参数时，从高楼层往低楼层找，这个原理是类似的。子类的方法和变量也会优先在该类中找，找不到之后才会到父类中找，并一层一层往下</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h5 id="多继承">1 多继承</h5>
<h6 id="mro">1 MRO</h6>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># MRO遵循以下规则：</span>
<span class="token comment"># 	1. 本地优先级： 根据声明顺序从左往右查找</span>
<span class="token comment"># 	2. 单调性： 所有子类中，也应满足其查找顺序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 生成MRO采用的是C3 算法，而C3算法中重点是一个merge函数，那先来看一个执行merge时步骤：</span>
<span class="token comment"># 		1. 顺序遍历列表</span>
<span class="token comment">#		2. 查找首元素满足以下条件，否则遍历下一个序列</span>
<span class="token comment">#				1. 在其他序列也是首元素</span>
<span class="token comment">#				2.	或者在其他序列里不存在</span>
<span class="token comment">#		3. 从所有序列中移除此元素，合并到MRO序列中</span>
<span class="token comment">#		4. 重复执行，直到所有序列为空或无法执行下去</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 实例演示:</span>
<span class="token comment">#</span>
<span class="token comment"># 例1:</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token comment">#	mro(B) = [B,O] </span>
<span class="token comment">#	[B,O]中的字母O表示的就是object</span>



<span class="token comment"># 例2:</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token comment"># 	mro(B) = [B] + merge(mro(A),[A])</span>
<span class="token comment">#	mro(B) = [B] + merge([A,O],[A])</span>
<span class="token comment">#	mro(B) = [B,A] + merge([O])</span>
<span class="token comment">#	mro(B) = [B,A,O]</span>




<span class="token comment"># 例3:</span>
<span class="token keyword">class</span> <span class="token class-name">A1</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token keyword">class</span> <span class="token class-name">B1</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token keyword">class</span> <span class="token class-name">C1</span><span class="token punctuation">(</span>A1<span class="token punctuation">,</span>B1<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">pass</span>
<span class="token comment"># 	mro(C1) = [C1] + merge(mro(A1),mro(B1),[A1,B1])</span>
<span class="token comment"># 	mro(C1) = [C1] + merge([A1,O],[B1,O],[A1,B1])</span>
<span class="token comment"># 	mro(C1) = [C1] + merge([O],[B1,O],[B1])</span>
<span class="token comment"># 	mro(C1) = [C1,A1,B1] + merge([O],[O])</span>
<span class="token comment"># 	mro(C1) = [C1,A1,B1,O]</span>

<span class="token keyword">class</span> <span class="token class-name">C2</span><span class="token punctuation">(</span>B1<span class="token punctuation">,</span>A1<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token comment"># 	mro(C2) = [C2] + merge(mro(B1),mro(A1),[A1,B1])</span>
<span class="token comment"># 	mro(C2) = [C2] + merge([B1,O],[A1,O],[B1,A1])</span>
<span class="token comment"># 	mro(C2) = [C2] + merge([O],[A1,O],[A1])</span>
<span class="token comment"># 	mro(C2) = [C2,B1,A1] + merge([O],[O])</span>
<span class="token comment"># 	mro(C2) = [C2,B1,A1,O]</span>



<span class="token comment"># 例4:</span>
<span class="token keyword">class</span> <span class="token class-name">A2</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token keyword">class</span> <span class="token class-name">B2</span><span class="token punctuation">(</span>A2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token keyword">class</span> <span class="token class-name">C1</span><span class="token punctuation">(</span>A2<span class="token punctuation">,</span>B2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token comment"># 	mro(C1) = [C1] + merge(mro(A2),mro(B2),[A2,B2])</span>
<span class="token comment"># 	mro(C1) = [C1] + merge([A2,O],( [B2] + merge(mro(A2),[A2]) ),[A2,B2])</span>
<span class="token comment"># 	mro(C1) = [C1] + merge([A2,O],( [B2] + merge([A2,O],[A2]) ),[A2,B2])</span>
<span class="token comment"># 	mro(C1) = [C1] + merge([A2,O],( [B2,A2] + merge([O]) ),[A2,B2])</span>
<span class="token comment"># 	mro(C1) = [C1] + merge([A2,O],[B2,A2,O],[A2,B2])</span>
<span class="token comment"># 	mro(C1) = [C1] + merge([A2,O],[B2,A2,O],[A2,B2])</span>
<span class="token comment">#	mro(C1) = Error</span>

<span class="token keyword">class</span> <span class="token class-name">C2</span><span class="token punctuation">(</span>B2<span class="token punctuation">,</span>A2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token comment"># 	mro(C2) = [C2] + merge(mro(B2),mro(A2),[B2,A2])</span>
<span class="token comment"># 	mro(C2) = [C2] + merge([B2,A2,O],[A2,O],[B2,A2])</span>
<span class="token comment"># 	mro(C2) = [C2,B2] + merge([A2,O],[A2,O],[A2])</span>
<span class="token comment"># 	mro(C2) = [C2,B2,A2] + merge([O],[O])</span>
<span class="token comment"># 	mro(C2) = [C2,B2,A2,O]</span>

<span class="token comment"># 总结出大概就是子类要放在前面</span>

<span class="token comment"># 其实在一个类中有一个__mro__属性，可显示出查找顺序，如下：</span>
<span class="token operator">>></span><span class="token operator">></span> C2<span class="token punctuation">.</span>__mro__
<span class="token punctuation">(</span>__main__<span class="token punctuation">.</span>C2<span class="token punctuation">,</span> __main__<span class="token punctuation">.</span>B2<span class="token punctuation">,</span> __main__<span class="token punctuation">.</span>A2<span class="token punctuation">,</span> <span class="token builtin">object</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h6 id="mixin---混入">2 MIXIN - 混入</h6>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
	MIXIN是一种组合的表现，在python是通过多继承来实现组合。

	试想有这样一个场景，我们有一个文档类，文档分为word文档和excel文档，这些文档可以输出到显示器上，也可以输出到打印机上，我们用MIXIN的方式来实现，如下：
'''</span>
<span class="token keyword">class</span> <span class="token class-name">Document</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>content <span class="token operator">=</span> content
  
<span class="token keyword">class</span> <span class="token class-name">Word</span><span class="token punctuation">(</span>Document<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">format</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">'i am word,my content is &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
  
<span class="token keyword">class</span> <span class="token class-name">Excel</span><span class="token punctuation">(</span>Document<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">format</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">'i am excel,my content is &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>content<span class="token punctuation">)</span>

<span class="token triple-quoted-string string">'''
	上边定义了三个类，Document类作为Word和Excel类的父类，两个子类分别实现了各自的format方法。这两种文档能输出到打印机和显示器上，所以接下来定义这两个类，如下：
'''</span>        
        
<span class="token keyword">class</span> <span class="token class-name">Monitor</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125; on monitor'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>
 
<span class="token keyword">class</span> <span class="token class-name">Printer</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125; on printer'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>

        
<span class="token triple-quoted-string string">'''
	Monitor和Printer类只继承object类，各自实现了输出功能。如果此时我们想把word文档输出到显示器上、word文档输出到打印机上，或者是想把excel文档输出到显示器、excel文档输出到打印机上，应该怎样实现呢？如下：
'''</span>       
<span class="token keyword">class</span> <span class="token class-name">WordWithMonitor</span><span class="token punctuation">(</span>Monitor<span class="token punctuation">,</span>Word<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
 
<span class="token keyword">class</span> <span class="token class-name">ExcelWithMonitor</span><span class="token punctuation">(</span>Monitor<span class="token punctuation">,</span>Excel<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
 
<span class="token keyword">class</span> <span class="token class-name">WordWithPrinter</span><span class="token punctuation">(</span>Printer<span class="token punctuation">,</span>Word<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
 
<span class="token keyword">class</span> <span class="token class-name">ExcelWithPrinter</span><span class="token punctuation">(</span>Printer<span class="token punctuation">,</span>Excel<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

wwm <span class="token operator">=</span> WordWithMonitor<span class="token punctuation">(</span><span class="token string">'mix in'</span><span class="token punctuation">)</span>
wwm<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
wwm<span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>

wwp <span class="token operator">=</span> WordWithPrinter<span class="token punctuation">(</span><span class="token string">'mix in'</span><span class="token punctuation">)</span>
wwp<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
wwp<span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token triple-quoted-string string">'''
	ExcelWithMonitor类和ExcelWithPrinter类实例化出来后效果和上边一样，这样通过继承不同的类组合就可以满足不同的要求，上边的Monitor类和Printer类我们叫做MINXIN类，这种类有以下特征：

	1. 此类一般只包含方法，不包含数据

	2. 此类不能单独实例化，比如上边的Monitor类和Printer，类中没有content这个变量，所以不能单独实例化

	3. 此类一般只继承object类，或继承具有MIXIN类特性的类

	在使用MINXIN这种方式时，一般会把MIXIN类写在继承列表的首位，如class WordWithMonitor(Monitor,Word):，这样能避免因其他类的同名方法覆盖MIXIN类的方法，可以通过__mro__属性来看一下类继承后的查找顺序，如下：
'''</span>
<span class="token operator">>></span><span class="token operator">></span> WordWithMonitor<span class="token punctuation">.</span>__mro__
<span class="token punctuation">(</span>__main__<span class="token punctuation">.</span>WordWithMonitor<span class="token punctuation">,</span>
 __main__<span class="token punctuation">.</span>Monitor<span class="token punctuation">,</span>
 __main__<span class="token punctuation">.</span>Word<span class="token punctuation">,</span>
 __main__<span class="token punctuation">.</span>Document<span class="token punctuation">,</span>
 <span class="token builtin">object</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="获取对象信息反射">获取对象信息(反射)</h4>
<p>详细信息:https://zhaochj.github.io/2016/05/08/2016-05-08-%E5%8F%8D%E5%B0%84/</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 使用type()</span>

<span class="token comment"># 变量</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token string">'NoneType'</span><span class="token operator">></span>

<span class="token comment"># 函数 和 自定义类的对象</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'builtin_function_or_method'</span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.Animal'</span><span class="token operator">></span>



<span class="token comment"># 2. 调用types模块</span>

<span class="token comment"># check变量是否为函数</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> types
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token operator">==</span>types<span class="token punctuation">.</span>FunctionType
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">)</span><span class="token operator">==</span>types<span class="token punctuation">.</span>BuiltinFunctionType
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">)</span><span class="token operator">==</span>types<span class="token punctuation">.</span>LambdaType
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>types<span class="token punctuation">.</span>GeneratorType
<span class="token boolean">True</span>



<span class="token comment"># 3. 使用isinstance()</span>

<span class="token comment"># 总是优先使用isinstance()判断类型，可以将指定类型及其子类“一网打尽”。</span>
<span class="token comment"># 对于一个对象而言，他不仅属于他自己的类，还属于他继承的父类</span>

<span class="token comment"># 并且还可以判断一个变量是否是某些类型中的一种(传入tuple):</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>



<span class="token comment"># 4. 使用dir()</span>

<span class="token comment"># dir()会返回一个包含对象或者类所有属性和方法字符串的list: (既可以传入类名，也可以传入实例化对象)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'__class__'</span><span class="token punctuation">,</span>
 <span class="token string">'__delattr__'</span><span class="token punctuation">,</span>
 <span class="token string">'__dir__'</span><span class="token punctuation">,</span>
 <span class="token string">'__doc__'</span><span class="token punctuation">,</span>
 <span class="token string">'__eq__'</span><span class="token punctuation">,</span>
 <span class="token string">'__format__'</span><span class="token punctuation">,</span>
 <span class="token string">'__ge__'</span><span class="token punctuation">,</span>
 <span class="token string">'__getattribute__'</span><span class="token punctuation">,</span>
 <span class="token string">'__gt__'</span><span class="token punctuation">,</span>
 <span class="token string">'__hash__'</span><span class="token punctuation">,</span>
 <span class="token string">'__init__'</span><span class="token punctuation">,</span>
 <span class="token string">'__init_subclass__'</span><span class="token punctuation">,</span>
 <span class="token string">'__le__'</span><span class="token punctuation">,</span>
 <span class="token string">'__lt__'</span><span class="token punctuation">,</span>
 <span class="token string">'__ne__'</span><span class="token punctuation">,</span>
 <span class="token string">'__new__'</span><span class="token punctuation">,</span>
 <span class="token string">'__reduce__'</span><span class="token punctuation">,</span>
 <span class="token string">'__reduce_ex__'</span><span class="token punctuation">,</span>
 <span class="token string">'__repr__'</span><span class="token punctuation">,</span>
 <span class="token string">'__setattr__'</span><span class="token punctuation">,</span>
 <span class="token string">'__sizeof__'</span><span class="token punctuation">,</span>
 <span class="token string">'__str__'</span><span class="token punctuation">,</span>
 <span class="token string">'__subclasshook__'</span><span class="token punctuation">]</span>

<span class="token comment"># 实际上 dir() 等价于 'object.__dir__',我们观察上面的结果可以看出对象是有__dir__这个attribute或者说是方法的(这里并不需要细究)</span>

<span class="token comment"># 因为所有的类都会继承object(他是所有类的父类)，所以所有类都可以调用dir(),查看对象里面的属性和方法</span>

<span class="token comment"># 类似的还有 str类 下的 'str.__len__()' 等价于 len() </span>
<span class="token comment">#					'object.__getatrribute__()' 等价于 getattr()</span>
<span class="token comment">#					'object.__setattr__()' 等价于 setattr()</span>

<span class="token comment"># 比较常用的用来查看对象属性或者方法的函数</span>
<span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">getattr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">setattr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">hasattr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 使用示例</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">9</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">power</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">return</span> self<span class="token punctuation">.</span>x <span class="token operator">*</span> self<span class="token punctuation">.</span>x
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">>></span><span class="token operator">></span> obj <span class="token operator">=</span> MyObject<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span> <span class="token comment"># 有属性'x'吗？</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> obj<span class="token punctuation">.</span>x
<span class="token number">9</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token comment"># 有属性'y'吗？</span>
<span class="token boolean">False</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">setattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span> <span class="token comment"># 设置一个属性'y'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token comment"># 有属性'y'吗？</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token comment"># 获取属性'y'</span>
<span class="token number">19</span>
<span class="token operator">>></span><span class="token operator">></span> obj<span class="token punctuation">.</span>y <span class="token comment"># 获取属性'y'</span>
<span class="token number">19</span>
<span class="token comment"># 可以传入一个default参数，如果属性不存在，就返回默认值：</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token comment"># 获取属性'z'，如果不存在，返回默认值404</span>
<span class="token number">404</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="类方法">类方法</h4>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 类方法可以调用类变量但不能调用实例变量</span>
<span class="token comment"># 类方法用@classmethod这个装饰器实现，如下：</span>
<span class="token keyword">class</span> <span class="token class-name">H</span><span class="token punctuation">:</span>
    __val <span class="token operator">=</span> <span class="token number">3</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x

    <span class="token decorator annotation punctuation">@classmethod</span>
    <span class="token keyword">def</span> <span class="token function">get_val</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>__val<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
        
        
<span class="token operator">>></span><span class="token operator">></span> h <span class="token operator">=</span> H<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> H<span class="token punctuation">.</span>get_val<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">3</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
AttributeError                            Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>
<span class="token operator">&lt;</span>ipython<span class="token operator">-</span><span class="token builtin">input</span><span class="token operator">-</span><span class="token number">76</span><span class="token operator">-</span><span class="token number">0e8ff847d82b</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token number">1</span> h <span class="token operator">=</span> H<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">2</span> H<span class="token punctuation">.</span>get_val<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">&lt;</span>ipython<span class="token operator">-</span><span class="token builtin">input</span><span class="token operator">-</span><span class="token number">75</span><span class="token operator">-</span>c0204fe93832<span class="token operator">></span> <span class="token keyword">in</span> get_val<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>
      <span class="token number">8</span>     <span class="token keyword">def</span> <span class="token function">get_val</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token number">9</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>__val<span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">10</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>x<span class="token punctuation">)</span>

AttributeError<span class="token punctuation">:</span> <span class="token builtin">type</span> <span class="token builtin">object</span> <span class="token string">'H'</span> has no attribute <span class="token string">'x'</span>

    
<span class="token operator">>></span><span class="token operator">></span> h<span class="token punctuation">.</span>get_val<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">3</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
AttributeError                            Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>
<span class="token operator">&lt;</span>ipython<span class="token operator">-</span><span class="token builtin">input</span><span class="token operator">-</span><span class="token number">77</span><span class="token operator">-</span><span class="token number">6b7dc73f632b</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> h<span class="token punctuation">.</span>get_val<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">&lt;</span>ipython<span class="token operator">-</span><span class="token builtin">input</span><span class="token operator">-</span><span class="token number">75</span><span class="token operator">-</span>c0204fe93832<span class="token operator">></span> <span class="token keyword">in</span> get_val<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>
      <span class="token number">8</span>     <span class="token keyword">def</span> <span class="token function">get_val</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token number">9</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>__val<span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">10</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>x<span class="token punctuation">)</span>

AttributeError<span class="token punctuation">:</span> <span class="token builtin">type</span> <span class="token builtin">object</span> <span class="token string">'H'</span> has no attribute <span class="token string">'x'</span>

<span class="token comment"># 如上，在执行H.get_val()和h.get_val()后都输出了cls__val这个类私有变量的值，但在访问实例变量时抛出了AttributeError错误，说明类直接调用，如H.get_val()也可以通过实例调用，如h.get_val()，类方法可以访问类私有变量，类方法不可访问实例变量。所有实例在创造是就都共享的叫类变量,每个实例需要单独定义的变量叫实例变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="静态方法">静态方法</h4>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 静态方法既不能调用实例的变量也不能调用类变量</span>
<span class="token comment"># 静态方法使用@staticmethod这个装饰器来实现，如下：</span>
<span class="token keyword">class</span> <span class="token class-name">I</span><span class="token punctuation">:</span>
    __val <span class="token operator">=</span> <span class="token number">3</span>
    val <span class="token operator">=</span> <span class="token number">4</span>

    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">print_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>__val<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> i <span class="token operator">=</span> I<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> i<span class="token punctuation">.</span>print_val<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token number">123</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
NameError                                 Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>
<span class="token operator">&lt;</span>ipython<span class="token operator">-</span><span class="token builtin">input</span><span class="token operator">-</span><span class="token number">78</span><span class="token operator">-</span><span class="token number">9345bd892eed</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token number">9</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>__val<span class="token punctuation">)</span>
     <span class="token number">10</span> i <span class="token operator">=</span> I<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">11</span> i<span class="token punctuation">.</span>print_val<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">&lt;</span>ipython<span class="token operator">-</span><span class="token builtin">input</span><span class="token operator">-</span><span class="token number">78</span><span class="token operator">-</span><span class="token number">9345bd892eed</span><span class="token operator">></span> <span class="token keyword">in</span> print_val<span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token number">6</span>     <span class="token keyword">def</span> <span class="token function">print_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token number">7</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">8</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
      <span class="token number">9</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>__val<span class="token punctuation">)</span>
     <span class="token number">10</span> i <span class="token operator">=</span> I<span class="token punctuation">(</span><span class="token punctuation">)</span>

NameError<span class="token punctuation">:</span> name <span class="token string">'val'</span> <span class="token keyword">is</span> <span class="token keyword">not</span> defined
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="魔法方法">魔法方法</h4>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
	1. 对象的创建与销毁:
			__new__ 创建对象
			__init__ 初始化对象
			__del__ 当销毁对象时调用
	2. 可视化对象:
			__repr__ 对应repr(object)这个函数，返回一个可以用来表示对象的可打印字符串
			__str__ 对应str(object)这个函数，返回一个字符串对象，适合用于print输出
			__bytes__ 对应bytes(object)这个函数，返回bytes对象
	3. 比较运算符重载
			__lt__ 小于
			__le__ 小于等于
			__eq__ 等于
			__ne__ 不等于
			__gt__ 大于
			__ge__ 大于等于
	4. bool() 和 len()函数
	5. hash() 与 可hash对象
	6. 可调用对象 和 类装饰器
	7. 类装饰器
	8. 单例(基于__call__)
'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="对象的创建与销毁">对象的创建与销毁</h5>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
	1. 对象的创建与销毁:
			__new__ 创建对象
			__init__ 初始化对象
			__del__ 当销毁对象时调用	
'''</span>

<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call __new__'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token builtin">object</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call __init__'</span><span class="token punctuation">)</span>
        
    <span class="token keyword">def</span> <span class="token function">mothod</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call mothod'</span><span class="token punctuation">)</span>
        
    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call __del__'</span><span class="token punctuation">)</span>
        

<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>
call __new__
call __init__
<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>mothod<span class="token punctuation">(</span><span class="token punctuation">)</span>
call mothod
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> a
call __del__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="可视化对象">可视化对象</h5>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
	2. 可视化对象:
			__repr__ 对应repr(object)这个函数，返回一个可以用来表示对象的可打印字符串
			__str__ 对应str(object)这个函数，返回一个字符串对象，适合用于print输出
			__bytes__ 对应bytes(object)这个函数，返回bytes对象
'''</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        
    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'call __repr__ name is &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'call __str__ name is &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">__bytes__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'call __bytes__ name is &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>

    
 b <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token string">'zhaochj'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> b   
call __repr__ name <span class="token keyword">is</span> zhaochj
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
call __str__ name <span class="token keyword">is</span> zhaochj
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token string">b'call __bytes__ name is zhaochj'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="比较运算符重载">比较运算符重载</h5>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
	3. 比较运算符重载
			__lt__ 小于
			__le__ 小于等于
			__eq__ 等于
			__ne__ 不等于
			__gt__ 大于
			__ge__ 大于等于
'''</span>
<span class="token triple-quoted-string string">'''
			类创建的对象里的‘属性’是可以通过运算符进行比较的
			但类本身是不能用运算符进行比较或者计算的
'''</span>
<span class="token keyword">class</span> <span class="token class-name">Person_1</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age
        
    <span class="token keyword">def</span> <span class="token function">__lt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call __lt__'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>age <span class="token operator">&lt;</span> other<span class="token punctuation">.</span>age
    
    <span class="token keyword">def</span> <span class="token function">__le__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call __le__'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>age <span class="token operator">&lt;=</span> other<span class="token punctuation">.</span>age
    
    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call __eq__'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>age <span class="token operator">==</span> other<span class="token punctuation">.</span>age
    
    <span class="token keyword">def</span> <span class="token function">__ne__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call __ne__'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>age <span class="token operator">!=</span> other<span class="token punctuation">.</span>age
    
    <span class="token keyword">def</span> <span class="token function">__gt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call __gt__'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>age <span class="token operator">></span> other<span class="token punctuation">.</span>age
    
    <span class="token keyword">def</span> <span class="token function">__ge__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call __ge__'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>age <span class="token operator">>=</span> other<span class="token punctuation">.</span>age

    
<span class="token operator">>></span><span class="token operator">></span> p3 <span class="token operator">=</span> Person_1<span class="token punctuation">(</span><span class="token string">'30'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> p4 <span class="token operator">=</span> Person_1<span class="token punctuation">(</span><span class="token string">'20'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> p3 <span class="token operator">></span> p4
call __gt__
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> P3 <span class="token operator">==</span> P4
call __eq__
<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="bool-和-len-函数"><code>bool()</code> 和 <code>len()</code> 函数</h5>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
	4. bool() 和 len() 函数:
			__bool__ 决定bool()函数的执行
			__len__  决定len()函数的执行
			注:如果未标注__bool__方法,则会采用object中的__bool__,并调用__len__，根据返回值决定True or False
'''</span>

<span class="token comment"># 观察bool函数的用法</span>
list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
str1 <span class="token operator">=</span> <span class="token string">''</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>
<span class="token boolean">False</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>
<span class="token boolean">False</span>

<span class="token comment"># 观察例1:</span>
<span class="token keyword">class</span> <span class="token class-name">Grok</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val
        
    <span class="token keyword">def</span> <span class="token function">__bool__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call __bool__'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>val

<span class="token operator">>></span><span class="token operator">></span> g <span class="token operator">=</span> Grok<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>
call __bool__
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> g <span class="token operator">=</span> Grok<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>
call __bool__
<span class="token boolean">False</span>

<span class="token comment"># 观察例2:</span>
<span class="token keyword">class</span> <span class="token class-name">Seq</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> args
        
    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call __len__'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>val<span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> s1 <span class="token operator">=</span> Seq<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> s2 <span class="token operator">=</span> Seq<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
call __len__
<span class="token number">3</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>
call __len__
<span class="token number">0</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
call __len__
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>
call __len__
<span class="token boolean">False</span>

<span class="token triple-quoted-string string">'''
	由上面两例可知, 
		1. bool函数主要是通过__bool__这个魔法方法来进行返回的,而len函数则是通过__len__这个魔法方法
		2. 我们还可知,当类内部未定义__bool__时,则自动采用object中的__bool__方法,此时会调用__len__这个魔法方法,并根据__len__方法的返回值来决定bool的返回值
'''</span>

<span class="token comment"># 例3: (定义__bool__后，调用bool()观察是否还会调用__len__)</span>
<span class="token keyword">class</span> <span class="token class-name">Seq_1</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> args
        
    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call __len__'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">__bool__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call __bool__'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>

<span class="token operator">>></span><span class="token operator">></span> s3 <span class="token operator">=</span> Seq_1<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>
call __bool__
<span class="token boolean">True</span>

<span class="token comment"># 显然，符合逻辑，他并不会调用object中的__bool__方法，自然也不会调用__len__方法咯</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="hash与可hash对象">hash()与可hash对象</h5>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
	5.hash()与可hash对象:
			__hash__ 控制了
'''</span>

<span class="token keyword">class</span> <span class="token class-name">Hash</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val
        
    <span class="token keyword">def</span> <span class="token function">__hash__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">123</span>
    
    
<span class="token operator">>></span><span class="token operator">></span> h1 <span class="token operator">=</span> Hash<span class="token punctuation">(</span><span class="token string">'zhaochj'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">hash</span><span class="token punctuation">(</span>h1<span class="token punctuation">)</span>
<span class="token number">123</span>

<span class="token triple-quoted-string string">'''
	如果不再类中定义__hash__ 在执行hash()时则会自动调用object类中的__hash__
'''</span>
<span class="token keyword">class</span> <span class="token class-name">Hash_1</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val
 


<span class="token operator">>></span><span class="token operator">></span> h1 <span class="token operator">=</span> Hash<span class="token punctuation">(</span><span class="token string">'zhaochj'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">hash</span><span class="token punctuation">(</span>h1<span class="token punctuation">)</span>
<span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="可调用对象">可调用对象</h5>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
	6. 可调用对象:
			__call__ 决定根据类实例化的对象是否可以被调用,以及返回值
'''</span>

<span class="token comment"># 在python中可以用callable函数查看一个对象是不是可调用，如下：</span>
<span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ha ha ha'</span><span class="token punctuation">)</span>
    
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">callable</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
<span class="token boolean">True</span>

<span class="token comment"># 那一个实例化的对象呢?</span>
<span class="token keyword">class</span> <span class="token class-name">Fun</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        
<span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> Fun<span class="token punctuation">(</span><span class="token string">'zhaochj'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">callable</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token boolean">False</span>
<span class="token comment"># 显然该对象是不可调用的</span>


<span class="token comment"># 如何创造出一种可以调用的实例化对象呢?</span>
<span class="token keyword">class</span> <span class="token class-name">Fun_1</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        
    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'my name is &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> Fun<span class="token punctuation">(</span><span class="token string">'zhaochj'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">callable</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">(</span><span class="token punctuation">)</span>
my name <span class="token keyword">is</span> zhaochj

<span class="token comment"># 事实上,完全可以通过 __call__魔法方法 把f()看作真正的函数,可以接收参数,也可以返回值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="类装饰器基于__call__">类装饰器(基于<code>__call__</code>)</h5>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
	7. 类装饰器(基于可调用对象):
			__call__ 决定根据类实例化的对象是否可以被调用,以及返回值
			@ 修饰器符号:
					@class()
					def a():
						pass
					
					a() 等同于一下几步
						1. b = class()
						2. a = b(a)
						2. a() = class()(a)() 
'''</span>
<span class="token comment"># 注意:在上例中 @class() 中的()一定不能省掉了,因为其本质还是利用了,可以接受函数作为参数的‘可调用对象’作为装饰器,即由类实例化的对象b</span>

<span class="token keyword">import</span> functools
<span class="token keyword">class</span> <span class="token class-name">InjectUser</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>default_user<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>user <span class="token operator">=</span> default_user
        
    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token decorator annotation punctuation">@functools<span class="token punctuation">.</span>wraps</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
        <span class="token keyword">def</span> <span class="token function">wrap</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token string">'user'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                kwargs<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>user
            <span class="token keyword">return</span> fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        <span class="token keyword">return</span> wrap
        
<span class="token decorator annotation punctuation">@InjectUser</span><span class="token punctuation">(</span><span class="token string">'zhaochj'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">do_somthings</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
<span class="token operator">>></span><span class="token operator">></span> do_somthings<span class="token punctuation">(</span><span class="token punctuation">)</span>
zhaochj
<span class="token operator">>></span><span class="token operator">></span> do_somthings<span class="token punctuation">(</span>user<span class="token operator">=</span><span class="token string">'就这水平'</span><span class="token punctuation">)</span>
就这水平

<span class="token comment"># 这完全等价于还没有加@装饰器时的一下语句</span>
<span class="token operator">>></span><span class="token operator">></span> InjectUser<span class="token punctuation">(</span><span class="token string">'zhaochj'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>do_somthings<span class="token punctuation">(</span>user<span class="token operator">=</span><span class="token string">'就这水平'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
就这水平<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="单例基于__call__">单例(基于<code>__call__</code>)</h5>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
	8. 利用__call__实现单例:
			__call__
'''</span>

<span class="token triple-quoted-string string">'''
	所谓单例，是指一个类的实例从始至终只能被创建一次。单例的实现有多种，这里以__call__方法来实现。
		即使之后再出现去用类创建实例,其本质也是第一个创建的实例对象
'''</span>

<span class="token keyword">class</span> <span class="token class-name">Single</span><span class="token punctuation">:</span>
    __instance <span class="token operator">=</span> <span class="token boolean">None</span>
    
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>cls <span class="token operator">=</span> cls
        
    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>__instance <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>__instance <span class="token operator">=</span> self<span class="token punctuation">.</span>cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__instance

<span class="token decorator annotation punctuation">@Single</span>
<span class="token keyword">class</span> <span class="token class-name">Grok1</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token operator">>></span><span class="token operator">></span> grok1 <span class="token operator">=</span> Grok1<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span>grok1<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> grok2 <span class="token operator">=</span> Grok1<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span>grok2<span class="token punctuation">)</span>


<span class="token triple-quoted-string string">'''
	我们来仔细分析一下程序顺序:
			1. 执行 grok1 = Grok1() 语句:
					1. Grok1被修饰器Single修饰:
						Grok1' = Single(Grok1):
						1. 将Single类实例化为一个的对象(我们将其称之为A),self就是对象A
						2. cls 接收传入的参数，即Grok1这个类
						3. 使Grok1这个对象的‘cls’属性 指向 Grok1这个类
						4. 将 Grok1'(为了区分它与之Grok1类) 指向实例化的Single类对象
					2. Grok1():
						1. 因为Grok1'本质上已经是实例化的Single类对象,所以在调用Grok1'时本质上是在调用Signal类里面定义好的__call__()方法
						2. 执行__call__(): (因为Grok1'()没有参数,所以__call__也没有参数)
								1. 判断是否创建过实例,显示没有进入if执行语句:
										1. Grok1'.__instance = Grok1'.cls() = Grok1()
										2. 即,将Grok1()类实例化出一个对象Grok1'.__instance
								2. 将Grok1'.__instance,即一个Grok1类的实例化对象的返回
					3. 将grok1 指向这个返回的Grok1类的实例化对象
					
			2. 执行 grok2 = Grok1() 语句:
					1. 因为Grok1已经经过了执行grok1 = Grok1()时,被修饰器Single修饰的那一步，(修饰过程只有执行了一次就不会再执行了)，所以本质上Grok1还是上次创造出来的Grok1',即一个实例化的Single类对象而已。此时直接进入第2步
					2. Grok1():
						在这里,分析基本与第一次执行时一直,但是不同点就在于，此时Grok1'.__instance不为空而是指向一个Grok1类的实例化对象,可以这么说,其实就是grok1了,所以他不会再执行if语句里面的实例化过程了,而是直接返回这个实例化对象,即之前已经创建的grok1
					3. 将grok2 指向这个返回的Grok1类的实例化对象, 即grok1
'''</span>			<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="with语句"><code>with</code>语句</h5>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
		9. with 语句与__enter__,__exit__方法
'''</span>


<span class="token triple-quoted-string string">'''
	有一些任务，可能事先需要设置，事后做清理工作。对于这种场景，Python的with语句提供了一种非常方便的处理方式。一个很好的例子是文件处理，你需要获取一个文件句柄，从文件中读取数据，然后关闭文件句柄。
	如果不使用with语句，代码是这样的：
'''</span>
<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/foo.txt"</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token string">'这里有两个问题。一是可能忘记关闭文件句柄；二是文件读取数据发生异常，没有进行任何处理。下面是处理异常的加强版本：'</span>
<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/foo.txt"</span><span class="token punctuation">)</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token string">'虽然这段代码运行良好，但是太冗长了。这时候就是with一展身手的时候了。除了有更优雅的语法，with还可以很好的处理上下文环境产生的异常。下面是with版本的代码：'</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/foo.txt"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 那with语法是怎么实现的呢？下边来看一个类：    </span>
<span class="token keyword">class</span> <span class="token class-name">Resource</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"call __init__"</span><span class="token punctuation">)</span>
        
    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"call __enter__"</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"self object at &#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self
    
    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"call __exit__"</span><span class="token punctuation">)</span>
        
        
<span class="token comment"># 创造个实例并运行试试?</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">with</span> Resource<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> res<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"res object at &#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
call __init__
call __enter__
self <span class="token builtin">object</span> at <span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Resource <span class="token builtin">object</span> at <span class="token number">0x7f5db448a6a0</span><span class="token operator">></span>
res <span class="token builtin">object</span> at <span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Resource <span class="token builtin">object</span> at <span class="token number">0x7f5db448a6a0</span><span class="token operator">></span>
call __exit__

<span class="token comment"># 这上边这个例子可知，只要一个类实现了__enter__和__exit__方法，那这个类就可以使用with语句。</span>


<span class="token comment"># with语句的调用流程大致如下：</span>
<span class="token number">1</span><span class="token punctuation">.</span> python解释器执行到<span class="token keyword">with</span> Resource<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> res<span class="token punctuation">:</span>语句时，其实是首先实例化了Resource类给对象res，接着执行了__enter__函数<span class="token punctuation">,</span>打印了前三行
<span class="token number">2</span><span class="token punctuation">.</span> 执行<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"res object at &#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>语句，这里的res是指向Resource类实例化对象，所以与self指向的对象相同，打印第四行
<span class="token number">3</span><span class="token punctuation">.</span> 再执行__exit__函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="描述器">描述器</h4>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
	一个类实现了__get__、__set__、__delete__三个方法，这个类就叫描述器
	以我现在的感觉来看,装饰器增强函数功能而存在的:(传入的参数是类或者函数)
		1. 普通装饰器,函数C接收的是函数A,返回的是函数B,通过函数B增强函数A的功能
		2. 类装饰器,类C接收的是函数A,返回的是可调用对象B,通过类的属性和方法来增强A的功能
				或者接受的是类A,返回的是可调用对象B,B可以实现实例化的功能,例如:单例
	而描述器则是为了限制类的属性而存在的:(传入的参数是属性名)
		1. 描述其,类C接受的是变量名字,返回对象,通过__get__、__set__、__delete__三个方法使得这个看起来这个对象表现和属性变量无异
	直接来看一个描述器的实现，如下：
'''</span>

<span class="token keyword">class</span> <span class="token class-name">Number</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        
    <span class="token keyword">def</span> <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>instance<span class="token punctuation">,</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call __get__'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>self<span class="token punctuation">.</span>name<span class="token punctuation">]</span>
    
    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>instance<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call __set__'</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            instance<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>self<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'execepted int or float'</span><span class="token punctuation">)</span>
            
    <span class="token keyword">def</span> <span class="token function">__delete__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>instance<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">del</span> instance<span class="token punctuation">.</span>__dic
        
        
<span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>
    x <span class="token operator">=</span> Number<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>
    y <span class="token operator">=</span> Number<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y
<span class="token triple-quoted-string string">'''
	这样就定义了一个描述器Number类，这个类的作用是描述实例化Point类时x和y变量的类型必须为整型或浮点型，如果不满足这两种类型中的一个，那抛出TypeError的异常。为了验证代码的调用关系，有意在Number类中加了一些print语句，在实例代码中应该把这语句去除。现在来实际实例化Point类试试：
'''</span>

<span class="token comment"># 给类里面的对象赋值</span>
<span class="token operator">>></span><span class="token operator">></span> p1 <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>
call __set__
call __set__

<span class="token comment"># 当执行p1 = Point(2,8)时发生了什么呢？</span>
<span class="token comment"># 1.当python解释器解析到</span>
<span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>
    x <span class="token operator">=</span> Number<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>
    y <span class="token operator">=</span> Number<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y
<span class="token comment"># 代码块时，解释器会创建一个Point类对象，此对象中有x类变量，且此变量指向Number类的一个实例，有y类变量，且此变量指向Number类的另一个实例；解释器还会创建一个__init__函数，此函数接收两个参数。</span>


<span class="token comment"># 2.当解释器执行到p1 = Point(2,8)时，Point类中的__init__构建函数被执行，执行以下两代码</span>
self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
self<span class="token punctuation">.</span>y <span class="token operator">=</span> y
<span class="token comment"># 解释器先执行self.x = x代码，这里的self.x是一个变量对象，等号后边的x是指向类变量x = Number('x')中的Number类实例，这时解释器会执行Number类中的__set__函数，把p1实例传递给instance这个形参，把2传递给value这个形参，执行此函数体的代码</span>
<span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>instance<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call __set__'</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            instance<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>self<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'execepted int or float'</span><span class="token punctuation">)</span>
<span class="token comment"># 首先打印出call __set__，再执行if语句，为True时把p1实例中__dict__这个特殊方法中key为x的值指向2；如果if语句的判断结果为False，那抛出异常。</span>

<span class="token comment"># 接着解释器往下执行代码，开始执行构建函数中的self.y = y语句，这个过程与执行self.x = x语句一样。这样就完成了p1 = Point(2,8)这个语句的执行，其实质就是会去执行Number类的__set__函数</span>
<span class="token operator">>></span><span class="token operator">></span> P1<span class="token punctuation">.</span>x
call __get__
<span class="token number">2</span>


<span class="token comment"># 当执行上边的p1.x时发生了什么？</span>
<span class="token comment"># 执行p1.x是去调用Point类的实例变量x，从上边的分析可知，这个实例变量是指向Number('x')这个实例，这时解释器会执行Number类的__get__方法，会把p1这个实例名作为变量传递给instance这个形参，把p1的类名作为变量传递给cls，代码如下：</span>
<span class="token keyword">def</span> <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>instance<span class="token punctuation">,</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call __get__'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>self<span class="token punctuation">.</span>name<span class="token punctuation">]</span>
<span class="token comment"># 先打印出call __get__，然后取出p1实例中__dict__中key为x的值返回，这样就得到执行p1 = Point(2,8)语句时2这个数字。</span>
<span class="token comment"># 总结起来，访问一个使用了描述器的类的实例属性时，其实质是访问了描述器的__get__函数。</span>
<span class="token comment"># 其实访问p1.x和访问Point.x.__get__(p1,Point)的过程是一样的。</span>


<span class="token operator">>></span><span class="token operator">></span> P1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span>
call __set__

这和实例化Point类时<span class="token punctuation">,</span>初始化赋值给x<span class="token punctuation">,</span>的过程是一样的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>代码改进(可以控制判断传入不同的类型)</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TypeCheck</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>expected_type<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>expected_type <span class="token operator">=</span> expected_type
        
    <span class="token keyword">def</span> <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>instance<span class="token punctuation">,</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> instance <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> instance<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>self<span class="token punctuation">.</span>name<span class="token punctuation">]</span>
        <span class="token keyword">return</span> self
    
    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>instance<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>self<span class="token punctuation">.</span>expected_type<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'expected type &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>expected_type<span class="token punctuation">)</span><span class="token punctuation">)</span>
        instance<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>self<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value
        
    <span class="token keyword">def</span> <span class="token function">__delete__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>instance<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">del</span> instance<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>self<span class="token punctuation">.</span>name<span class="token punctuation">]</span>

        
<span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>
    x <span class="token operator">=</span> Number<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    y <span class="token operator">=</span> Number<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="补充">补充</h4>
<h5 id="super方法">super()方法</h5>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># super 的一个最常见用法可以说是在子类中调用父类的初始化方法了。</span>
<span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name

    <span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, I am %s.'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Dog<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>greet<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#调用父类Animal的greet方法</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'WangWang...'</span><span class="token punctuation">)</span>


d<span class="token operator">=</span>Dog<span class="token punctuation">(</span><span class="token string">"xiaohuang"</span><span class="token punctuation">)</span>

d<span class="token punctuation">.</span>greet<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下:</p>
<pre class="line-numbers language-none"><code class="language-none">Hello, I am xiaohuang.
WangWang...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="面向对象高级编程">面向对象高级编程</h3>
<h4 id="动态绑定属性">动态绑定属性</h4>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>
s2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment"># 给实例化的对象进行属性绑定:</span>
s1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Michael'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token string">'Michael'</span>
<span class="token comment"># 但是其他实例化的对象并不会改变:</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
Error


<span class="token comment"># 若想要全部对象都可以使用该属性,则需要对类进行动态的属性绑定</span>
Student<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Michael'</span>
<span class="token triple-quoted-string string">'''
	这样所有的对象的name属性就都是Michael了，值得注意的是这与变量的查询机制有关，首先是对象里面是否定义了，如果没有则查询到本类，再是父类，超父类
'''</span>
<span class="token comment"># 另外方法也可以看做是一种属性</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="对动态绑定属性的限制">对动态绑定属性的限制</h4>
<h5 id="slots__"><code>__slots__</code></h5>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''
	但是实际情况下,我们并不希望用户去随意的绑定属性，所以Python引入了__slots__属性对这一行为进行限制
'''</span>


<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span> <span class="token comment"># 用tuple定义允许绑定的属性名称</span>
    
    
<span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 创建新的实例</span>
<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Michael'</span> <span class="token comment"># 绑定属性'name'</span>
<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span> <span class="token comment"># 绑定属性'age'</span>
<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">99</span> <span class="token comment"># 绑定属性'score'</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
AttributeError<span class="token punctuation">:</span> <span class="token string">'Student'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'score'</span>
    
    
<span class="token comment"># 注意:__slots__定义的属性仅对当前类实例起作用，对继承的子类是不起作用的:</span>
<span class="token comment"># 所以如果需要限制绑定属性,则在定义子类的时候也要引入__slots__,此时子类中的允许绑定的属性就是自身的__slots__加上父类的__slots__</span>
<span class="token comment"># 如果只是单纯的想继承父类定义的__slots__,则只需要在定义子类时加上一行 __slots__ = ()即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="property的实现与作用"><span class="citation" data-cites="property的实现与作用">@property的实现与作用</span></h5>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 我们直接来看property源码吧</span>
<span class="token keyword">class</span> <span class="token class-name">Property</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token string">"Emulate PyProperty_Type() in Objects/descrobject.c"</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fget<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> fset<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> fdel<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> doc<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>fget <span class="token operator">=</span> fget
        self<span class="token punctuation">.</span>fset <span class="token operator">=</span> fset
        self<span class="token punctuation">.</span>fdel <span class="token operator">=</span> fdel
        self<span class="token punctuation">.</span>__doc__ <span class="token operator">=</span> doc

    <span class="token keyword">def</span> <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> objtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> obj <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> self
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>fget <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> AttributeError<span class="token punctuation">,</span> <span class="token string">"unreadable attribute"</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>fget<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>fset <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> AttributeError<span class="token punctuation">,</span> <span class="token string">"can't set attribute"</span>
        self<span class="token punctuation">.</span>fset<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__delete__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>fdel <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> AttributeError<span class="token punctuation">,</span> <span class="token string">"can't delete attribute"</span>
        self<span class="token punctuation">.</span>fdel<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">getter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fget<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">type</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">(</span>fget<span class="token punctuation">,</span> self<span class="token punctuation">.</span>fset<span class="token punctuation">,</span> self<span class="token punctuation">.</span>fdel<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">setter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fset<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">type</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>fget<span class="token punctuation">,</span> fset<span class="token punctuation">,</span> self<span class="token punctuation">.</span>fdel<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">deleter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fdel<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">type</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>fget<span class="token punctuation">,</span> self<span class="token punctuation">.</span>fset<span class="token punctuation">,</span> fdel<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span>

    
<span class="token comment"># 可以看出Property就是一个‘描述器’,其作用是让返回的对象表现的像是他传递进来之前的样子,可以直接赋值,可以直接调用,还可以删除,除此之外,他还可以接收函数作为参数,并增强函数的功能,显然他也是一个‘装饰器’</span>

<span class="token comment"># 我们来看一个使用 @property 的实例:</span>
<span class="token keyword">class</span> <span class="token class-name">Spam</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__val <span class="token operator">=</span> val

    <span class="token decorator annotation punctuation">@Property</span>
    <span class="token keyword">def</span> <span class="token function">val</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__val
    
    <span class="token decorator annotation punctuation">@val<span class="token punctuation">.</span>setter</span>
    <span class="token keyword">def</span> <span class="token function">set_val</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__val <span class="token operator">=</span> value


<span class="token comment"># 1. 首先我们实例化这个Student,分析一下执行过程</span>
<span class="token operator">>></span><span class="token operator">></span> s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token triple-quoted-string string">'''
	执行过程分析:
		1. 执行了__init__语句，将传入的参数的值传递给了实例变量self.__val,且该变量不可以直接通过s1.__val访问
		2. val被装饰器Property给装饰了,具体过程就不分析了,总之是返回了一个名为val的Property类对象,并将val取代之。这一步骤的主要意义在意将'self.val'与'val(self)'等价起来
		3. set_val被装饰器val.setter给装饰了,将val这个property对象的fset方法设置为Spam类中的set_val方法,因为__set__方法的存在,使得可以直接对val进行赋值,这个值将作为返回的执行函数参数的value值, self.fset(obj, value), 等价于 set_val(self,value)。这一步最关键的意义在于让'self.val=value'与set_val(self,value)等价起来
		4. 将实例化好的对象传递给s1
		此时 s1.val 等价于 Property.__get__.(self, s1) 等价于 s1.val(self) 等价于 self.__val
			s1.val = 10 等价于 Property.__set_.(self, s1, 10) 等价于 s1.set_val(self, 10) 等价于 self.__val = 10
'''</span>

<span class="token triple-quoted-string string">'''
	为何要大费周章搞这些?直接把__val设置为公有属性不就好了吗,何必这么麻烦?
		1.在val方法中动手脚可以很轻松的将传入的值联系上其他与之相关的变量,即一个属性变动后,其他与之相关的属性可以通过表达式进行修改,从而达到自动化更新所有属性的效果
		2.通过对是否调用@val.setter可以控制是否可以直接用赋值符号进行修改,即控制变量是'只读'还是'可读写'
		3.通过在val方法中的操作可以对传入的值进行简单的检查,从而判断是否需要传递给属性,还是说输入的参数有问题
		4.Property别人都跟你写好了,直接当装饰器和描述器用不就好了吗,何必去纠结麻不麻烦?比你自己实现这些功能麻烦?Property的主要作用感觉就是
				1. 允许直接调用对象,使得这个对象的调用会执行某一个特定函数
				2. 重载了'='为一个函数,左边为对象,右边为函数的参数
				3. 允许直接用del(我们一般不会设置这个)
'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="io编程">IO编程</h3>
<h4 id="文件读写">文件读写</h4>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 读文件</span>
<span class="token comment"># 要以读文件的模式打开一个文件对象，使用Python内置的open()函数，传入文件名和标示符：</span>
<span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/Users/michael/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>

<span class="token comment"># 如果文件打开成功，接下来，调用read()方法可以一次读取文件的全部内容，Python把内容读到内存，用一个str对象表示：</span>
<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">'Hello, world!'</span>

<span class="token comment"># 最后一步是调用close()方法关闭文件。文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的:</span>
<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用try ... finally来实现:</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">try</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    	f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/path/to/file'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   	<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>	<span class="token keyword">finally</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">if</span> f<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        	f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment"># 但是每次都这么写实在太繁琐，所以，Python引入了with语句来自动帮我们调用close()方法:</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/path/to/file'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 这和前面的<span class="token keyword">try</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">finally</span>是一样的，但是代码更佳简洁，并且不必调用f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>方法。

<span class="token comment"># 调用read()会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。另外，调用readline()可以每次读取一行内容，调用readlines()一次读取所有内容并按行返回list。因此，要根据需要决定怎么调用。</span>

<span class="token comment"># 如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便</span>
<span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 把末尾的'\n'删掉</span>
    
    
<span class="token comment"># file-like Object</span>
<span class="token comment"># 像open()函数返回的这种有个read()方法的对象，在Python中统称为file-like Object。除了file外，还可以是内存的字节流，网络流，自定义流等等。file-like Object不要求从特定类继承，只要写个read()方法就行。</span>
<span class="token comment"># StringIO就是在内存中创建的file-like Object，常用作临时缓冲。</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Tech</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
